
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbcc  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a70  0800bdb8  0800bdb8  0001bdb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d828  0800d828  0002024c  2**0
                  CONTENTS
  4 .ARM          00000000  0800d828  0800d828  0002024c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d828  0800d828  0002024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d828  0800d828  0001d828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d82c  0800d82c  0001d82c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  0800d830  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005928  2000024c  0800da7c  0002024c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005b74  0800da7c  00025b74  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d726  00000000  00000000  00020275  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e11  00000000  00000000  0002d99b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d08  00000000  00000000  0002f7b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c38  00000000  00000000  000304b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a1ff  00000000  00000000  000310f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b4d6  00000000  00000000  0004b2ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009938b  00000000  00000000  000567c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000efb50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040c8  00000000  00000000  000efbcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000024c 	.word	0x2000024c
 8000204:	00000000 	.word	0x00000000
 8000208:	0800bd9c 	.word	0x0800bd9c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000250 	.word	0x20000250
 8000224:	0800bd9c 	.word	0x0800bd9c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000376:	f1a4 0401 	sub.w	r4, r4, #1
 800037a:	d1e9      	bne.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <LCD_WR_REG+0x40>)
 8000bac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bb0:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <LCD_WR_REG+0x40>)
 8000bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bb8:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000bba:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <LCD_WR_REG+0x44>)
 8000bbc:	88fb      	ldrh	r3, [r7, #6]
 8000bbe:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000bc0:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <LCD_WR_REG+0x40>)
 8000bc2:	2280      	movs	r2, #128	; 0x80
 8000bc4:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <LCD_WR_REG+0x40>)
 8000bc8:	2280      	movs	r2, #128	; 0x80
 8000bca:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <LCD_WR_REG+0x40>)
 8000bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bd2:	611a      	str	r2, [r3, #16]
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	40011000 	.word	0x40011000
 8000be4:	40010c00 	.word	0x40010c00

08000be8 <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <LCD_WR_DATAX+0x40>)
 8000bf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bf8:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <LCD_WR_DATAX+0x40>)
 8000bfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c00:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8000c02:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <LCD_WR_DATAX+0x44>)
 8000c04:	88fb      	ldrh	r3, [r7, #6]
 8000c06:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8000c08:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <LCD_WR_DATAX+0x40>)
 8000c0a:	2280      	movs	r2, #128	; 0x80
 8000c0c:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <LCD_WR_DATAX+0x40>)
 8000c10:	2280      	movs	r2, #128	; 0x80
 8000c12:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000c14:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <LCD_WR_DATAX+0x40>)
 8000c16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c1a:	611a      	str	r2, [r3, #16]
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	40011000 	.word	0x40011000
 8000c2c:	40010c00 	.word	0x40010c00

08000c30 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 8000c36:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <LCD_RD_DATA+0x7c>)
 8000c38:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000c3c:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 8000c3e:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <LCD_RD_DATA+0x7c>)
 8000c40:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8000c44:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 8000c46:	4b19      	ldr	r3, [pc, #100]	; (8000cac <LCD_RD_DATA+0x7c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8000c4c:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <LCD_RD_DATA+0x80>)
 8000c4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c52:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8000c54:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <LCD_RD_DATA+0x80>)
 8000c56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c5a:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <LCD_RD_DATA+0x80>)
 8000c5e:	2240      	movs	r2, #64	; 0x40
 8000c60:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 8000c62:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <LCD_RD_DATA+0x84>)
 8000c64:	889b      	ldrh	r3, [r3, #4]
 8000c66:	f648 1289 	movw	r2, #35209	; 0x8989
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d102      	bne.n	8000c74 <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 8000c6e:	2001      	movs	r0, #1
 8000c70:	f006 ffa8 	bl	8007bc4 <HAL_Delay>
	t = DATAIN
 8000c74:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <LCD_RD_DATA+0x7c>)
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <LCD_RD_DATA+0x80>)
 8000c7c:	2240      	movs	r2, #64	; 0x40
 8000c7e:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000c80:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <LCD_RD_DATA+0x80>)
 8000c82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c86:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 8000c88:	4b08      	ldr	r3, [pc, #32]	; (8000cac <LCD_RD_DATA+0x7c>)
 8000c8a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000c8e:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <LCD_RD_DATA+0x7c>)
 8000c92:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000c96:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <LCD_RD_DATA+0x7c>)
 8000c9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c9e:	60da      	str	r2, [r3, #12]
	return t;
 8000ca0:	88fb      	ldrh	r3, [r7, #6]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40010c00 	.word	0x40010c00
 8000cb0:	40011000 	.word	0x40011000
 8000cb4:	20005a88 	.word	0x20005a88

08000cb8 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	460a      	mov	r2, r1
 8000cc2:	80fb      	strh	r3, [r7, #6]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8000cc8:	88fb      	ldrh	r3, [r7, #6]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff ff68 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <LCD_WriteReg+0x4c>)
 8000cd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cd6:	611a      	str	r2, [r3, #16]
 8000cd8:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <LCD_WriteReg+0x4c>)
 8000cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cde:	615a      	str	r2, [r3, #20]
 8000ce0:	4a09      	ldr	r2, [pc, #36]	; (8000d08 <LCD_WriteReg+0x50>)
 8000ce2:	88bb      	ldrh	r3, [r7, #4]
 8000ce4:	60d3      	str	r3, [r2, #12]
 8000ce6:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <LCD_WriteReg+0x4c>)
 8000ce8:	2280      	movs	r2, #128	; 0x80
 8000cea:	615a      	str	r2, [r3, #20]
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <LCD_WriteReg+0x4c>)
 8000cee:	2280      	movs	r2, #128	; 0x80
 8000cf0:	611a      	str	r2, [r3, #16]
 8000cf2:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <LCD_WriteReg+0x4c>)
 8000cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cf8:	611a      	str	r2, [r3, #16]
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40011000 	.word	0x40011000
 8000d08:	40010c00 	.word	0x40010c00

08000d0c <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 8000d16:	88fb      	ldrh	r3, [r7, #6]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ff41 	bl	8000ba0 <LCD_WR_REG>
	return LCD_RD_DATA();
 8000d1e:	f7ff ff87 	bl	8000c30 <LCD_RD_DATA>
 8000d22:	4603      	mov	r3, r0
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <LCD_WriteRAM_Prepare+0x14>)
 8000d32:	891b      	ldrh	r3, [r3, #8]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff33 	bl	8000ba0 <LCD_WR_REG>
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20005a88 	.word	0x20005a88

08000d44 <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	460a      	mov	r2, r1
 8000d4e:	80fb      	strh	r3, [r7, #6]
 8000d50:	4613      	mov	r3, r2
 8000d52:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8000d54:	4b73      	ldr	r3, [pc, #460]	; (8000f24 <LCD_SetCursor+0x1e0>)
 8000d56:	889b      	ldrh	r3, [r3, #4]
 8000d58:	f249 3241 	movw	r2, #37697	; 0x9341
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d005      	beq.n	8000d6c <LCD_SetCursor+0x28>
 8000d60:	4b70      	ldr	r3, [pc, #448]	; (8000f24 <LCD_SetCursor+0x1e0>)
 8000d62:	889b      	ldrh	r3, [r3, #4]
 8000d64:	f245 3210 	movw	r2, #21264	; 0x5310
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d164      	bne.n	8000e36 <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8000d6c:	4b6d      	ldr	r3, [pc, #436]	; (8000f24 <LCD_SetCursor+0x1e0>)
 8000d6e:	895b      	ldrh	r3, [r3, #10]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff15 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000d76:	4b6c      	ldr	r3, [pc, #432]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000d78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d7c:	611a      	str	r2, [r3, #16]
 8000d7e:	4b6a      	ldr	r3, [pc, #424]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d84:	615a      	str	r2, [r3, #20]
 8000d86:	88fb      	ldrh	r3, [r7, #6]
 8000d88:	0a1b      	lsrs	r3, r3, #8
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	4b67      	ldr	r3, [pc, #412]	; (8000f2c <LCD_SetCursor+0x1e8>)
 8000d8e:	60da      	str	r2, [r3, #12]
 8000d90:	4b65      	ldr	r3, [pc, #404]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000d92:	2280      	movs	r2, #128	; 0x80
 8000d94:	615a      	str	r2, [r3, #20]
 8000d96:	4b64      	ldr	r3, [pc, #400]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000d98:	2280      	movs	r2, #128	; 0x80
 8000d9a:	611a      	str	r2, [r3, #16]
 8000d9c:	4b62      	ldr	r3, [pc, #392]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000da2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000da4:	4b60      	ldr	r3, [pc, #384]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000da6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000daa:	611a      	str	r2, [r3, #16]
 8000dac:	4b5e      	ldr	r3, [pc, #376]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000db2:	615a      	str	r2, [r3, #20]
 8000db4:	88fb      	ldrh	r3, [r7, #6]
 8000db6:	4a5d      	ldr	r2, [pc, #372]	; (8000f2c <LCD_SetCursor+0x1e8>)
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	60d3      	str	r3, [r2, #12]
 8000dbc:	4b5a      	ldr	r3, [pc, #360]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000dbe:	2280      	movs	r2, #128	; 0x80
 8000dc0:	615a      	str	r2, [r3, #20]
 8000dc2:	4b59      	ldr	r3, [pc, #356]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000dc4:	2280      	movs	r2, #128	; 0x80
 8000dc6:	611a      	str	r2, [r3, #16]
 8000dc8:	4b57      	ldr	r3, [pc, #348]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000dca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dce:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000dd0:	4b54      	ldr	r3, [pc, #336]	; (8000f24 <LCD_SetCursor+0x1e0>)
 8000dd2:	899b      	ldrh	r3, [r3, #12]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fee3 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000dda:	4b53      	ldr	r3, [pc, #332]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000ddc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000de0:	611a      	str	r2, [r3, #16]
 8000de2:	4b51      	ldr	r3, [pc, #324]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000de4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000de8:	615a      	str	r2, [r3, #20]
 8000dea:	88bb      	ldrh	r3, [r7, #4]
 8000dec:	0a1b      	lsrs	r3, r3, #8
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	4b4e      	ldr	r3, [pc, #312]	; (8000f2c <LCD_SetCursor+0x1e8>)
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	4b4c      	ldr	r3, [pc, #304]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000df6:	2280      	movs	r2, #128	; 0x80
 8000df8:	615a      	str	r2, [r3, #20]
 8000dfa:	4b4b      	ldr	r3, [pc, #300]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000dfc:	2280      	movs	r2, #128	; 0x80
 8000dfe:	611a      	str	r2, [r3, #16]
 8000e00:	4b49      	ldr	r3, [pc, #292]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e06:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000e08:	4b47      	ldr	r3, [pc, #284]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e0e:	611a      	str	r2, [r3, #16]
 8000e10:	4b45      	ldr	r3, [pc, #276]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e16:	615a      	str	r2, [r3, #20]
 8000e18:	88bb      	ldrh	r3, [r7, #4]
 8000e1a:	4a44      	ldr	r2, [pc, #272]	; (8000f2c <LCD_SetCursor+0x1e8>)
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	60d3      	str	r3, [r2, #12]
 8000e20:	4b41      	ldr	r3, [pc, #260]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e22:	2280      	movs	r2, #128	; 0x80
 8000e24:	615a      	str	r2, [r3, #20]
 8000e26:	4b40      	ldr	r3, [pc, #256]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e28:	2280      	movs	r2, #128	; 0x80
 8000e2a:	611a      	str	r2, [r3, #16]
 8000e2c:	4b3e      	ldr	r3, [pc, #248]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e32:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8000e34:	e248      	b.n	80012c8 <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8000e36:	4b3b      	ldr	r3, [pc, #236]	; (8000f24 <LCD_SetCursor+0x1e0>)
 8000e38:	889b      	ldrh	r3, [r3, #4]
 8000e3a:	f646 0204 	movw	r2, #26628	; 0x6804
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d176      	bne.n	8000f30 <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 8000e42:	4b38      	ldr	r3, [pc, #224]	; (8000f24 <LCD_SetCursor+0x1e0>)
 8000e44:	799b      	ldrb	r3, [r3, #6]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d106      	bne.n	8000e58 <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8000e4a:	4b36      	ldr	r3, [pc, #216]	; (8000f24 <LCD_SetCursor+0x1e0>)
 8000e4c:	881a      	ldrh	r2, [r3, #0]
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	3b01      	subs	r3, #1
 8000e56:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8000e58:	4b32      	ldr	r3, [pc, #200]	; (8000f24 <LCD_SetCursor+0x1e0>)
 8000e5a:	895b      	ldrh	r3, [r3, #10]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fe9f 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8000e62:	4b31      	ldr	r3, [pc, #196]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e68:	611a      	str	r2, [r3, #16]
 8000e6a:	4b2f      	ldr	r3, [pc, #188]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e70:	615a      	str	r2, [r3, #20]
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	4b2c      	ldr	r3, [pc, #176]	; (8000f2c <LCD_SetCursor+0x1e8>)
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	4b2a      	ldr	r3, [pc, #168]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e7e:	2280      	movs	r2, #128	; 0x80
 8000e80:	615a      	str	r2, [r3, #20]
 8000e82:	4b29      	ldr	r3, [pc, #164]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e84:	2280      	movs	r2, #128	; 0x80
 8000e86:	611a      	str	r2, [r3, #16]
 8000e88:	4b27      	ldr	r3, [pc, #156]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e8e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8000e90:	4b25      	ldr	r3, [pc, #148]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e96:	611a      	str	r2, [r3, #16]
 8000e98:	4b23      	ldr	r3, [pc, #140]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e9e:	615a      	str	r2, [r3, #20]
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	4a22      	ldr	r2, [pc, #136]	; (8000f2c <LCD_SetCursor+0x1e8>)
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	60d3      	str	r3, [r2, #12]
 8000ea8:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000eaa:	2280      	movs	r2, #128	; 0x80
 8000eac:	615a      	str	r2, [r3, #20]
 8000eae:	4b1e      	ldr	r3, [pc, #120]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000eb0:	2280      	movs	r2, #128	; 0x80
 8000eb2:	611a      	str	r2, [r3, #16]
 8000eb4:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000eb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eba:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8000ebc:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <LCD_SetCursor+0x1e0>)
 8000ebe:	899b      	ldrh	r3, [r3, #12]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fe6d 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8000ec6:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000ec8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ecc:	611a      	str	r2, [r3, #16]
 8000ece:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ed4:	615a      	str	r2, [r3, #20]
 8000ed6:	88bb      	ldrh	r3, [r7, #4]
 8000ed8:	0a1b      	lsrs	r3, r3, #8
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <LCD_SetCursor+0x1e8>)
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000ee2:	2280      	movs	r2, #128	; 0x80
 8000ee4:	615a      	str	r2, [r3, #20]
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000ee8:	2280      	movs	r2, #128	; 0x80
 8000eea:	611a      	str	r2, [r3, #16]
 8000eec:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000eee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000ef6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000efa:	611a      	str	r2, [r3, #16]
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000efe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f02:	615a      	str	r2, [r3, #20]
 8000f04:	88bb      	ldrh	r3, [r7, #4]
 8000f06:	4a09      	ldr	r2, [pc, #36]	; (8000f2c <LCD_SetCursor+0x1e8>)
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	60d3      	str	r3, [r2, #12]
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000f0e:	2280      	movs	r2, #128	; 0x80
 8000f10:	615a      	str	r2, [r3, #20]
 8000f12:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000f14:	2280      	movs	r2, #128	; 0x80
 8000f16:	611a      	str	r2, [r3, #16]
 8000f18:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <LCD_SetCursor+0x1e4>)
 8000f1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f1e:	611a      	str	r2, [r3, #16]
}
 8000f20:	e1d2      	b.n	80012c8 <LCD_SetCursor+0x584>
 8000f22:	bf00      	nop
 8000f24:	20005a88 	.word	0x20005a88
 8000f28:	40011000 	.word	0x40011000
 8000f2c:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8000f30:	4b99      	ldr	r3, [pc, #612]	; (8001198 <LCD_SetCursor+0x454>)
 8000f32:	889b      	ldrh	r3, [r3, #4]
 8000f34:	f641 1263 	movw	r2, #6499	; 0x1963
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	f040 8133 	bne.w	80011a4 <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 8000f3e:	4b96      	ldr	r3, [pc, #600]	; (8001198 <LCD_SetCursor+0x454>)
 8000f40:	799b      	ldrb	r3, [r3, #6]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d163      	bne.n	800100e <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8000f46:	4b94      	ldr	r3, [pc, #592]	; (8001198 <LCD_SetCursor+0x454>)
 8000f48:	881a      	ldrh	r2, [r3, #0]
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	3b01      	subs	r3, #1
 8000f52:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8000f54:	4b90      	ldr	r3, [pc, #576]	; (8001198 <LCD_SetCursor+0x454>)
 8000f56:	895b      	ldrh	r3, [r3, #10]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fe21 	bl	8000ba0 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8000f5e:	4b8f      	ldr	r3, [pc, #572]	; (800119c <LCD_SetCursor+0x458>)
 8000f60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f64:	611a      	str	r2, [r3, #16]
 8000f66:	4b8d      	ldr	r3, [pc, #564]	; (800119c <LCD_SetCursor+0x458>)
 8000f68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f6c:	615a      	str	r2, [r3, #20]
 8000f6e:	4b8c      	ldr	r3, [pc, #560]	; (80011a0 <LCD_SetCursor+0x45c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	60da      	str	r2, [r3, #12]
 8000f74:	4b89      	ldr	r3, [pc, #548]	; (800119c <LCD_SetCursor+0x458>)
 8000f76:	2280      	movs	r2, #128	; 0x80
 8000f78:	615a      	str	r2, [r3, #20]
 8000f7a:	4b88      	ldr	r3, [pc, #544]	; (800119c <LCD_SetCursor+0x458>)
 8000f7c:	2280      	movs	r2, #128	; 0x80
 8000f7e:	611a      	str	r2, [r3, #16]
 8000f80:	4b86      	ldr	r3, [pc, #536]	; (800119c <LCD_SetCursor+0x458>)
 8000f82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f86:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8000f88:	4b84      	ldr	r3, [pc, #528]	; (800119c <LCD_SetCursor+0x458>)
 8000f8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f8e:	611a      	str	r2, [r3, #16]
 8000f90:	4b82      	ldr	r3, [pc, #520]	; (800119c <LCD_SetCursor+0x458>)
 8000f92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f96:	615a      	str	r2, [r3, #20]
 8000f98:	4b81      	ldr	r3, [pc, #516]	; (80011a0 <LCD_SetCursor+0x45c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	4b7f      	ldr	r3, [pc, #508]	; (800119c <LCD_SetCursor+0x458>)
 8000fa0:	2280      	movs	r2, #128	; 0x80
 8000fa2:	615a      	str	r2, [r3, #20]
 8000fa4:	4b7d      	ldr	r3, [pc, #500]	; (800119c <LCD_SetCursor+0x458>)
 8000fa6:	2280      	movs	r2, #128	; 0x80
 8000fa8:	611a      	str	r2, [r3, #16]
 8000faa:	4b7c      	ldr	r3, [pc, #496]	; (800119c <LCD_SetCursor+0x458>)
 8000fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fb0:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8000fb2:	4b7a      	ldr	r3, [pc, #488]	; (800119c <LCD_SetCursor+0x458>)
 8000fb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fb8:	611a      	str	r2, [r3, #16]
 8000fba:	4b78      	ldr	r3, [pc, #480]	; (800119c <LCD_SetCursor+0x458>)
 8000fbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fc0:	615a      	str	r2, [r3, #20]
 8000fc2:	88fb      	ldrh	r3, [r7, #6]
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	4b75      	ldr	r3, [pc, #468]	; (80011a0 <LCD_SetCursor+0x45c>)
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	4b73      	ldr	r3, [pc, #460]	; (800119c <LCD_SetCursor+0x458>)
 8000fce:	2280      	movs	r2, #128	; 0x80
 8000fd0:	615a      	str	r2, [r3, #20]
 8000fd2:	4b72      	ldr	r3, [pc, #456]	; (800119c <LCD_SetCursor+0x458>)
 8000fd4:	2280      	movs	r2, #128	; 0x80
 8000fd6:	611a      	str	r2, [r3, #16]
 8000fd8:	4b70      	ldr	r3, [pc, #448]	; (800119c <LCD_SetCursor+0x458>)
 8000fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fde:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8000fe0:	4b6e      	ldr	r3, [pc, #440]	; (800119c <LCD_SetCursor+0x458>)
 8000fe2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fe6:	611a      	str	r2, [r3, #16]
 8000fe8:	4b6c      	ldr	r3, [pc, #432]	; (800119c <LCD_SetCursor+0x458>)
 8000fea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fee:	615a      	str	r2, [r3, #20]
 8000ff0:	88fb      	ldrh	r3, [r7, #6]
 8000ff2:	4a6b      	ldr	r2, [pc, #428]	; (80011a0 <LCD_SetCursor+0x45c>)
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	60d3      	str	r3, [r2, #12]
 8000ff8:	4b68      	ldr	r3, [pc, #416]	; (800119c <LCD_SetCursor+0x458>)
 8000ffa:	2280      	movs	r2, #128	; 0x80
 8000ffc:	615a      	str	r2, [r3, #20]
 8000ffe:	4b67      	ldr	r3, [pc, #412]	; (800119c <LCD_SetCursor+0x458>)
 8001000:	2280      	movs	r2, #128	; 0x80
 8001002:	611a      	str	r2, [r3, #16]
 8001004:	4b65      	ldr	r3, [pc, #404]	; (800119c <LCD_SetCursor+0x458>)
 8001006:	f44f 7200 	mov.w	r2, #512	; 0x200
 800100a:	611a      	str	r2, [r3, #16]
 800100c:	e061      	b.n	80010d2 <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 800100e:	4b62      	ldr	r3, [pc, #392]	; (8001198 <LCD_SetCursor+0x454>)
 8001010:	895b      	ldrh	r3, [r3, #10]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fdc4 	bl	8000ba0 <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 8001018:	4b60      	ldr	r3, [pc, #384]	; (800119c <LCD_SetCursor+0x458>)
 800101a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800101e:	611a      	str	r2, [r3, #16]
 8001020:	4b5e      	ldr	r3, [pc, #376]	; (800119c <LCD_SetCursor+0x458>)
 8001022:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001026:	615a      	str	r2, [r3, #20]
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	0a1b      	lsrs	r3, r3, #8
 800102c:	b29a      	uxth	r2, r3
 800102e:	4b5c      	ldr	r3, [pc, #368]	; (80011a0 <LCD_SetCursor+0x45c>)
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	4b5a      	ldr	r3, [pc, #360]	; (800119c <LCD_SetCursor+0x458>)
 8001034:	2280      	movs	r2, #128	; 0x80
 8001036:	615a      	str	r2, [r3, #20]
 8001038:	4b58      	ldr	r3, [pc, #352]	; (800119c <LCD_SetCursor+0x458>)
 800103a:	2280      	movs	r2, #128	; 0x80
 800103c:	611a      	str	r2, [r3, #16]
 800103e:	4b57      	ldr	r3, [pc, #348]	; (800119c <LCD_SetCursor+0x458>)
 8001040:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001044:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8001046:	4b55      	ldr	r3, [pc, #340]	; (800119c <LCD_SetCursor+0x458>)
 8001048:	f44f 7280 	mov.w	r2, #256	; 0x100
 800104c:	611a      	str	r2, [r3, #16]
 800104e:	4b53      	ldr	r3, [pc, #332]	; (800119c <LCD_SetCursor+0x458>)
 8001050:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001054:	615a      	str	r2, [r3, #20]
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	4a51      	ldr	r2, [pc, #324]	; (80011a0 <LCD_SetCursor+0x45c>)
 800105a:	b2db      	uxtb	r3, r3
 800105c:	60d3      	str	r3, [r2, #12]
 800105e:	4b4f      	ldr	r3, [pc, #316]	; (800119c <LCD_SetCursor+0x458>)
 8001060:	2280      	movs	r2, #128	; 0x80
 8001062:	615a      	str	r2, [r3, #20]
 8001064:	4b4d      	ldr	r3, [pc, #308]	; (800119c <LCD_SetCursor+0x458>)
 8001066:	2280      	movs	r2, #128	; 0x80
 8001068:	611a      	str	r2, [r3, #16]
 800106a:	4b4c      	ldr	r3, [pc, #304]	; (800119c <LCD_SetCursor+0x458>)
 800106c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001070:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8001072:	4b4a      	ldr	r3, [pc, #296]	; (800119c <LCD_SetCursor+0x458>)
 8001074:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001078:	611a      	str	r2, [r3, #16]
 800107a:	4b48      	ldr	r3, [pc, #288]	; (800119c <LCD_SetCursor+0x458>)
 800107c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001080:	615a      	str	r2, [r3, #20]
 8001082:	4b45      	ldr	r3, [pc, #276]	; (8001198 <LCD_SetCursor+0x454>)
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	3b01      	subs	r3, #1
 8001088:	121a      	asrs	r2, r3, #8
 800108a:	4b45      	ldr	r3, [pc, #276]	; (80011a0 <LCD_SetCursor+0x45c>)
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	4b43      	ldr	r3, [pc, #268]	; (800119c <LCD_SetCursor+0x458>)
 8001090:	2280      	movs	r2, #128	; 0x80
 8001092:	615a      	str	r2, [r3, #20]
 8001094:	4b41      	ldr	r3, [pc, #260]	; (800119c <LCD_SetCursor+0x458>)
 8001096:	2280      	movs	r2, #128	; 0x80
 8001098:	611a      	str	r2, [r3, #16]
 800109a:	4b40      	ldr	r3, [pc, #256]	; (800119c <LCD_SetCursor+0x458>)
 800109c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010a0:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 80010a2:	4b3e      	ldr	r3, [pc, #248]	; (800119c <LCD_SetCursor+0x458>)
 80010a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010a8:	611a      	str	r2, [r3, #16]
 80010aa:	4b3c      	ldr	r3, [pc, #240]	; (800119c <LCD_SetCursor+0x458>)
 80010ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010b0:	615a      	str	r2, [r3, #20]
 80010b2:	4b39      	ldr	r3, [pc, #228]	; (8001198 <LCD_SetCursor+0x454>)
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	4a39      	ldr	r2, [pc, #228]	; (80011a0 <LCD_SetCursor+0x45c>)
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	60d3      	str	r3, [r2, #12]
 80010be:	4b37      	ldr	r3, [pc, #220]	; (800119c <LCD_SetCursor+0x458>)
 80010c0:	2280      	movs	r2, #128	; 0x80
 80010c2:	615a      	str	r2, [r3, #20]
 80010c4:	4b35      	ldr	r3, [pc, #212]	; (800119c <LCD_SetCursor+0x458>)
 80010c6:	2280      	movs	r2, #128	; 0x80
 80010c8:	611a      	str	r2, [r3, #16]
 80010ca:	4b34      	ldr	r3, [pc, #208]	; (800119c <LCD_SetCursor+0x458>)
 80010cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010d0:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80010d2:	4b31      	ldr	r3, [pc, #196]	; (8001198 <LCD_SetCursor+0x454>)
 80010d4:	899b      	ldrh	r3, [r3, #12]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fd62 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 80010dc:	4b2f      	ldr	r3, [pc, #188]	; (800119c <LCD_SetCursor+0x458>)
 80010de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010e2:	611a      	str	r2, [r3, #16]
 80010e4:	4b2d      	ldr	r3, [pc, #180]	; (800119c <LCD_SetCursor+0x458>)
 80010e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ea:	615a      	str	r2, [r3, #20]
 80010ec:	88bb      	ldrh	r3, [r7, #4]
 80010ee:	0a1b      	lsrs	r3, r3, #8
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <LCD_SetCursor+0x45c>)
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	4b29      	ldr	r3, [pc, #164]	; (800119c <LCD_SetCursor+0x458>)
 80010f8:	2280      	movs	r2, #128	; 0x80
 80010fa:	615a      	str	r2, [r3, #20]
 80010fc:	4b27      	ldr	r3, [pc, #156]	; (800119c <LCD_SetCursor+0x458>)
 80010fe:	2280      	movs	r2, #128	; 0x80
 8001100:	611a      	str	r2, [r3, #16]
 8001102:	4b26      	ldr	r3, [pc, #152]	; (800119c <LCD_SetCursor+0x458>)
 8001104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001108:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 800110a:	4b24      	ldr	r3, [pc, #144]	; (800119c <LCD_SetCursor+0x458>)
 800110c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001110:	611a      	str	r2, [r3, #16]
 8001112:	4b22      	ldr	r3, [pc, #136]	; (800119c <LCD_SetCursor+0x458>)
 8001114:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001118:	615a      	str	r2, [r3, #20]
 800111a:	88bb      	ldrh	r3, [r7, #4]
 800111c:	4a20      	ldr	r2, [pc, #128]	; (80011a0 <LCD_SetCursor+0x45c>)
 800111e:	b2db      	uxtb	r3, r3
 8001120:	60d3      	str	r3, [r2, #12]
 8001122:	4b1e      	ldr	r3, [pc, #120]	; (800119c <LCD_SetCursor+0x458>)
 8001124:	2280      	movs	r2, #128	; 0x80
 8001126:	615a      	str	r2, [r3, #20]
 8001128:	4b1c      	ldr	r3, [pc, #112]	; (800119c <LCD_SetCursor+0x458>)
 800112a:	2280      	movs	r2, #128	; 0x80
 800112c:	611a      	str	r2, [r3, #16]
 800112e:	4b1b      	ldr	r3, [pc, #108]	; (800119c <LCD_SetCursor+0x458>)
 8001130:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001134:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001136:	4b19      	ldr	r3, [pc, #100]	; (800119c <LCD_SetCursor+0x458>)
 8001138:	f44f 7280 	mov.w	r2, #256	; 0x100
 800113c:	611a      	str	r2, [r3, #16]
 800113e:	4b17      	ldr	r3, [pc, #92]	; (800119c <LCD_SetCursor+0x458>)
 8001140:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001144:	615a      	str	r2, [r3, #20]
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <LCD_SetCursor+0x454>)
 8001148:	885b      	ldrh	r3, [r3, #2]
 800114a:	3b01      	subs	r3, #1
 800114c:	121a      	asrs	r2, r3, #8
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <LCD_SetCursor+0x45c>)
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	4b12      	ldr	r3, [pc, #72]	; (800119c <LCD_SetCursor+0x458>)
 8001154:	2280      	movs	r2, #128	; 0x80
 8001156:	615a      	str	r2, [r3, #20]
 8001158:	4b10      	ldr	r3, [pc, #64]	; (800119c <LCD_SetCursor+0x458>)
 800115a:	2280      	movs	r2, #128	; 0x80
 800115c:	611a      	str	r2, [r3, #16]
 800115e:	4b0f      	ldr	r3, [pc, #60]	; (800119c <LCD_SetCursor+0x458>)
 8001160:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001164:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001166:	4b0d      	ldr	r3, [pc, #52]	; (800119c <LCD_SetCursor+0x458>)
 8001168:	f44f 7280 	mov.w	r2, #256	; 0x100
 800116c:	611a      	str	r2, [r3, #16]
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <LCD_SetCursor+0x458>)
 8001170:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001174:	615a      	str	r2, [r3, #20]
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <LCD_SetCursor+0x454>)
 8001178:	885b      	ldrh	r3, [r3, #2]
 800117a:	3b01      	subs	r3, #1
 800117c:	4a08      	ldr	r2, [pc, #32]	; (80011a0 <LCD_SetCursor+0x45c>)
 800117e:	b2db      	uxtb	r3, r3
 8001180:	60d3      	str	r3, [r2, #12]
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <LCD_SetCursor+0x458>)
 8001184:	2280      	movs	r2, #128	; 0x80
 8001186:	615a      	str	r2, [r3, #20]
 8001188:	4b04      	ldr	r3, [pc, #16]	; (800119c <LCD_SetCursor+0x458>)
 800118a:	2280      	movs	r2, #128	; 0x80
 800118c:	611a      	str	r2, [r3, #16]
 800118e:	4b03      	ldr	r3, [pc, #12]	; (800119c <LCD_SetCursor+0x458>)
 8001190:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001194:	611a      	str	r2, [r3, #16]
}
 8001196:	e097      	b.n	80012c8 <LCD_SetCursor+0x584>
 8001198:	20005a88 	.word	0x20005a88
 800119c:	40011000 	.word	0x40011000
 80011a0:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 80011a4:	4b4a      	ldr	r3, [pc, #296]	; (80012d0 <LCD_SetCursor+0x58c>)
 80011a6:	889b      	ldrh	r3, [r3, #4]
 80011a8:	f245 5210 	movw	r2, #21776	; 0x5510
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d172      	bne.n	8001296 <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 80011b0:	4b47      	ldr	r3, [pc, #284]	; (80012d0 <LCD_SetCursor+0x58c>)
 80011b2:	895b      	ldrh	r3, [r3, #10]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fcf3 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 80011ba:	4b46      	ldr	r3, [pc, #280]	; (80012d4 <LCD_SetCursor+0x590>)
 80011bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011c0:	611a      	str	r2, [r3, #16]
 80011c2:	4b44      	ldr	r3, [pc, #272]	; (80012d4 <LCD_SetCursor+0x590>)
 80011c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c8:	615a      	str	r2, [r3, #20]
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	0a1b      	lsrs	r3, r3, #8
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	4b41      	ldr	r3, [pc, #260]	; (80012d8 <LCD_SetCursor+0x594>)
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	4b3f      	ldr	r3, [pc, #252]	; (80012d4 <LCD_SetCursor+0x590>)
 80011d6:	2280      	movs	r2, #128	; 0x80
 80011d8:	615a      	str	r2, [r3, #20]
 80011da:	4b3e      	ldr	r3, [pc, #248]	; (80012d4 <LCD_SetCursor+0x590>)
 80011dc:	2280      	movs	r2, #128	; 0x80
 80011de:	611a      	str	r2, [r3, #16]
 80011e0:	4b3c      	ldr	r3, [pc, #240]	; (80012d4 <LCD_SetCursor+0x590>)
 80011e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011e6:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 80011e8:	4b39      	ldr	r3, [pc, #228]	; (80012d0 <LCD_SetCursor+0x58c>)
 80011ea:	895b      	ldrh	r3, [r3, #10]
 80011ec:	3301      	adds	r3, #1
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fcd5 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 80011f6:	4b37      	ldr	r3, [pc, #220]	; (80012d4 <LCD_SetCursor+0x590>)
 80011f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011fc:	611a      	str	r2, [r3, #16]
 80011fe:	4b35      	ldr	r3, [pc, #212]	; (80012d4 <LCD_SetCursor+0x590>)
 8001200:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001204:	615a      	str	r2, [r3, #20]
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	4a33      	ldr	r2, [pc, #204]	; (80012d8 <LCD_SetCursor+0x594>)
 800120a:	b2db      	uxtb	r3, r3
 800120c:	60d3      	str	r3, [r2, #12]
 800120e:	4b31      	ldr	r3, [pc, #196]	; (80012d4 <LCD_SetCursor+0x590>)
 8001210:	2280      	movs	r2, #128	; 0x80
 8001212:	615a      	str	r2, [r3, #20]
 8001214:	4b2f      	ldr	r3, [pc, #188]	; (80012d4 <LCD_SetCursor+0x590>)
 8001216:	2280      	movs	r2, #128	; 0x80
 8001218:	611a      	str	r2, [r3, #16]
 800121a:	4b2e      	ldr	r3, [pc, #184]	; (80012d4 <LCD_SetCursor+0x590>)
 800121c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001220:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001222:	4b2b      	ldr	r3, [pc, #172]	; (80012d0 <LCD_SetCursor+0x58c>)
 8001224:	899b      	ldrh	r3, [r3, #12]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fcba 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 800122c:	4b29      	ldr	r3, [pc, #164]	; (80012d4 <LCD_SetCursor+0x590>)
 800122e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001232:	611a      	str	r2, [r3, #16]
 8001234:	4b27      	ldr	r3, [pc, #156]	; (80012d4 <LCD_SetCursor+0x590>)
 8001236:	f44f 7200 	mov.w	r2, #512	; 0x200
 800123a:	615a      	str	r2, [r3, #20]
 800123c:	88bb      	ldrh	r3, [r7, #4]
 800123e:	0a1b      	lsrs	r3, r3, #8
 8001240:	b29a      	uxth	r2, r3
 8001242:	4b25      	ldr	r3, [pc, #148]	; (80012d8 <LCD_SetCursor+0x594>)
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	4b23      	ldr	r3, [pc, #140]	; (80012d4 <LCD_SetCursor+0x590>)
 8001248:	2280      	movs	r2, #128	; 0x80
 800124a:	615a      	str	r2, [r3, #20]
 800124c:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <LCD_SetCursor+0x590>)
 800124e:	2280      	movs	r2, #128	; 0x80
 8001250:	611a      	str	r2, [r3, #16]
 8001252:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <LCD_SetCursor+0x590>)
 8001254:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001258:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <LCD_SetCursor+0x58c>)
 800125c:	899b      	ldrh	r3, [r3, #12]
 800125e:	3301      	adds	r3, #1
 8001260:	b29b      	uxth	r3, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fc9c 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 8001268:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <LCD_SetCursor+0x590>)
 800126a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800126e:	611a      	str	r2, [r3, #16]
 8001270:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <LCD_SetCursor+0x590>)
 8001272:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001276:	615a      	str	r2, [r3, #20]
 8001278:	88bb      	ldrh	r3, [r7, #4]
 800127a:	4a17      	ldr	r2, [pc, #92]	; (80012d8 <LCD_SetCursor+0x594>)
 800127c:	b2db      	uxtb	r3, r3
 800127e:	60d3      	str	r3, [r2, #12]
 8001280:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <LCD_SetCursor+0x590>)
 8001282:	2280      	movs	r2, #128	; 0x80
 8001284:	615a      	str	r2, [r3, #20]
 8001286:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <LCD_SetCursor+0x590>)
 8001288:	2280      	movs	r2, #128	; 0x80
 800128a:	611a      	str	r2, [r3, #16]
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <LCD_SetCursor+0x590>)
 800128e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001292:	611a      	str	r2, [r3, #16]
}
 8001294:	e018      	b.n	80012c8 <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <LCD_SetCursor+0x58c>)
 8001298:	799b      	ldrb	r3, [r3, #6]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d106      	bne.n	80012ac <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <LCD_SetCursor+0x58c>)
 80012a0:	881a      	ldrh	r2, [r3, #0]
 80012a2:	88fb      	ldrh	r3, [r7, #6]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	3b01      	subs	r3, #1
 80012aa:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <LCD_SetCursor+0x58c>)
 80012ae:	895b      	ldrh	r3, [r3, #10]
 80012b0:	88fa      	ldrh	r2, [r7, #6]
 80012b2:	4611      	mov	r1, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fcff 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 80012ba:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <LCD_SetCursor+0x58c>)
 80012bc:	899b      	ldrh	r3, [r3, #12]
 80012be:	88ba      	ldrh	r2, [r7, #4]
 80012c0:	4611      	mov	r1, r2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fcf8 	bl	8000cb8 <LCD_WriteReg>
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20005a88 	.word	0x20005a88
 80012d4:	40011000 	.word	0x40011000
 80012d8:	40010c00 	.word	0x40010c00

080012dc <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 80012ee:	4b78      	ldr	r3, [pc, #480]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 80012f0:	799b      	ldrb	r3, [r3, #6]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d10b      	bne.n	800130e <LCD_Scan_Dir+0x32>
 80012f6:	4b76      	ldr	r3, [pc, #472]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 80012f8:	889b      	ldrh	r3, [r3, #4]
 80012fa:	f646 0204 	movw	r2, #26628	; 0x6804
 80012fe:	4293      	cmp	r3, r2
 8001300:	d005      	beq.n	800130e <LCD_Scan_Dir+0x32>
 8001302:	4b73      	ldr	r3, [pc, #460]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 8001304:	889b      	ldrh	r3, [r3, #4]
 8001306:	f641 1263 	movw	r2, #6499	; 0x1963
 800130a:	4293      	cmp	r3, r2
 800130c:	d109      	bne.n	8001322 <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 800130e:	4b70      	ldr	r3, [pc, #448]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 8001310:	799b      	ldrb	r3, [r3, #6]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d134      	bne.n	8001380 <LCD_Scan_Dir+0xa4>
 8001316:	4b6e      	ldr	r3, [pc, #440]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 8001318:	889b      	ldrh	r3, [r3, #4]
 800131a:	f641 1263 	movw	r2, #6499	; 0x1963
 800131e:	4293      	cmp	r3, r2
 8001320:	d12e      	bne.n	8001380 <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	2b07      	cmp	r3, #7
 8001326:	d82b      	bhi.n	8001380 <LCD_Scan_Dir+0xa4>
 8001328:	a201      	add	r2, pc, #4	; (adr r2, 8001330 <LCD_Scan_Dir+0x54>)
 800132a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132e:	bf00      	nop
 8001330:	08001351 	.word	0x08001351
 8001334:	08001357 	.word	0x08001357
 8001338:	0800135d 	.word	0x0800135d
 800133c:	08001363 	.word	0x08001363
 8001340:	08001369 	.word	0x08001369
 8001344:	0800136f 	.word	0x0800136f
 8001348:	08001375 	.word	0x08001375
 800134c:	0800137b 	.word	0x0800137b
		{
		case 0:
			dir = 6;
 8001350:	2306      	movs	r3, #6
 8001352:	71fb      	strb	r3, [r7, #7]
			break;
 8001354:	e014      	b.n	8001380 <LCD_Scan_Dir+0xa4>
		case 1:
			dir = 7;
 8001356:	2307      	movs	r3, #7
 8001358:	71fb      	strb	r3, [r7, #7]
			break;
 800135a:	e011      	b.n	8001380 <LCD_Scan_Dir+0xa4>
		case 2:
			dir = 4;
 800135c:	2304      	movs	r3, #4
 800135e:	71fb      	strb	r3, [r7, #7]
			break;
 8001360:	e00e      	b.n	8001380 <LCD_Scan_Dir+0xa4>
		case 3:
			dir = 5;
 8001362:	2305      	movs	r3, #5
 8001364:	71fb      	strb	r3, [r7, #7]
			break;
 8001366:	e00b      	b.n	8001380 <LCD_Scan_Dir+0xa4>
		case 4:
			dir = 1;
 8001368:	2301      	movs	r3, #1
 800136a:	71fb      	strb	r3, [r7, #7]
			break;
 800136c:	e008      	b.n	8001380 <LCD_Scan_Dir+0xa4>
		case 5:
			dir = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	71fb      	strb	r3, [r7, #7]
			break;
 8001372:	e005      	b.n	8001380 <LCD_Scan_Dir+0xa4>
		case 6:
			dir = 3;
 8001374:	2303      	movs	r3, #3
 8001376:	71fb      	strb	r3, [r7, #7]
			break;
 8001378:	e002      	b.n	8001380 <LCD_Scan_Dir+0xa4>
		case 7:
			dir = 2;
 800137a:	2302      	movs	r3, #2
 800137c:	71fb      	strb	r3, [r7, #7]
			break;
 800137e:	bf00      	nop
		}
	}
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 8001380:	4b53      	ldr	r3, [pc, #332]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 8001382:	889b      	ldrh	r3, [r3, #4]
 8001384:	f249 3241 	movw	r2, #37697	; 0x9341
 8001388:	4293      	cmp	r3, r2
 800138a:	d018      	beq.n	80013be <LCD_Scan_Dir+0xe2>
 800138c:	4b50      	ldr	r3, [pc, #320]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 800138e:	889b      	ldrh	r3, [r3, #4]
 8001390:	f646 0204 	movw	r2, #26628	; 0x6804
 8001394:	4293      	cmp	r3, r2
 8001396:	d012      	beq.n	80013be <LCD_Scan_Dir+0xe2>
 8001398:	4b4d      	ldr	r3, [pc, #308]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 800139a:	889b      	ldrh	r3, [r3, #4]
 800139c:	f245 3210 	movw	r2, #21264	; 0x5310
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d00c      	beq.n	80013be <LCD_Scan_Dir+0xe2>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 80013a4:	4b4a      	ldr	r3, [pc, #296]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 80013a6:	889b      	ldrh	r3, [r3, #4]
 80013a8:	f245 5210 	movw	r2, #21776	; 0x5510
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d006      	beq.n	80013be <LCD_Scan_Dir+0xe2>
 80013b0:	4b47      	ldr	r3, [pc, #284]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 80013b2:	889b      	ldrh	r3, [r3, #4]
 80013b4:	f641 1263 	movw	r2, #6499	; 0x1963
 80013b8:	4293      	cmp	r3, r2
 80013ba:	f040 8250 	bne.w	800185e <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	2b07      	cmp	r3, #7
 80013c2:	d836      	bhi.n	8001432 <LCD_Scan_Dir+0x156>
 80013c4:	a201      	add	r2, pc, #4	; (adr r2, 80013cc <LCD_Scan_Dir+0xf0>)
 80013c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ca:	bf00      	nop
 80013cc:	08001433 	.word	0x08001433
 80013d0:	080013ed 	.word	0x080013ed
 80013d4:	080013f7 	.word	0x080013f7
 80013d8:	08001401 	.word	0x08001401
 80013dc:	0800140b 	.word	0x0800140b
 80013e0:	08001415 	.word	0x08001415
 80013e4:	0800141f 	.word	0x0800141f
 80013e8:	08001429 	.word	0x08001429
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 80013ec:	89fb      	ldrh	r3, [r7, #14]
 80013ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f2:	81fb      	strh	r3, [r7, #14]
			break;
 80013f4:	e01d      	b.n	8001432 <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 80013f6:	89fb      	ldrh	r3, [r7, #14]
 80013f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013fc:	81fb      	strh	r3, [r7, #14]
			break;
 80013fe:	e018      	b.n	8001432 <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8001400:	89fb      	ldrh	r3, [r7, #14]
 8001402:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001406:	81fb      	strh	r3, [r7, #14]
			break;
 8001408:	e013      	b.n	8001432 <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 800140a:	89fb      	ldrh	r3, [r7, #14]
 800140c:	f043 0320 	orr.w	r3, r3, #32
 8001410:	81fb      	strh	r3, [r7, #14]
			break;
 8001412:	e00e      	b.n	8001432 <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8001414:	89fb      	ldrh	r3, [r7, #14]
 8001416:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800141a:	81fb      	strh	r3, [r7, #14]
			break;
 800141c:	e009      	b.n	8001432 <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 800141e:	89fb      	ldrh	r3, [r7, #14]
 8001420:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001424:	81fb      	strh	r3, [r7, #14]
			break;
 8001426:	e004      	b.n	8001432 <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8001428:	89fb      	ldrh	r3, [r7, #14]
 800142a:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800142e:	81fb      	strh	r3, [r7, #14]
			break;
 8001430:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 8001432:	4b27      	ldr	r3, [pc, #156]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 8001434:	889b      	ldrh	r3, [r3, #4]
 8001436:	f245 5210 	movw	r2, #21776	; 0x5510
 800143a:	4293      	cmp	r3, r2
 800143c:	d103      	bne.n	8001446 <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 800143e:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 8001442:	81bb      	strh	r3, [r7, #12]
 8001444:	e001      	b.n	800144a <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 8001446:	2336      	movs	r3, #54	; 0x36
 8001448:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 800144a:	4b21      	ldr	r3, [pc, #132]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 800144c:	889b      	ldrh	r3, [r3, #4]
 800144e:	f245 3210 	movw	r2, #21264	; 0x5310
 8001452:	4293      	cmp	r3, r2
 8001454:	d00f      	beq.n	8001476 <LCD_Scan_Dir+0x19a>
 8001456:	4b1e      	ldr	r3, [pc, #120]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 8001458:	889b      	ldrh	r3, [r3, #4]
 800145a:	f245 5210 	movw	r2, #21776	; 0x5510
 800145e:	4293      	cmp	r3, r2
 8001460:	d009      	beq.n	8001476 <LCD_Scan_Dir+0x19a>
 8001462:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 8001464:	889b      	ldrh	r3, [r3, #4]
 8001466:	f641 1263 	movw	r2, #6499	; 0x1963
 800146a:	4293      	cmp	r3, r2
 800146c:	d003      	beq.n	8001476 <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 800146e:	89fb      	ldrh	r3, [r7, #14]
 8001470:	f043 0308 	orr.w	r3, r3, #8
 8001474:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 8001476:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 8001478:	889b      	ldrh	r3, [r3, #4]
 800147a:	f646 0204 	movw	r2, #26628	; 0x6804
 800147e:	4293      	cmp	r3, r2
 8001480:	d103      	bne.n	800148a <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 8001482:	89fb      	ldrh	r3, [r7, #14]
 8001484:	f043 0302 	orr.w	r3, r3, #2
 8001488:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 800148a:	89fa      	ldrh	r2, [r7, #14]
 800148c:	89bb      	ldrh	r3, [r7, #12]
 800148e:	4611      	mov	r1, r2
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fc11 	bl	8000cb8 <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 8001498:	889b      	ldrh	r3, [r3, #4]
 800149a:	f641 1263 	movw	r2, #6499	; 0x1963
 800149e:	4293      	cmp	r3, r2
 80014a0:	d028      	beq.n	80014f4 <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 80014a2:	89fb      	ldrh	r3, [r7, #14]
 80014a4:	f003 0320 	and.w	r3, r3, #32
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d013      	beq.n	80014d4 <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 80014ae:	881a      	ldrh	r2, [r3, #0]
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 80014b2:	885b      	ldrh	r3, [r3, #2]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d21d      	bcs.n	80014f4 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 80014be:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 80014c0:	885a      	ldrh	r2, [r3, #2]
 80014c2:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 80014c4:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 80014c6:	4a02      	ldr	r2, [pc, #8]	; (80014d0 <LCD_Scan_Dir+0x1f4>)
 80014c8:	897b      	ldrh	r3, [r7, #10]
 80014ca:	8053      	strh	r3, [r2, #2]
 80014cc:	e012      	b.n	80014f4 <LCD_Scan_Dir+0x218>
 80014ce:	bf00      	nop
 80014d0:	20005a88 	.word	0x20005a88
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 80014d4:	4b7f      	ldr	r3, [pc, #508]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 80014d6:	881a      	ldrh	r2, [r3, #0]
 80014d8:	4b7e      	ldr	r3, [pc, #504]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 80014da:	885b      	ldrh	r3, [r3, #2]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d909      	bls.n	80014f4 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 80014e0:	4b7c      	ldr	r3, [pc, #496]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 80014e6:	4b7b      	ldr	r3, [pc, #492]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 80014e8:	885a      	ldrh	r2, [r3, #2]
 80014ea:	4b7a      	ldr	r3, [pc, #488]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 80014ec:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 80014ee:	4a79      	ldr	r2, [pc, #484]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 80014f0:	897b      	ldrh	r3, [r7, #10]
 80014f2:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 80014f4:	4b77      	ldr	r3, [pc, #476]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 80014f6:	889b      	ldrh	r3, [r3, #4]
 80014f8:	f245 5210 	movw	r2, #21776	; 0x5510
 80014fc:	4293      	cmp	r3, r2
 80014fe:	f040 80ef 	bne.w	80016e0 <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 8001502:	4b74      	ldr	r3, [pc, #464]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 8001504:	895b      	ldrh	r3, [r3, #10]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fb4a 	bl	8000ba0 <LCD_WR_REG>
			LCD_WR_DATA(0);
 800150c:	4b72      	ldr	r3, [pc, #456]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 800150e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001512:	611a      	str	r2, [r3, #16]
 8001514:	4b70      	ldr	r3, [pc, #448]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800151a:	615a      	str	r2, [r3, #20]
 800151c:	4b6f      	ldr	r3, [pc, #444]	; (80016dc <LCD_Scan_Dir+0x400>)
 800151e:	2200      	movs	r2, #0
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	4b6d      	ldr	r3, [pc, #436]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001524:	2280      	movs	r2, #128	; 0x80
 8001526:	615a      	str	r2, [r3, #20]
 8001528:	4b6b      	ldr	r3, [pc, #428]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 800152a:	2280      	movs	r2, #128	; 0x80
 800152c:	611a      	str	r2, [r3, #16]
 800152e:	4b6a      	ldr	r3, [pc, #424]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001530:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001534:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 8001536:	4b67      	ldr	r3, [pc, #412]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 8001538:	895b      	ldrh	r3, [r3, #10]
 800153a:	3301      	adds	r3, #1
 800153c:	b29b      	uxth	r3, r3
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fb2e 	bl	8000ba0 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001544:	4b64      	ldr	r3, [pc, #400]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001546:	f44f 7280 	mov.w	r2, #256	; 0x100
 800154a:	611a      	str	r2, [r3, #16]
 800154c:	4b62      	ldr	r3, [pc, #392]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 800154e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001552:	615a      	str	r2, [r3, #20]
 8001554:	4b61      	ldr	r3, [pc, #388]	; (80016dc <LCD_Scan_Dir+0x400>)
 8001556:	2200      	movs	r2, #0
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	4b5f      	ldr	r3, [pc, #380]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 800155c:	2280      	movs	r2, #128	; 0x80
 800155e:	615a      	str	r2, [r3, #20]
 8001560:	4b5d      	ldr	r3, [pc, #372]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001562:	2280      	movs	r2, #128	; 0x80
 8001564:	611a      	str	r2, [r3, #16]
 8001566:	4b5c      	ldr	r3, [pc, #368]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001568:	f44f 7200 	mov.w	r2, #512	; 0x200
 800156c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 800156e:	4b59      	ldr	r3, [pc, #356]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 8001570:	895b      	ldrh	r3, [r3, #10]
 8001572:	3302      	adds	r3, #2
 8001574:	b29b      	uxth	r3, r3
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fb12 	bl	8000ba0 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 800157c:	4b56      	ldr	r3, [pc, #344]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 800157e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001582:	611a      	str	r2, [r3, #16]
 8001584:	4b54      	ldr	r3, [pc, #336]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800158a:	615a      	str	r2, [r3, #20]
 800158c:	4b51      	ldr	r3, [pc, #324]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	3b01      	subs	r3, #1
 8001592:	121a      	asrs	r2, r3, #8
 8001594:	4b51      	ldr	r3, [pc, #324]	; (80016dc <LCD_Scan_Dir+0x400>)
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	4b4f      	ldr	r3, [pc, #316]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 800159a:	2280      	movs	r2, #128	; 0x80
 800159c:	615a      	str	r2, [r3, #20]
 800159e:	4b4e      	ldr	r3, [pc, #312]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80015a0:	2280      	movs	r2, #128	; 0x80
 80015a2:	611a      	str	r2, [r3, #16]
 80015a4:	4b4c      	ldr	r3, [pc, #304]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80015a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015aa:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 80015ac:	4b49      	ldr	r3, [pc, #292]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 80015ae:	895b      	ldrh	r3, [r3, #10]
 80015b0:	3303      	adds	r3, #3
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff faf3 	bl	8000ba0 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 80015ba:	4b47      	ldr	r3, [pc, #284]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80015bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015c0:	611a      	str	r2, [r3, #16]
 80015c2:	4b45      	ldr	r3, [pc, #276]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80015c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015c8:	615a      	str	r2, [r3, #20]
 80015ca:	4b42      	ldr	r3, [pc, #264]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	4a42      	ldr	r2, [pc, #264]	; (80016dc <LCD_Scan_Dir+0x400>)
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	60d3      	str	r3, [r2, #12]
 80015d6:	4b40      	ldr	r3, [pc, #256]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80015d8:	2280      	movs	r2, #128	; 0x80
 80015da:	615a      	str	r2, [r3, #20]
 80015dc:	4b3e      	ldr	r3, [pc, #248]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80015de:	2280      	movs	r2, #128	; 0x80
 80015e0:	611a      	str	r2, [r3, #16]
 80015e2:	4b3d      	ldr	r3, [pc, #244]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80015e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e8:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 80015ea:	4b3a      	ldr	r3, [pc, #232]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 80015ec:	899b      	ldrh	r3, [r3, #12]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fad6 	bl	8000ba0 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80015f4:	4b38      	ldr	r3, [pc, #224]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80015f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015fa:	611a      	str	r2, [r3, #16]
 80015fc:	4b36      	ldr	r3, [pc, #216]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80015fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001602:	615a      	str	r2, [r3, #20]
 8001604:	4b35      	ldr	r3, [pc, #212]	; (80016dc <LCD_Scan_Dir+0x400>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	4b33      	ldr	r3, [pc, #204]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 800160c:	2280      	movs	r2, #128	; 0x80
 800160e:	615a      	str	r2, [r3, #20]
 8001610:	4b31      	ldr	r3, [pc, #196]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001612:	2280      	movs	r2, #128	; 0x80
 8001614:	611a      	str	r2, [r3, #16]
 8001616:	4b30      	ldr	r3, [pc, #192]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001618:	f44f 7200 	mov.w	r2, #512	; 0x200
 800161c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 800161e:	4b2d      	ldr	r3, [pc, #180]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 8001620:	899b      	ldrh	r3, [r3, #12]
 8001622:	3301      	adds	r3, #1
 8001624:	b29b      	uxth	r3, r3
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff faba 	bl	8000ba0 <LCD_WR_REG>
			LCD_WR_DATA(0);
 800162c:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 800162e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001632:	611a      	str	r2, [r3, #16]
 8001634:	4b28      	ldr	r3, [pc, #160]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800163a:	615a      	str	r2, [r3, #20]
 800163c:	4b27      	ldr	r3, [pc, #156]	; (80016dc <LCD_Scan_Dir+0x400>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001644:	2280      	movs	r2, #128	; 0x80
 8001646:	615a      	str	r2, [r3, #20]
 8001648:	4b23      	ldr	r3, [pc, #140]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 800164a:	2280      	movs	r2, #128	; 0x80
 800164c:	611a      	str	r2, [r3, #16]
 800164e:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001654:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 8001656:	4b1f      	ldr	r3, [pc, #124]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 8001658:	899b      	ldrh	r3, [r3, #12]
 800165a:	3302      	adds	r3, #2
 800165c:	b29b      	uxth	r3, r3
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fa9e 	bl	8000ba0 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001664:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001666:	f44f 7280 	mov.w	r2, #256	; 0x100
 800166a:	611a      	str	r2, [r3, #16]
 800166c:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 800166e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001672:	615a      	str	r2, [r3, #20]
 8001674:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 8001676:	885b      	ldrh	r3, [r3, #2]
 8001678:	3b01      	subs	r3, #1
 800167a:	121a      	asrs	r2, r3, #8
 800167c:	4b17      	ldr	r3, [pc, #92]	; (80016dc <LCD_Scan_Dir+0x400>)
 800167e:	60da      	str	r2, [r3, #12]
 8001680:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001682:	2280      	movs	r2, #128	; 0x80
 8001684:	615a      	str	r2, [r3, #20]
 8001686:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 8001688:	2280      	movs	r2, #128	; 0x80
 800168a:	611a      	str	r2, [r3, #16]
 800168c:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 800168e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001692:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 8001696:	899b      	ldrh	r3, [r3, #12]
 8001698:	3303      	adds	r3, #3
 800169a:	b29b      	uxth	r3, r3
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fa7f 	bl	8000ba0 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 80016a2:	4b0d      	ldr	r3, [pc, #52]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80016a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016a8:	611a      	str	r2, [r3, #16]
 80016aa:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80016ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016b0:	615a      	str	r2, [r3, #20]
 80016b2:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <LCD_Scan_Dir+0x3f8>)
 80016b4:	885b      	ldrh	r3, [r3, #2]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	4a08      	ldr	r2, [pc, #32]	; (80016dc <LCD_Scan_Dir+0x400>)
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	60d3      	str	r3, [r2, #12]
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80016c0:	2280      	movs	r2, #128	; 0x80
 80016c2:	615a      	str	r2, [r3, #20]
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80016c6:	2280      	movs	r2, #128	; 0x80
 80016c8:	611a      	str	r2, [r3, #16]
 80016ca:	4b03      	ldr	r3, [pc, #12]	; (80016d8 <LCD_Scan_Dir+0x3fc>)
 80016cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016d0:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 80016d2:	e10a      	b.n	80018ea <LCD_Scan_Dir+0x60e>
 80016d4:	20005a88 	.word	0x20005a88
 80016d8:	40011000 	.word	0x40011000
 80016dc:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 80016e0:	4b84      	ldr	r3, [pc, #528]	; (80018f4 <LCD_Scan_Dir+0x618>)
 80016e2:	895b      	ldrh	r3, [r3, #10]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fa5b 	bl	8000ba0 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80016ea:	4b83      	ldr	r3, [pc, #524]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80016ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016f0:	611a      	str	r2, [r3, #16]
 80016f2:	4b81      	ldr	r3, [pc, #516]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80016f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016f8:	615a      	str	r2, [r3, #20]
 80016fa:	4b80      	ldr	r3, [pc, #512]	; (80018fc <LCD_Scan_Dir+0x620>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	60da      	str	r2, [r3, #12]
 8001700:	4b7d      	ldr	r3, [pc, #500]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001702:	2280      	movs	r2, #128	; 0x80
 8001704:	615a      	str	r2, [r3, #20]
 8001706:	4b7c      	ldr	r3, [pc, #496]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001708:	2280      	movs	r2, #128	; 0x80
 800170a:	611a      	str	r2, [r3, #16]
 800170c:	4b7a      	ldr	r3, [pc, #488]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 800170e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001712:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8001714:	4b78      	ldr	r3, [pc, #480]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001716:	f44f 7280 	mov.w	r2, #256	; 0x100
 800171a:	611a      	str	r2, [r3, #16]
 800171c:	4b76      	ldr	r3, [pc, #472]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 800171e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001722:	615a      	str	r2, [r3, #20]
 8001724:	4b75      	ldr	r3, [pc, #468]	; (80018fc <LCD_Scan_Dir+0x620>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	4b73      	ldr	r3, [pc, #460]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 800172c:	2280      	movs	r2, #128	; 0x80
 800172e:	615a      	str	r2, [r3, #20]
 8001730:	4b71      	ldr	r3, [pc, #452]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001732:	2280      	movs	r2, #128	; 0x80
 8001734:	611a      	str	r2, [r3, #16]
 8001736:	4b70      	ldr	r3, [pc, #448]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800173c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 800173e:	4b6e      	ldr	r3, [pc, #440]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001740:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001744:	611a      	str	r2, [r3, #16]
 8001746:	4b6c      	ldr	r3, [pc, #432]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800174c:	615a      	str	r2, [r3, #20]
 800174e:	4b69      	ldr	r3, [pc, #420]	; (80018f4 <LCD_Scan_Dir+0x618>)
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	3b01      	subs	r3, #1
 8001754:	121a      	asrs	r2, r3, #8
 8001756:	4b69      	ldr	r3, [pc, #420]	; (80018fc <LCD_Scan_Dir+0x620>)
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	4b67      	ldr	r3, [pc, #412]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 800175c:	2280      	movs	r2, #128	; 0x80
 800175e:	615a      	str	r2, [r3, #20]
 8001760:	4b65      	ldr	r3, [pc, #404]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001762:	2280      	movs	r2, #128	; 0x80
 8001764:	611a      	str	r2, [r3, #16]
 8001766:	4b64      	ldr	r3, [pc, #400]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001768:	f44f 7200 	mov.w	r2, #512	; 0x200
 800176c:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 800176e:	4b62      	ldr	r3, [pc, #392]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001770:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001774:	611a      	str	r2, [r3, #16]
 8001776:	4b60      	ldr	r3, [pc, #384]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800177c:	615a      	str	r2, [r3, #20]
 800177e:	4b5d      	ldr	r3, [pc, #372]	; (80018f4 <LCD_Scan_Dir+0x618>)
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	3b01      	subs	r3, #1
 8001784:	4a5d      	ldr	r2, [pc, #372]	; (80018fc <LCD_Scan_Dir+0x620>)
 8001786:	b2db      	uxtb	r3, r3
 8001788:	60d3      	str	r3, [r2, #12]
 800178a:	4b5b      	ldr	r3, [pc, #364]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 800178c:	2280      	movs	r2, #128	; 0x80
 800178e:	615a      	str	r2, [r3, #20]
 8001790:	4b59      	ldr	r3, [pc, #356]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001792:	2280      	movs	r2, #128	; 0x80
 8001794:	611a      	str	r2, [r3, #16]
 8001796:	4b58      	ldr	r3, [pc, #352]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001798:	f44f 7200 	mov.w	r2, #512	; 0x200
 800179c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 800179e:	4b55      	ldr	r3, [pc, #340]	; (80018f4 <LCD_Scan_Dir+0x618>)
 80017a0:	899b      	ldrh	r3, [r3, #12]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff f9fc 	bl	8000ba0 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80017a8:	4b53      	ldr	r3, [pc, #332]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80017aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017ae:	611a      	str	r2, [r3, #16]
 80017b0:	4b51      	ldr	r3, [pc, #324]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80017b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017b6:	615a      	str	r2, [r3, #20]
 80017b8:	4b50      	ldr	r3, [pc, #320]	; (80018fc <LCD_Scan_Dir+0x620>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	4b4e      	ldr	r3, [pc, #312]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80017c0:	2280      	movs	r2, #128	; 0x80
 80017c2:	615a      	str	r2, [r3, #20]
 80017c4:	4b4c      	ldr	r3, [pc, #304]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80017c6:	2280      	movs	r2, #128	; 0x80
 80017c8:	611a      	str	r2, [r3, #16]
 80017ca:	4b4b      	ldr	r3, [pc, #300]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80017cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017d0:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 80017d2:	4b49      	ldr	r3, [pc, #292]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80017d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017d8:	611a      	str	r2, [r3, #16]
 80017da:	4b47      	ldr	r3, [pc, #284]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80017dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e0:	615a      	str	r2, [r3, #20]
 80017e2:	4b46      	ldr	r3, [pc, #280]	; (80018fc <LCD_Scan_Dir+0x620>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	60da      	str	r2, [r3, #12]
 80017e8:	4b43      	ldr	r3, [pc, #268]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80017ea:	2280      	movs	r2, #128	; 0x80
 80017ec:	615a      	str	r2, [r3, #20]
 80017ee:	4b42      	ldr	r3, [pc, #264]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80017f0:	2280      	movs	r2, #128	; 0x80
 80017f2:	611a      	str	r2, [r3, #16]
 80017f4:	4b40      	ldr	r3, [pc, #256]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80017f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017fa:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 80017fc:	4b3e      	ldr	r3, [pc, #248]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 80017fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001802:	611a      	str	r2, [r3, #16]
 8001804:	4b3c      	ldr	r3, [pc, #240]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800180a:	615a      	str	r2, [r3, #20]
 800180c:	4b39      	ldr	r3, [pc, #228]	; (80018f4 <LCD_Scan_Dir+0x618>)
 800180e:	885b      	ldrh	r3, [r3, #2]
 8001810:	3b01      	subs	r3, #1
 8001812:	121a      	asrs	r2, r3, #8
 8001814:	4b39      	ldr	r3, [pc, #228]	; (80018fc <LCD_Scan_Dir+0x620>)
 8001816:	60da      	str	r2, [r3, #12]
 8001818:	4b37      	ldr	r3, [pc, #220]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 800181a:	2280      	movs	r2, #128	; 0x80
 800181c:	615a      	str	r2, [r3, #20]
 800181e:	4b36      	ldr	r3, [pc, #216]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001820:	2280      	movs	r2, #128	; 0x80
 8001822:	611a      	str	r2, [r3, #16]
 8001824:	4b34      	ldr	r3, [pc, #208]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001826:	f44f 7200 	mov.w	r2, #512	; 0x200
 800182a:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 800182c:	4b32      	ldr	r3, [pc, #200]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 800182e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001832:	611a      	str	r2, [r3, #16]
 8001834:	4b30      	ldr	r3, [pc, #192]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001836:	f44f 7200 	mov.w	r2, #512	; 0x200
 800183a:	615a      	str	r2, [r3, #20]
 800183c:	4b2d      	ldr	r3, [pc, #180]	; (80018f4 <LCD_Scan_Dir+0x618>)
 800183e:	885b      	ldrh	r3, [r3, #2]
 8001840:	3b01      	subs	r3, #1
 8001842:	4a2e      	ldr	r2, [pc, #184]	; (80018fc <LCD_Scan_Dir+0x620>)
 8001844:	b2db      	uxtb	r3, r3
 8001846:	60d3      	str	r3, [r2, #12]
 8001848:	4b2b      	ldr	r3, [pc, #172]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 800184a:	2280      	movs	r2, #128	; 0x80
 800184c:	615a      	str	r2, [r3, #20]
 800184e:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001850:	2280      	movs	r2, #128	; 0x80
 8001852:	611a      	str	r2, [r3, #16]
 8001854:	4b28      	ldr	r3, [pc, #160]	; (80018f8 <LCD_Scan_Dir+0x61c>)
 8001856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800185a:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 800185c:	e045      	b.n	80018ea <LCD_Scan_Dir+0x60e>
		}
	} else {
		switch (dir) {
 800185e:	79fb      	ldrb	r3, [r7, #7]
 8001860:	2b07      	cmp	r3, #7
 8001862:	d836      	bhi.n	80018d2 <LCD_Scan_Dir+0x5f6>
 8001864:	a201      	add	r2, pc, #4	; (adr r2, 800186c <LCD_Scan_Dir+0x590>)
 8001866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186a:	bf00      	nop
 800186c:	0800188d 	.word	0x0800188d
 8001870:	08001897 	.word	0x08001897
 8001874:	080018a1 	.word	0x080018a1
 8001878:	080018d3 	.word	0x080018d3
 800187c:	080018ab 	.word	0x080018ab
 8001880:	080018b5 	.word	0x080018b5
 8001884:	080018bf 	.word	0x080018bf
 8001888:	080018c9 	.word	0x080018c9
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 800188c:	89fb      	ldrh	r3, [r7, #14]
 800188e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001892:	81fb      	strh	r3, [r7, #14]
			break;
 8001894:	e01d      	b.n	80018d2 <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 8001896:	89fb      	ldrh	r3, [r7, #14]
 8001898:	f043 0310 	orr.w	r3, r3, #16
 800189c:	81fb      	strh	r3, [r7, #14]
			break;
 800189e:	e018      	b.n	80018d2 <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 80018a0:	89fb      	ldrh	r3, [r7, #14]
 80018a2:	f043 0320 	orr.w	r3, r3, #32
 80018a6:	81fb      	strh	r3, [r7, #14]
			break;
 80018a8:	e013      	b.n	80018d2 <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 80018aa:	89fb      	ldrh	r3, [r7, #14]
 80018ac:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80018b0:	81fb      	strh	r3, [r7, #14]
			break;
 80018b2:	e00e      	b.n	80018d2 <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 80018b4:	89fb      	ldrh	r3, [r7, #14]
 80018b6:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80018ba:	81fb      	strh	r3, [r7, #14]
			break;
 80018bc:	e009      	b.n	80018d2 <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 80018be:	89fb      	ldrh	r3, [r7, #14]
 80018c0:	f043 0318 	orr.w	r3, r3, #24
 80018c4:	81fb      	strh	r3, [r7, #14]
			break;
 80018c6:	e004      	b.n	80018d2 <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 80018c8:	89fb      	ldrh	r3, [r7, #14]
 80018ca:	f043 0308 	orr.w	r3, r3, #8
 80018ce:	81fb      	strh	r3, [r7, #14]
			break;
 80018d0:	bf00      	nop
		}
		dirreg = 0X03;
 80018d2:	2303      	movs	r3, #3
 80018d4:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 80018d6:	89fb      	ldrh	r3, [r7, #14]
 80018d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018dc:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 80018de:	89fa      	ldrh	r2, [r7, #14]
 80018e0:	89bb      	ldrh	r3, [r7, #12]
 80018e2:	4611      	mov	r1, r2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff f9e7 	bl	8000cb8 <LCD_WriteReg>
	}
}
 80018ea:	bf00      	nop
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20005a88 	.word	0x20005a88
 80018f8:	40011000 	.word	0x40011000
 80018fc:	40010c00 	.word	0x40010c00

08001900 <LCD_DrawPoint>:
//Draw a point with color
//x,y: coordinate

void LCD_DrawPoint(uint16_t x, uint16_t y) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	460a      	mov	r2, r1
 800190a:	80fb      	strh	r3, [r7, #6]
 800190c:	4613      	mov	r3, r2
 800190e:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x, y);
 8001910:	88ba      	ldrh	r2, [r7, #4]
 8001912:	88fb      	ldrh	r3, [r7, #6]
 8001914:	4611      	mov	r1, r2
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff fa14 	bl	8000d44 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();
 800191c:	f7ff fa06 	bl	8000d2c <LCD_WriteRAM_Prepare>
	LCD_WR_DATA(POINT_COLOR); //POINT_COLOR: Color of this point
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <LCD_DrawPoint+0x54>)
 8001922:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001926:	611a      	str	r2, [r3, #16]
 8001928:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <LCD_DrawPoint+0x54>)
 800192a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800192e:	615a      	str	r2, [r3, #20]
 8001930:	4b09      	ldr	r3, [pc, #36]	; (8001958 <LCD_DrawPoint+0x58>)
 8001932:	881a      	ldrh	r2, [r3, #0]
 8001934:	4b09      	ldr	r3, [pc, #36]	; (800195c <LCD_DrawPoint+0x5c>)
 8001936:	60da      	str	r2, [r3, #12]
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <LCD_DrawPoint+0x54>)
 800193a:	2280      	movs	r2, #128	; 0x80
 800193c:	615a      	str	r2, [r3, #20]
 800193e:	4b05      	ldr	r3, [pc, #20]	; (8001954 <LCD_DrawPoint+0x54>)
 8001940:	2280      	movs	r2, #128	; 0x80
 8001942:	611a      	str	r2, [r3, #16]
 8001944:	4b03      	ldr	r3, [pc, #12]	; (8001954 <LCD_DrawPoint+0x54>)
 8001946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800194a:	611a      	str	r2, [r3, #16]
}
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40011000 	.word	0x40011000
 8001958:	20000268 	.word	0x20000268
 800195c:	40010c00 	.word	0x40010c00

08001960 <LCD_Fast_DrawPoint>:
//Draw a point with color(quicker)
//x,y: coordinate
void LCD_Fast_DrawPoint(uint16_t x, uint16_t y, uint16_t color) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	80fb      	strh	r3, [r7, #6]
 800196a:	460b      	mov	r3, r1
 800196c:	80bb      	strh	r3, [r7, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	807b      	strh	r3, [r7, #2]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8001972:	4b75      	ldr	r3, [pc, #468]	; (8001b48 <LCD_Fast_DrawPoint+0x1e8>)
 8001974:	889b      	ldrh	r3, [r3, #4]
 8001976:	f249 3241 	movw	r2, #37697	; 0x9341
 800197a:	4293      	cmp	r3, r2
 800197c:	d005      	beq.n	800198a <LCD_Fast_DrawPoint+0x2a>
 800197e:	4b72      	ldr	r3, [pc, #456]	; (8001b48 <LCD_Fast_DrawPoint+0x1e8>)
 8001980:	889b      	ldrh	r3, [r3, #4]
 8001982:	f245 3210 	movw	r2, #21264	; 0x5310
 8001986:	4293      	cmp	r3, r2
 8001988:	d164      	bne.n	8001a54 <LCD_Fast_DrawPoint+0xf4>
		LCD_WR_REG(lcddev.setxcmd);
 800198a:	4b6f      	ldr	r3, [pc, #444]	; (8001b48 <LCD_Fast_DrawPoint+0x1e8>)
 800198c:	895b      	ldrh	r3, [r3, #10]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff f906 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001994:	4b6d      	ldr	r3, [pc, #436]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 8001996:	f44f 7280 	mov.w	r2, #256	; 0x100
 800199a:	611a      	str	r2, [r3, #16]
 800199c:	4b6b      	ldr	r3, [pc, #428]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 800199e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019a2:	615a      	str	r2, [r3, #20]
 80019a4:	88fb      	ldrh	r3, [r7, #6]
 80019a6:	0a1b      	lsrs	r3, r3, #8
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	4b69      	ldr	r3, [pc, #420]	; (8001b50 <LCD_Fast_DrawPoint+0x1f0>)
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	4b67      	ldr	r3, [pc, #412]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 80019b0:	2280      	movs	r2, #128	; 0x80
 80019b2:	615a      	str	r2, [r3, #20]
 80019b4:	4b65      	ldr	r3, [pc, #404]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 80019b6:	2280      	movs	r2, #128	; 0x80
 80019b8:	611a      	str	r2, [r3, #16]
 80019ba:	4b64      	ldr	r3, [pc, #400]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 80019bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019c0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 80019c2:	4b62      	ldr	r3, [pc, #392]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 80019c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019c8:	611a      	str	r2, [r3, #16]
 80019ca:	4b60      	ldr	r3, [pc, #384]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 80019cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d0:	615a      	str	r2, [r3, #20]
 80019d2:	88fb      	ldrh	r3, [r7, #6]
 80019d4:	4a5e      	ldr	r2, [pc, #376]	; (8001b50 <LCD_Fast_DrawPoint+0x1f0>)
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	60d3      	str	r3, [r2, #12]
 80019da:	4b5c      	ldr	r3, [pc, #368]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 80019dc:	2280      	movs	r2, #128	; 0x80
 80019de:	615a      	str	r2, [r3, #20]
 80019e0:	4b5a      	ldr	r3, [pc, #360]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 80019e2:	2280      	movs	r2, #128	; 0x80
 80019e4:	611a      	str	r2, [r3, #16]
 80019e6:	4b59      	ldr	r3, [pc, #356]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 80019e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ec:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 80019ee:	4b56      	ldr	r3, [pc, #344]	; (8001b48 <LCD_Fast_DrawPoint+0x1e8>)
 80019f0:	899b      	ldrh	r3, [r3, #12]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff f8d4 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 80019f8:	4b54      	ldr	r3, [pc, #336]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 80019fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019fe:	611a      	str	r2, [r3, #16]
 8001a00:	4b52      	ldr	r3, [pc, #328]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 8001a02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a06:	615a      	str	r2, [r3, #20]
 8001a08:	88bb      	ldrh	r3, [r7, #4]
 8001a0a:	0a1b      	lsrs	r3, r3, #8
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	4b50      	ldr	r3, [pc, #320]	; (8001b50 <LCD_Fast_DrawPoint+0x1f0>)
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	4b4e      	ldr	r3, [pc, #312]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 8001a14:	2280      	movs	r2, #128	; 0x80
 8001a16:	615a      	str	r2, [r3, #20]
 8001a18:	4b4c      	ldr	r3, [pc, #304]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 8001a1a:	2280      	movs	r2, #128	; 0x80
 8001a1c:	611a      	str	r2, [r3, #16]
 8001a1e:	4b4b      	ldr	r3, [pc, #300]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 8001a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a24:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001a26:	4b49      	ldr	r3, [pc, #292]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 8001a28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a2c:	611a      	str	r2, [r3, #16]
 8001a2e:	4b47      	ldr	r3, [pc, #284]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 8001a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a34:	615a      	str	r2, [r3, #20]
 8001a36:	88bb      	ldrh	r3, [r7, #4]
 8001a38:	4a45      	ldr	r2, [pc, #276]	; (8001b50 <LCD_Fast_DrawPoint+0x1f0>)
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	60d3      	str	r3, [r2, #12]
 8001a3e:	4b43      	ldr	r3, [pc, #268]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 8001a40:	2280      	movs	r2, #128	; 0x80
 8001a42:	615a      	str	r2, [r3, #20]
 8001a44:	4b41      	ldr	r3, [pc, #260]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 8001a46:	2280      	movs	r2, #128	; 0x80
 8001a48:	611a      	str	r2, [r3, #16]
 8001a4a:	4b40      	ldr	r3, [pc, #256]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 8001a4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a50:	611a      	str	r2, [r3, #16]
 8001a52:	e1e6      	b.n	8001e22 <LCD_Fast_DrawPoint+0x4c2>
	} else if (lcddev.id == 0X5510) {
 8001a54:	4b3c      	ldr	r3, [pc, #240]	; (8001b48 <LCD_Fast_DrawPoint+0x1e8>)
 8001a56:	889b      	ldrh	r3, [r3, #4]
 8001a58:	f245 5210 	movw	r2, #21776	; 0x5510
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d179      	bne.n	8001b54 <LCD_Fast_DrawPoint+0x1f4>
		LCD_WR_REG(lcddev.setxcmd);
 8001a60:	4b39      	ldr	r3, [pc, #228]	; (8001b48 <LCD_Fast_DrawPoint+0x1e8>)
 8001a62:	895b      	ldrh	r3, [r3, #10]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff f89b 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001a6a:	4b38      	ldr	r3, [pc, #224]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 8001a6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a70:	611a      	str	r2, [r3, #16]
 8001a72:	4b36      	ldr	r3, [pc, #216]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 8001a74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a78:	615a      	str	r2, [r3, #20]
 8001a7a:	88fb      	ldrh	r3, [r7, #6]
 8001a7c:	0a1b      	lsrs	r3, r3, #8
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	4b33      	ldr	r3, [pc, #204]	; (8001b50 <LCD_Fast_DrawPoint+0x1f0>)
 8001a82:	60da      	str	r2, [r3, #12]
 8001a84:	4b31      	ldr	r3, [pc, #196]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 8001a86:	2280      	movs	r2, #128	; 0x80
 8001a88:	615a      	str	r2, [r3, #20]
 8001a8a:	4b30      	ldr	r3, [pc, #192]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 8001a8c:	2280      	movs	r2, #128	; 0x80
 8001a8e:	611a      	str	r2, [r3, #16]
 8001a90:	4b2e      	ldr	r3, [pc, #184]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 8001a92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a96:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 8001a98:	4b2b      	ldr	r3, [pc, #172]	; (8001b48 <LCD_Fast_DrawPoint+0x1e8>)
 8001a9a:	895b      	ldrh	r3, [r3, #10]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff f87d 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(x & 0XFF);
 8001aa6:	4b29      	ldr	r3, [pc, #164]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 8001aa8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aac:	611a      	str	r2, [r3, #16]
 8001aae:	4b27      	ldr	r3, [pc, #156]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 8001ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ab4:	615a      	str	r2, [r3, #20]
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	4a25      	ldr	r2, [pc, #148]	; (8001b50 <LCD_Fast_DrawPoint+0x1f0>)
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	60d3      	str	r3, [r2, #12]
 8001abe:	4b23      	ldr	r3, [pc, #140]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 8001ac0:	2280      	movs	r2, #128	; 0x80
 8001ac2:	615a      	str	r2, [r3, #20]
 8001ac4:	4b21      	ldr	r3, [pc, #132]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 8001ac6:	2280      	movs	r2, #128	; 0x80
 8001ac8:	611a      	str	r2, [r3, #16]
 8001aca:	4b20      	ldr	r3, [pc, #128]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 8001acc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ad0:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001ad2:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <LCD_Fast_DrawPoint+0x1e8>)
 8001ad4:	899b      	ldrh	r3, [r3, #12]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff f862 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001adc:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 8001ade:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ae2:	611a      	str	r2, [r3, #16]
 8001ae4:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 8001ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aea:	615a      	str	r2, [r3, #20]
 8001aec:	88bb      	ldrh	r3, [r7, #4]
 8001aee:	0a1b      	lsrs	r3, r3, #8
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <LCD_Fast_DrawPoint+0x1f0>)
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 8001af8:	2280      	movs	r2, #128	; 0x80
 8001afa:	615a      	str	r2, [r3, #20]
 8001afc:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 8001afe:	2280      	movs	r2, #128	; 0x80
 8001b00:	611a      	str	r2, [r3, #16]
 8001b02:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 8001b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b08:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <LCD_Fast_DrawPoint+0x1e8>)
 8001b0c:	899b      	ldrh	r3, [r3, #12]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff f844 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(y & 0XFF);
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 8001b1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b1e:	611a      	str	r2, [r3, #16]
 8001b20:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 8001b22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b26:	615a      	str	r2, [r3, #20]
 8001b28:	88bb      	ldrh	r3, [r7, #4]
 8001b2a:	4a09      	ldr	r2, [pc, #36]	; (8001b50 <LCD_Fast_DrawPoint+0x1f0>)
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	60d3      	str	r3, [r2, #12]
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 8001b32:	2280      	movs	r2, #128	; 0x80
 8001b34:	615a      	str	r2, [r3, #20]
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 8001b38:	2280      	movs	r2, #128	; 0x80
 8001b3a:	611a      	str	r2, [r3, #16]
 8001b3c:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <LCD_Fast_DrawPoint+0x1ec>)
 8001b3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b42:	611a      	str	r2, [r3, #16]
 8001b44:	e16d      	b.n	8001e22 <LCD_Fast_DrawPoint+0x4c2>
 8001b46:	bf00      	nop
 8001b48:	20005a88 	.word	0x20005a88
 8001b4c:	40011000 	.word	0x40011000
 8001b50:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8001b54:	4b68      	ldr	r3, [pc, #416]	; (8001cf8 <LCD_Fast_DrawPoint+0x398>)
 8001b56:	889b      	ldrh	r3, [r3, #4]
 8001b58:	f641 1263 	movw	r2, #6499	; 0x1963
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	f040 80d1 	bne.w	8001d04 <LCD_Fast_DrawPoint+0x3a4>
		if (lcddev.dir == 0)
 8001b62:	4b65      	ldr	r3, [pc, #404]	; (8001cf8 <LCD_Fast_DrawPoint+0x398>)
 8001b64:	799b      	ldrb	r3, [r3, #6]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d106      	bne.n	8001b78 <LCD_Fast_DrawPoint+0x218>
			x = lcddev.width - 1 - x;
 8001b6a:	4b63      	ldr	r3, [pc, #396]	; (8001cf8 <LCD_Fast_DrawPoint+0x398>)
 8001b6c:	881a      	ldrh	r2, [r3, #0]
 8001b6e:	88fb      	ldrh	r3, [r7, #6]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	3b01      	subs	r3, #1
 8001b76:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001b78:	4b5f      	ldr	r3, [pc, #380]	; (8001cf8 <LCD_Fast_DrawPoint+0x398>)
 8001b7a:	895b      	ldrh	r3, [r3, #10]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff f80f 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001b82:	4b5e      	ldr	r3, [pc, #376]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001b84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b88:	611a      	str	r2, [r3, #16]
 8001b8a:	4b5c      	ldr	r3, [pc, #368]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b90:	615a      	str	r2, [r3, #20]
 8001b92:	88fb      	ldrh	r3, [r7, #6]
 8001b94:	0a1b      	lsrs	r3, r3, #8
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	4b59      	ldr	r3, [pc, #356]	; (8001d00 <LCD_Fast_DrawPoint+0x3a0>)
 8001b9a:	60da      	str	r2, [r3, #12]
 8001b9c:	4b57      	ldr	r3, [pc, #348]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001b9e:	2280      	movs	r2, #128	; 0x80
 8001ba0:	615a      	str	r2, [r3, #20]
 8001ba2:	4b56      	ldr	r3, [pc, #344]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001ba4:	2280      	movs	r2, #128	; 0x80
 8001ba6:	611a      	str	r2, [r3, #16]
 8001ba8:	4b54      	ldr	r3, [pc, #336]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001baa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bae:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001bb0:	4b52      	ldr	r3, [pc, #328]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001bb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bb6:	611a      	str	r2, [r3, #16]
 8001bb8:	4b50      	ldr	r3, [pc, #320]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001bba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bbe:	615a      	str	r2, [r3, #20]
 8001bc0:	88fb      	ldrh	r3, [r7, #6]
 8001bc2:	4a4f      	ldr	r2, [pc, #316]	; (8001d00 <LCD_Fast_DrawPoint+0x3a0>)
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	60d3      	str	r3, [r2, #12]
 8001bc8:	4b4c      	ldr	r3, [pc, #304]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001bca:	2280      	movs	r2, #128	; 0x80
 8001bcc:	615a      	str	r2, [r3, #20]
 8001bce:	4b4b      	ldr	r3, [pc, #300]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001bd0:	2280      	movs	r2, #128	; 0x80
 8001bd2:	611a      	str	r2, [r3, #16]
 8001bd4:	4b49      	ldr	r3, [pc, #292]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001bd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bda:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x >> 8);
 8001bdc:	4b47      	ldr	r3, [pc, #284]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001bde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001be2:	611a      	str	r2, [r3, #16]
 8001be4:	4b45      	ldr	r3, [pc, #276]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001be6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bea:	615a      	str	r2, [r3, #20]
 8001bec:	88fb      	ldrh	r3, [r7, #6]
 8001bee:	0a1b      	lsrs	r3, r3, #8
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	4b43      	ldr	r3, [pc, #268]	; (8001d00 <LCD_Fast_DrawPoint+0x3a0>)
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	4b41      	ldr	r3, [pc, #260]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001bf8:	2280      	movs	r2, #128	; 0x80
 8001bfa:	615a      	str	r2, [r3, #20]
 8001bfc:	4b3f      	ldr	r3, [pc, #252]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001bfe:	2280      	movs	r2, #128	; 0x80
 8001c00:	611a      	str	r2, [r3, #16]
 8001c02:	4b3e      	ldr	r3, [pc, #248]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001c04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c08:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001c0a:	4b3c      	ldr	r3, [pc, #240]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001c0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c10:	611a      	str	r2, [r3, #16]
 8001c12:	4b3a      	ldr	r3, [pc, #232]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001c14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c18:	615a      	str	r2, [r3, #20]
 8001c1a:	88fb      	ldrh	r3, [r7, #6]
 8001c1c:	4a38      	ldr	r2, [pc, #224]	; (8001d00 <LCD_Fast_DrawPoint+0x3a0>)
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	60d3      	str	r3, [r2, #12]
 8001c22:	4b36      	ldr	r3, [pc, #216]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001c24:	2280      	movs	r2, #128	; 0x80
 8001c26:	615a      	str	r2, [r3, #20]
 8001c28:	4b34      	ldr	r3, [pc, #208]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001c2a:	2280      	movs	r2, #128	; 0x80
 8001c2c:	611a      	str	r2, [r3, #16]
 8001c2e:	4b33      	ldr	r3, [pc, #204]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001c30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c34:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001c36:	4b30      	ldr	r3, [pc, #192]	; (8001cf8 <LCD_Fast_DrawPoint+0x398>)
 8001c38:	899b      	ldrh	r3, [r3, #12]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe ffb0 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001c40:	4b2e      	ldr	r3, [pc, #184]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001c42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c46:	611a      	str	r2, [r3, #16]
 8001c48:	4b2c      	ldr	r3, [pc, #176]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c4e:	615a      	str	r2, [r3, #20]
 8001c50:	88bb      	ldrh	r3, [r7, #4]
 8001c52:	0a1b      	lsrs	r3, r3, #8
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	4b2a      	ldr	r3, [pc, #168]	; (8001d00 <LCD_Fast_DrawPoint+0x3a0>)
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	4b28      	ldr	r3, [pc, #160]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001c5c:	2280      	movs	r2, #128	; 0x80
 8001c5e:	615a      	str	r2, [r3, #20]
 8001c60:	4b26      	ldr	r3, [pc, #152]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001c62:	2280      	movs	r2, #128	; 0x80
 8001c64:	611a      	str	r2, [r3, #16]
 8001c66:	4b25      	ldr	r3, [pc, #148]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001c68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c6c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001c6e:	4b23      	ldr	r3, [pc, #140]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001c70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c74:	611a      	str	r2, [r3, #16]
 8001c76:	4b21      	ldr	r3, [pc, #132]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001c78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c7c:	615a      	str	r2, [r3, #20]
 8001c7e:	88bb      	ldrh	r3, [r7, #4]
 8001c80:	4a1f      	ldr	r2, [pc, #124]	; (8001d00 <LCD_Fast_DrawPoint+0x3a0>)
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	60d3      	str	r3, [r2, #12]
 8001c86:	4b1d      	ldr	r3, [pc, #116]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001c88:	2280      	movs	r2, #128	; 0x80
 8001c8a:	615a      	str	r2, [r3, #20]
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001c8e:	2280      	movs	r2, #128	; 0x80
 8001c90:	611a      	str	r2, [r3, #16]
 8001c92:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c98:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y >> 8);
 8001c9a:	4b18      	ldr	r3, [pc, #96]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001c9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ca0:	611a      	str	r2, [r3, #16]
 8001ca2:	4b16      	ldr	r3, [pc, #88]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001ca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ca8:	615a      	str	r2, [r3, #20]
 8001caa:	88bb      	ldrh	r3, [r7, #4]
 8001cac:	0a1b      	lsrs	r3, r3, #8
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <LCD_Fast_DrawPoint+0x3a0>)
 8001cb2:	60da      	str	r2, [r3, #12]
 8001cb4:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001cb6:	2280      	movs	r2, #128	; 0x80
 8001cb8:	615a      	str	r2, [r3, #20]
 8001cba:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001cbc:	2280      	movs	r2, #128	; 0x80
 8001cbe:	611a      	str	r2, [r3, #16]
 8001cc0:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001cc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cc6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001cca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cce:	611a      	str	r2, [r3, #16]
 8001cd0:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001cd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd6:	615a      	str	r2, [r3, #20]
 8001cd8:	88bb      	ldrh	r3, [r7, #4]
 8001cda:	4a09      	ldr	r2, [pc, #36]	; (8001d00 <LCD_Fast_DrawPoint+0x3a0>)
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	60d3      	str	r3, [r2, #12]
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001ce2:	2280      	movs	r2, #128	; 0x80
 8001ce4:	615a      	str	r2, [r3, #20]
 8001ce6:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001ce8:	2280      	movs	r2, #128	; 0x80
 8001cea:	611a      	str	r2, [r3, #16]
 8001cec:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <LCD_Fast_DrawPoint+0x39c>)
 8001cee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cf2:	611a      	str	r2, [r3, #16]
 8001cf4:	e095      	b.n	8001e22 <LCD_Fast_DrawPoint+0x4c2>
 8001cf6:	bf00      	nop
 8001cf8:	20005a88 	.word	0x20005a88
 8001cfc:	40011000 	.word	0x40011000
 8001d00:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X6804) {
 8001d04:	4b5e      	ldr	r3, [pc, #376]	; (8001e80 <LCD_Fast_DrawPoint+0x520>)
 8001d06:	889b      	ldrh	r3, [r3, #4]
 8001d08:	f646 0204 	movw	r2, #26628	; 0x6804
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d16f      	bne.n	8001df0 <LCD_Fast_DrawPoint+0x490>
		if (lcddev.dir == 1)
 8001d10:	4b5b      	ldr	r3, [pc, #364]	; (8001e80 <LCD_Fast_DrawPoint+0x520>)
 8001d12:	799b      	ldrb	r3, [r3, #6]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d106      	bne.n	8001d26 <LCD_Fast_DrawPoint+0x3c6>
			x = lcddev.width - 1 - x;	//横屏时处理
 8001d18:	4b59      	ldr	r3, [pc, #356]	; (8001e80 <LCD_Fast_DrawPoint+0x520>)
 8001d1a:	881a      	ldrh	r2, [r3, #0]
 8001d1c:	88fb      	ldrh	r3, [r7, #6]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	3b01      	subs	r3, #1
 8001d24:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001d26:	4b56      	ldr	r3, [pc, #344]	; (8001e80 <LCD_Fast_DrawPoint+0x520>)
 8001d28:	895b      	ldrh	r3, [r3, #10]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe ff38 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8001d30:	4b54      	ldr	r3, [pc, #336]	; (8001e84 <LCD_Fast_DrawPoint+0x524>)
 8001d32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d36:	611a      	str	r2, [r3, #16]
 8001d38:	4b52      	ldr	r3, [pc, #328]	; (8001e84 <LCD_Fast_DrawPoint+0x524>)
 8001d3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d3e:	615a      	str	r2, [r3, #20]
 8001d40:	88fb      	ldrh	r3, [r7, #6]
 8001d42:	0a1b      	lsrs	r3, r3, #8
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	4b50      	ldr	r3, [pc, #320]	; (8001e88 <LCD_Fast_DrawPoint+0x528>)
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	4b4e      	ldr	r3, [pc, #312]	; (8001e84 <LCD_Fast_DrawPoint+0x524>)
 8001d4c:	2280      	movs	r2, #128	; 0x80
 8001d4e:	615a      	str	r2, [r3, #20]
 8001d50:	4b4c      	ldr	r3, [pc, #304]	; (8001e84 <LCD_Fast_DrawPoint+0x524>)
 8001d52:	2280      	movs	r2, #128	; 0x80
 8001d54:	611a      	str	r2, [r3, #16]
 8001d56:	4b4b      	ldr	r3, [pc, #300]	; (8001e84 <LCD_Fast_DrawPoint+0x524>)
 8001d58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d5c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8001d5e:	4b49      	ldr	r3, [pc, #292]	; (8001e84 <LCD_Fast_DrawPoint+0x524>)
 8001d60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d64:	611a      	str	r2, [r3, #16]
 8001d66:	4b47      	ldr	r3, [pc, #284]	; (8001e84 <LCD_Fast_DrawPoint+0x524>)
 8001d68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d6c:	615a      	str	r2, [r3, #20]
 8001d6e:	88fb      	ldrh	r3, [r7, #6]
 8001d70:	4a45      	ldr	r2, [pc, #276]	; (8001e88 <LCD_Fast_DrawPoint+0x528>)
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	60d3      	str	r3, [r2, #12]
 8001d76:	4b43      	ldr	r3, [pc, #268]	; (8001e84 <LCD_Fast_DrawPoint+0x524>)
 8001d78:	2280      	movs	r2, #128	; 0x80
 8001d7a:	615a      	str	r2, [r3, #20]
 8001d7c:	4b41      	ldr	r3, [pc, #260]	; (8001e84 <LCD_Fast_DrawPoint+0x524>)
 8001d7e:	2280      	movs	r2, #128	; 0x80
 8001d80:	611a      	str	r2, [r3, #16]
 8001d82:	4b40      	ldr	r3, [pc, #256]	; (8001e84 <LCD_Fast_DrawPoint+0x524>)
 8001d84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d88:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001d8a:	4b3d      	ldr	r3, [pc, #244]	; (8001e80 <LCD_Fast_DrawPoint+0x520>)
 8001d8c:	899b      	ldrh	r3, [r3, #12]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe ff06 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8001d94:	4b3b      	ldr	r3, [pc, #236]	; (8001e84 <LCD_Fast_DrawPoint+0x524>)
 8001d96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d9a:	611a      	str	r2, [r3, #16]
 8001d9c:	4b39      	ldr	r3, [pc, #228]	; (8001e84 <LCD_Fast_DrawPoint+0x524>)
 8001d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001da2:	615a      	str	r2, [r3, #20]
 8001da4:	88bb      	ldrh	r3, [r7, #4]
 8001da6:	0a1b      	lsrs	r3, r3, #8
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	4b37      	ldr	r3, [pc, #220]	; (8001e88 <LCD_Fast_DrawPoint+0x528>)
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	4b35      	ldr	r3, [pc, #212]	; (8001e84 <LCD_Fast_DrawPoint+0x524>)
 8001db0:	2280      	movs	r2, #128	; 0x80
 8001db2:	615a      	str	r2, [r3, #20]
 8001db4:	4b33      	ldr	r3, [pc, #204]	; (8001e84 <LCD_Fast_DrawPoint+0x524>)
 8001db6:	2280      	movs	r2, #128	; 0x80
 8001db8:	611a      	str	r2, [r3, #16]
 8001dba:	4b32      	ldr	r3, [pc, #200]	; (8001e84 <LCD_Fast_DrawPoint+0x524>)
 8001dbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dc0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8001dc2:	4b30      	ldr	r3, [pc, #192]	; (8001e84 <LCD_Fast_DrawPoint+0x524>)
 8001dc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dc8:	611a      	str	r2, [r3, #16]
 8001dca:	4b2e      	ldr	r3, [pc, #184]	; (8001e84 <LCD_Fast_DrawPoint+0x524>)
 8001dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dd0:	615a      	str	r2, [r3, #20]
 8001dd2:	88bb      	ldrh	r3, [r7, #4]
 8001dd4:	4a2c      	ldr	r2, [pc, #176]	; (8001e88 <LCD_Fast_DrawPoint+0x528>)
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	60d3      	str	r3, [r2, #12]
 8001dda:	4b2a      	ldr	r3, [pc, #168]	; (8001e84 <LCD_Fast_DrawPoint+0x524>)
 8001ddc:	2280      	movs	r2, #128	; 0x80
 8001dde:	615a      	str	r2, [r3, #20]
 8001de0:	4b28      	ldr	r3, [pc, #160]	; (8001e84 <LCD_Fast_DrawPoint+0x524>)
 8001de2:	2280      	movs	r2, #128	; 0x80
 8001de4:	611a      	str	r2, [r3, #16]
 8001de6:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <LCD_Fast_DrawPoint+0x524>)
 8001de8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dec:	611a      	str	r2, [r3, #16]
 8001dee:	e018      	b.n	8001e22 <LCD_Fast_DrawPoint+0x4c2>
	} else {
		if (lcddev.dir == 1)
 8001df0:	4b23      	ldr	r3, [pc, #140]	; (8001e80 <LCD_Fast_DrawPoint+0x520>)
 8001df2:	799b      	ldrb	r3, [r3, #6]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d106      	bne.n	8001e06 <LCD_Fast_DrawPoint+0x4a6>
			x = lcddev.width - 1 - x;	//横屏其实就是调转x,y坐标
 8001df8:	4b21      	ldr	r3, [pc, #132]	; (8001e80 <LCD_Fast_DrawPoint+0x520>)
 8001dfa:	881a      	ldrh	r2, [r3, #0]
 8001dfc:	88fb      	ldrh	r3, [r7, #6]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	3b01      	subs	r3, #1
 8001e04:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, x);
 8001e06:	4b1e      	ldr	r3, [pc, #120]	; (8001e80 <LCD_Fast_DrawPoint+0x520>)
 8001e08:	895b      	ldrh	r3, [r3, #10]
 8001e0a:	88fa      	ldrh	r2, [r7, #6]
 8001e0c:	4611      	mov	r1, r2
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe ff52 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, y);
 8001e14:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <LCD_Fast_DrawPoint+0x520>)
 8001e16:	899b      	ldrh	r3, [r3, #12]
 8001e18:	88ba      	ldrh	r2, [r7, #4]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7fe ff4b 	bl	8000cb8 <LCD_WriteReg>
	}
	LCD_RS_CLR;
 8001e22:	4b18      	ldr	r3, [pc, #96]	; (8001e84 <LCD_Fast_DrawPoint+0x524>)
 8001e24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e28:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8001e2a:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <LCD_Fast_DrawPoint+0x524>)
 8001e2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e30:	615a      	str	r2, [r3, #20]
	DATAOUT(lcddev.wramcmd);	//写指令
 8001e32:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <LCD_Fast_DrawPoint+0x520>)
 8001e34:	891a      	ldrh	r2, [r3, #8]
 8001e36:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <LCD_Fast_DrawPoint+0x528>)
 8001e38:	60da      	str	r2, [r3, #12]
	LCD_WR_CLR;
 8001e3a:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <LCD_Fast_DrawPoint+0x524>)
 8001e3c:	2280      	movs	r2, #128	; 0x80
 8001e3e:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8001e40:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <LCD_Fast_DrawPoint+0x524>)
 8001e42:	2280      	movs	r2, #128	; 0x80
 8001e44:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8001e46:	4b0f      	ldr	r3, [pc, #60]	; (8001e84 <LCD_Fast_DrawPoint+0x524>)
 8001e48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e4c:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(color);		//写数据
 8001e4e:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <LCD_Fast_DrawPoint+0x524>)
 8001e50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e54:	611a      	str	r2, [r3, #16]
 8001e56:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <LCD_Fast_DrawPoint+0x524>)
 8001e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e5c:	615a      	str	r2, [r3, #20]
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <LCD_Fast_DrawPoint+0x528>)
 8001e60:	887b      	ldrh	r3, [r7, #2]
 8001e62:	60d3      	str	r3, [r2, #12]
 8001e64:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <LCD_Fast_DrawPoint+0x524>)
 8001e66:	2280      	movs	r2, #128	; 0x80
 8001e68:	615a      	str	r2, [r3, #20]
 8001e6a:	4b06      	ldr	r3, [pc, #24]	; (8001e84 <LCD_Fast_DrawPoint+0x524>)
 8001e6c:	2280      	movs	r2, #128	; 0x80
 8001e6e:	611a      	str	r2, [r3, #16]
 8001e70:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <LCD_Fast_DrawPoint+0x524>)
 8001e72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e76:	611a      	str	r2, [r3, #16]
}
 8001e78:	bf00      	nop
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20005a88 	.word	0x20005a88
 8001e84:	40011000 	.word	0x40011000
 8001e88:	40010c00 	.word	0x40010c00
 8001e8c:	00000000 	.word	0x00000000

08001e90 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 8001e90:	b590      	push	{r4, r7, lr}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8001e9a:	20be      	movs	r0, #190	; 0xbe
 8001e9c:	f7fe fe80 	bl	8000ba0 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8001ea0:	4b4b      	ldr	r3, [pc, #300]	; (8001fd0 <LCD_SSD_BackLightSet+0x140>)
 8001ea2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ea6:	611a      	str	r2, [r3, #16]
 8001ea8:	4b49      	ldr	r3, [pc, #292]	; (8001fd0 <LCD_SSD_BackLightSet+0x140>)
 8001eaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eae:	615a      	str	r2, [r3, #20]
 8001eb0:	4b48      	ldr	r3, [pc, #288]	; (8001fd4 <LCD_SSD_BackLightSet+0x144>)
 8001eb2:	2205      	movs	r2, #5
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	4b46      	ldr	r3, [pc, #280]	; (8001fd0 <LCD_SSD_BackLightSet+0x140>)
 8001eb8:	2280      	movs	r2, #128	; 0x80
 8001eba:	615a      	str	r2, [r3, #20]
 8001ebc:	4b44      	ldr	r3, [pc, #272]	; (8001fd0 <LCD_SSD_BackLightSet+0x140>)
 8001ebe:	2280      	movs	r2, #128	; 0x80
 8001ec0:	611a      	str	r2, [r3, #16]
 8001ec2:	4b43      	ldr	r3, [pc, #268]	; (8001fd0 <LCD_SSD_BackLightSet+0x140>)
 8001ec4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ec8:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 8001eca:	4b41      	ldr	r3, [pc, #260]	; (8001fd0 <LCD_SSD_BackLightSet+0x140>)
 8001ecc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ed0:	611a      	str	r2, [r3, #16]
 8001ed2:	4b3f      	ldr	r3, [pc, #252]	; (8001fd0 <LCD_SSD_BackLightSet+0x140>)
 8001ed4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ed8:	615a      	str	r2, [r3, #20]
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe fafd 	bl	80004dc <__aeabi_i2d>
 8001ee2:	a339      	add	r3, pc, #228	; (adr r3, 8001fc8 <LCD_SSD_BackLightSet+0x138>)
 8001ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee8:	f7fe fb62 	bl	80005b0 <__aeabi_dmul>
 8001eec:	4603      	mov	r3, r0
 8001eee:	460c      	mov	r4, r1
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4623      	mov	r3, r4
 8001ef4:	4c37      	ldr	r4, [pc, #220]	; (8001fd4 <LCD_SSD_BackLightSet+0x144>)
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f7fe fe31 	bl	8000b60 <__aeabi_d2uiz>
 8001efe:	4603      	mov	r3, r0
 8001f00:	60e3      	str	r3, [r4, #12]
 8001f02:	4b33      	ldr	r3, [pc, #204]	; (8001fd0 <LCD_SSD_BackLightSet+0x140>)
 8001f04:	2280      	movs	r2, #128	; 0x80
 8001f06:	615a      	str	r2, [r3, #20]
 8001f08:	4b31      	ldr	r3, [pc, #196]	; (8001fd0 <LCD_SSD_BackLightSet+0x140>)
 8001f0a:	2280      	movs	r2, #128	; 0x80
 8001f0c:	611a      	str	r2, [r3, #16]
 8001f0e:	4b30      	ldr	r3, [pc, #192]	; (8001fd0 <LCD_SSD_BackLightSet+0x140>)
 8001f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f14:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 8001f16:	4b2e      	ldr	r3, [pc, #184]	; (8001fd0 <LCD_SSD_BackLightSet+0x140>)
 8001f18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f1c:	611a      	str	r2, [r3, #16]
 8001f1e:	4b2c      	ldr	r3, [pc, #176]	; (8001fd0 <LCD_SSD_BackLightSet+0x140>)
 8001f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f24:	615a      	str	r2, [r3, #20]
 8001f26:	4b2b      	ldr	r3, [pc, #172]	; (8001fd4 <LCD_SSD_BackLightSet+0x144>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	60da      	str	r2, [r3, #12]
 8001f2c:	4b28      	ldr	r3, [pc, #160]	; (8001fd0 <LCD_SSD_BackLightSet+0x140>)
 8001f2e:	2280      	movs	r2, #128	; 0x80
 8001f30:	615a      	str	r2, [r3, #20]
 8001f32:	4b27      	ldr	r3, [pc, #156]	; (8001fd0 <LCD_SSD_BackLightSet+0x140>)
 8001f34:	2280      	movs	r2, #128	; 0x80
 8001f36:	611a      	str	r2, [r3, #16]
 8001f38:	4b25      	ldr	r3, [pc, #148]	; (8001fd0 <LCD_SSD_BackLightSet+0x140>)
 8001f3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f3e:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 8001f40:	4b23      	ldr	r3, [pc, #140]	; (8001fd0 <LCD_SSD_BackLightSet+0x140>)
 8001f42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f46:	611a      	str	r2, [r3, #16]
 8001f48:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <LCD_SSD_BackLightSet+0x140>)
 8001f4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f4e:	615a      	str	r2, [r3, #20]
 8001f50:	4b20      	ldr	r3, [pc, #128]	; (8001fd4 <LCD_SSD_BackLightSet+0x144>)
 8001f52:	22ff      	movs	r2, #255	; 0xff
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	4b1e      	ldr	r3, [pc, #120]	; (8001fd0 <LCD_SSD_BackLightSet+0x140>)
 8001f58:	2280      	movs	r2, #128	; 0x80
 8001f5a:	615a      	str	r2, [r3, #20]
 8001f5c:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <LCD_SSD_BackLightSet+0x140>)
 8001f5e:	2280      	movs	r2, #128	; 0x80
 8001f60:	611a      	str	r2, [r3, #16]
 8001f62:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <LCD_SSD_BackLightSet+0x140>)
 8001f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f68:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 8001f6a:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <LCD_SSD_BackLightSet+0x140>)
 8001f6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f70:	611a      	str	r2, [r3, #16]
 8001f72:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <LCD_SSD_BackLightSet+0x140>)
 8001f74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f78:	615a      	str	r2, [r3, #20]
 8001f7a:	4b16      	ldr	r3, [pc, #88]	; (8001fd4 <LCD_SSD_BackLightSet+0x144>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	60da      	str	r2, [r3, #12]
 8001f80:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <LCD_SSD_BackLightSet+0x140>)
 8001f82:	2280      	movs	r2, #128	; 0x80
 8001f84:	615a      	str	r2, [r3, #20]
 8001f86:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <LCD_SSD_BackLightSet+0x140>)
 8001f88:	2280      	movs	r2, #128	; 0x80
 8001f8a:	611a      	str	r2, [r3, #16]
 8001f8c:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <LCD_SSD_BackLightSet+0x140>)
 8001f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f92:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 8001f94:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <LCD_SSD_BackLightSet+0x140>)
 8001f96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f9a:	611a      	str	r2, [r3, #16]
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <LCD_SSD_BackLightSet+0x140>)
 8001f9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fa2:	615a      	str	r2, [r3, #20]
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <LCD_SSD_BackLightSet+0x144>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <LCD_SSD_BackLightSet+0x140>)
 8001fac:	2280      	movs	r2, #128	; 0x80
 8001fae:	615a      	str	r2, [r3, #20]
 8001fb0:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <LCD_SSD_BackLightSet+0x140>)
 8001fb2:	2280      	movs	r2, #128	; 0x80
 8001fb4:	611a      	str	r2, [r3, #16]
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <LCD_SSD_BackLightSet+0x140>)
 8001fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fbc:	611a      	str	r2, [r3, #16]
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd90      	pop	{r4, r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	66666666 	.word	0x66666666
 8001fcc:	40046666 	.word	0x40046666
 8001fd0:	40011000 	.word	0x40011000
 8001fd4:	40010c00 	.word	0x40010c00

08001fd8 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d177      	bne.n	80020d8 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 8001fe8:	4b80      	ldr	r3, [pc, #512]	; (80021ec <LCD_Display_Dir+0x214>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 8001fee:	4b7f      	ldr	r3, [pc, #508]	; (80021ec <LCD_Display_Dir+0x214>)
 8001ff0:	22f0      	movs	r2, #240	; 0xf0
 8001ff2:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8001ff4:	4b7d      	ldr	r3, [pc, #500]	; (80021ec <LCD_Display_Dir+0x214>)
 8001ff6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ffa:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8001ffc:	4b7b      	ldr	r3, [pc, #492]	; (80021ec <LCD_Display_Dir+0x214>)
 8001ffe:	889b      	ldrh	r3, [r3, #4]
 8002000:	f249 3241 	movw	r2, #37697	; 0x9341
 8002004:	4293      	cmp	r3, r2
 8002006:	d00b      	beq.n	8002020 <LCD_Display_Dir+0x48>
 8002008:	4b78      	ldr	r3, [pc, #480]	; (80021ec <LCD_Display_Dir+0x214>)
 800200a:	889b      	ldrh	r3, [r3, #4]
 800200c:	f646 0204 	movw	r2, #26628	; 0x6804
 8002010:	4293      	cmp	r3, r2
 8002012:	d005      	beq.n	8002020 <LCD_Display_Dir+0x48>
 8002014:	4b75      	ldr	r3, [pc, #468]	; (80021ec <LCD_Display_Dir+0x214>)
 8002016:	889b      	ldrh	r3, [r3, #4]
 8002018:	f245 3210 	movw	r2, #21264	; 0x5310
 800201c:	4293      	cmp	r3, r2
 800201e:	d11e      	bne.n	800205e <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8002020:	4b72      	ldr	r3, [pc, #456]	; (80021ec <LCD_Display_Dir+0x214>)
 8002022:	222c      	movs	r2, #44	; 0x2c
 8002024:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8002026:	4b71      	ldr	r3, [pc, #452]	; (80021ec <LCD_Display_Dir+0x214>)
 8002028:	222a      	movs	r2, #42	; 0x2a
 800202a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 800202c:	4b6f      	ldr	r3, [pc, #444]	; (80021ec <LCD_Display_Dir+0x214>)
 800202e:	222b      	movs	r2, #43	; 0x2b
 8002030:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8002032:	4b6e      	ldr	r3, [pc, #440]	; (80021ec <LCD_Display_Dir+0x214>)
 8002034:	889b      	ldrh	r3, [r3, #4]
 8002036:	f646 0204 	movw	r2, #26628	; 0x6804
 800203a:	4293      	cmp	r3, r2
 800203c:	d006      	beq.n	800204c <LCD_Display_Dir+0x74>
 800203e:	4b6b      	ldr	r3, [pc, #428]	; (80021ec <LCD_Display_Dir+0x214>)
 8002040:	889b      	ldrh	r3, [r3, #4]
 8002042:	f245 3210 	movw	r2, #21264	; 0x5310
 8002046:	4293      	cmp	r3, r2
 8002048:	f040 80c7 	bne.w	80021da <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 800204c:	4b67      	ldr	r3, [pc, #412]	; (80021ec <LCD_Display_Dir+0x214>)
 800204e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002052:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 8002054:	4b65      	ldr	r3, [pc, #404]	; (80021ec <LCD_Display_Dir+0x214>)
 8002056:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800205a:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 800205c:	e0bd      	b.n	80021da <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 800205e:	4b63      	ldr	r3, [pc, #396]	; (80021ec <LCD_Display_Dir+0x214>)
 8002060:	889b      	ldrh	r3, [r3, #4]
 8002062:	f245 5210 	movw	r2, #21776	; 0x5510
 8002066:	4293      	cmp	r3, r2
 8002068:	d114      	bne.n	8002094 <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 800206a:	4b60      	ldr	r3, [pc, #384]	; (80021ec <LCD_Display_Dir+0x214>)
 800206c:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8002070:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8002072:	4b5e      	ldr	r3, [pc, #376]	; (80021ec <LCD_Display_Dir+0x214>)
 8002074:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8002078:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 800207a:	4b5c      	ldr	r3, [pc, #368]	; (80021ec <LCD_Display_Dir+0x214>)
 800207c:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8002080:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 8002082:	4b5a      	ldr	r3, [pc, #360]	; (80021ec <LCD_Display_Dir+0x214>)
 8002084:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002088:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 800208a:	4b58      	ldr	r3, [pc, #352]	; (80021ec <LCD_Display_Dir+0x214>)
 800208c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002090:	805a      	strh	r2, [r3, #2]
 8002092:	e0a3      	b.n	80021dc <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 8002094:	4b55      	ldr	r3, [pc, #340]	; (80021ec <LCD_Display_Dir+0x214>)
 8002096:	889b      	ldrh	r3, [r3, #4]
 8002098:	f641 1263 	movw	r2, #6499	; 0x1963
 800209c:	4293      	cmp	r3, r2
 800209e:	d111      	bne.n	80020c4 <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 80020a0:	4b52      	ldr	r3, [pc, #328]	; (80021ec <LCD_Display_Dir+0x214>)
 80020a2:	222c      	movs	r2, #44	; 0x2c
 80020a4:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 80020a6:	4b51      	ldr	r3, [pc, #324]	; (80021ec <LCD_Display_Dir+0x214>)
 80020a8:	222b      	movs	r2, #43	; 0x2b
 80020aa:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 80020ac:	4b4f      	ldr	r3, [pc, #316]	; (80021ec <LCD_Display_Dir+0x214>)
 80020ae:	222a      	movs	r2, #42	; 0x2a
 80020b0:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 80020b2:	4b4e      	ldr	r3, [pc, #312]	; (80021ec <LCD_Display_Dir+0x214>)
 80020b4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80020b8:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 80020ba:	4b4c      	ldr	r3, [pc, #304]	; (80021ec <LCD_Display_Dir+0x214>)
 80020bc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80020c0:	805a      	strh	r2, [r3, #2]
 80020c2:	e08b      	b.n	80021dc <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 80020c4:	4b49      	ldr	r3, [pc, #292]	; (80021ec <LCD_Display_Dir+0x214>)
 80020c6:	2222      	movs	r2, #34	; 0x22
 80020c8:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 80020ca:	4b48      	ldr	r3, [pc, #288]	; (80021ec <LCD_Display_Dir+0x214>)
 80020cc:	2220      	movs	r2, #32
 80020ce:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 80020d0:	4b46      	ldr	r3, [pc, #280]	; (80021ec <LCD_Display_Dir+0x214>)
 80020d2:	2221      	movs	r2, #33	; 0x21
 80020d4:	819a      	strh	r2, [r3, #12]
 80020d6:	e081      	b.n	80021dc <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 80020d8:	4b44      	ldr	r3, [pc, #272]	; (80021ec <LCD_Display_Dir+0x214>)
 80020da:	2201      	movs	r2, #1
 80020dc:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 80020de:	4b43      	ldr	r3, [pc, #268]	; (80021ec <LCD_Display_Dir+0x214>)
 80020e0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80020e4:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 80020e6:	4b41      	ldr	r3, [pc, #260]	; (80021ec <LCD_Display_Dir+0x214>)
 80020e8:	22f0      	movs	r2, #240	; 0xf0
 80020ea:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 80020ec:	4b3f      	ldr	r3, [pc, #252]	; (80021ec <LCD_Display_Dir+0x214>)
 80020ee:	889b      	ldrh	r3, [r3, #4]
 80020f0:	f249 3241 	movw	r2, #37697	; 0x9341
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d005      	beq.n	8002104 <LCD_Display_Dir+0x12c>
 80020f8:	4b3c      	ldr	r3, [pc, #240]	; (80021ec <LCD_Display_Dir+0x214>)
 80020fa:	889b      	ldrh	r3, [r3, #4]
 80020fc:	f245 3210 	movw	r2, #21264	; 0x5310
 8002100:	4293      	cmp	r3, r2
 8002102:	d109      	bne.n	8002118 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 8002104:	4b39      	ldr	r3, [pc, #228]	; (80021ec <LCD_Display_Dir+0x214>)
 8002106:	222c      	movs	r2, #44	; 0x2c
 8002108:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 800210a:	4b38      	ldr	r3, [pc, #224]	; (80021ec <LCD_Display_Dir+0x214>)
 800210c:	222a      	movs	r2, #42	; 0x2a
 800210e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8002110:	4b36      	ldr	r3, [pc, #216]	; (80021ec <LCD_Display_Dir+0x214>)
 8002112:	222b      	movs	r2, #43	; 0x2b
 8002114:	819a      	strh	r2, [r3, #12]
 8002116:	e04b      	b.n	80021b0 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 8002118:	4b34      	ldr	r3, [pc, #208]	; (80021ec <LCD_Display_Dir+0x214>)
 800211a:	889b      	ldrh	r3, [r3, #4]
 800211c:	f646 0204 	movw	r2, #26628	; 0x6804
 8002120:	4293      	cmp	r3, r2
 8002122:	d109      	bne.n	8002138 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 8002124:	4b31      	ldr	r3, [pc, #196]	; (80021ec <LCD_Display_Dir+0x214>)
 8002126:	222c      	movs	r2, #44	; 0x2c
 8002128:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 800212a:	4b30      	ldr	r3, [pc, #192]	; (80021ec <LCD_Display_Dir+0x214>)
 800212c:	222b      	movs	r2, #43	; 0x2b
 800212e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 8002130:	4b2e      	ldr	r3, [pc, #184]	; (80021ec <LCD_Display_Dir+0x214>)
 8002132:	222a      	movs	r2, #42	; 0x2a
 8002134:	819a      	strh	r2, [r3, #12]
 8002136:	e03b      	b.n	80021b0 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 8002138:	4b2c      	ldr	r3, [pc, #176]	; (80021ec <LCD_Display_Dir+0x214>)
 800213a:	889b      	ldrh	r3, [r3, #4]
 800213c:	f245 5210 	movw	r2, #21776	; 0x5510
 8002140:	4293      	cmp	r3, r2
 8002142:	d114      	bne.n	800216e <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 8002144:	4b29      	ldr	r3, [pc, #164]	; (80021ec <LCD_Display_Dir+0x214>)
 8002146:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800214a:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 800214c:	4b27      	ldr	r3, [pc, #156]	; (80021ec <LCD_Display_Dir+0x214>)
 800214e:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8002152:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8002154:	4b25      	ldr	r3, [pc, #148]	; (80021ec <LCD_Display_Dir+0x214>)
 8002156:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 800215a:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 800215c:	4b23      	ldr	r3, [pc, #140]	; (80021ec <LCD_Display_Dir+0x214>)
 800215e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002162:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 8002164:	4b21      	ldr	r3, [pc, #132]	; (80021ec <LCD_Display_Dir+0x214>)
 8002166:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800216a:	805a      	strh	r2, [r3, #2]
 800216c:	e020      	b.n	80021b0 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 800216e:	4b1f      	ldr	r3, [pc, #124]	; (80021ec <LCD_Display_Dir+0x214>)
 8002170:	889b      	ldrh	r3, [r3, #4]
 8002172:	f641 1263 	movw	r2, #6499	; 0x1963
 8002176:	4293      	cmp	r3, r2
 8002178:	d111      	bne.n	800219e <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 800217a:	4b1c      	ldr	r3, [pc, #112]	; (80021ec <LCD_Display_Dir+0x214>)
 800217c:	222c      	movs	r2, #44	; 0x2c
 800217e:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 8002180:	4b1a      	ldr	r3, [pc, #104]	; (80021ec <LCD_Display_Dir+0x214>)
 8002182:	222a      	movs	r2, #42	; 0x2a
 8002184:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 8002186:	4b19      	ldr	r3, [pc, #100]	; (80021ec <LCD_Display_Dir+0x214>)
 8002188:	222b      	movs	r2, #43	; 0x2b
 800218a:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 800218c:	4b17      	ldr	r3, [pc, #92]	; (80021ec <LCD_Display_Dir+0x214>)
 800218e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002192:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 8002194:	4b15      	ldr	r3, [pc, #84]	; (80021ec <LCD_Display_Dir+0x214>)
 8002196:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800219a:	805a      	strh	r2, [r3, #2]
 800219c:	e008      	b.n	80021b0 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 800219e:	4b13      	ldr	r3, [pc, #76]	; (80021ec <LCD_Display_Dir+0x214>)
 80021a0:	2222      	movs	r2, #34	; 0x22
 80021a2:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 80021a4:	4b11      	ldr	r3, [pc, #68]	; (80021ec <LCD_Display_Dir+0x214>)
 80021a6:	2221      	movs	r2, #33	; 0x21
 80021a8:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 80021aa:	4b10      	ldr	r3, [pc, #64]	; (80021ec <LCD_Display_Dir+0x214>)
 80021ac:	2220      	movs	r2, #32
 80021ae:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 80021b0:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <LCD_Display_Dir+0x214>)
 80021b2:	889b      	ldrh	r3, [r3, #4]
 80021b4:	f646 0204 	movw	r2, #26628	; 0x6804
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d005      	beq.n	80021c8 <LCD_Display_Dir+0x1f0>
 80021bc:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <LCD_Display_Dir+0x214>)
 80021be:	889b      	ldrh	r3, [r3, #4]
 80021c0:	f245 3210 	movw	r2, #21264	; 0x5310
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d109      	bne.n	80021dc <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 80021c8:	4b08      	ldr	r3, [pc, #32]	; (80021ec <LCD_Display_Dir+0x214>)
 80021ca:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80021ce:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <LCD_Display_Dir+0x214>)
 80021d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80021d6:	805a      	strh	r2, [r3, #2]
 80021d8:	e000      	b.n	80021dc <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 80021da:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 80021dc:	2000      	movs	r0, #0
 80021de:	f7ff f87d 	bl	80012dc <LCD_Scan_Dir>
}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20005a88 	.word	0x20005a88

080021f0 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 80021f6:	4b90      	ldr	r3, [pc, #576]	; (8002438 <LCD_Init+0x248>)
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	4a8f      	ldr	r2, [pc, #572]	; (8002438 <LCD_Init+0x248>)
 80021fc:	f043 0308 	orr.w	r3, r3, #8
 8002200:	6193      	str	r3, [r2, #24]
 8002202:	4b8d      	ldr	r3, [pc, #564]	; (8002438 <LCD_Init+0x248>)
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	f003 0308 	and.w	r3, r3, #8
 800220a:	607b      	str	r3, [r7, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 800220e:	4b8a      	ldr	r3, [pc, #552]	; (8002438 <LCD_Init+0x248>)
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	4a89      	ldr	r2, [pc, #548]	; (8002438 <LCD_Init+0x248>)
 8002214:	f043 0310 	orr.w	r3, r3, #16
 8002218:	6193      	str	r3, [r2, #24]
 800221a:	4b87      	ldr	r3, [pc, #540]	; (8002438 <LCD_Init+0x248>)
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	f003 0310 	and.w	r3, r3, #16
 8002222:	603b      	str	r3, [r7, #0]
 8002224:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 8002226:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800222a:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 800222c:	2301      	movs	r3, #1
 800222e:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 8002230:	2301      	movs	r3, #1
 8002232:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 8002234:	2303      	movs	r3, #3
 8002236:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 8002238:	f107 0308 	add.w	r3, r7, #8
 800223c:	4619      	mov	r1, r3
 800223e:	487f      	ldr	r0, [pc, #508]	; (800243c <LCD_Init+0x24c>)
 8002240:	f005 fef8 	bl	8008034 <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 8002244:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002248:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 800224a:	f107 0308 	add.w	r3, r7, #8
 800224e:	4619      	mov	r1, r3
 8002250:	487b      	ldr	r0, [pc, #492]	; (8002440 <LCD_Init+0x250>)
 8002252:	f005 feef 	bl	8008034 <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 8002256:	2032      	movs	r0, #50	; 0x32
 8002258:	f005 fcb4 	bl	8007bc4 <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 800225c:	2101      	movs	r1, #1
 800225e:	2000      	movs	r0, #0
 8002260:	f7fe fd2a 	bl	8000cb8 <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 8002264:	2032      	movs	r0, #50	; 0x32
 8002266:	f005 fcad 	bl	8007bc4 <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 800226a:	2000      	movs	r0, #0
 800226c:	f7fe fd4e 	bl	8000d0c <LCD_ReadReg>
 8002270:	4603      	mov	r3, r0
 8002272:	461a      	mov	r2, r3
 8002274:	4b73      	ldr	r3, [pc, #460]	; (8002444 <LCD_Init+0x254>)
 8002276:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8002278:	4b72      	ldr	r3, [pc, #456]	; (8002444 <LCD_Init+0x254>)
 800227a:	889b      	ldrh	r3, [r3, #4]
 800227c:	2bfe      	cmp	r3, #254	; 0xfe
 800227e:	d90b      	bls.n	8002298 <LCD_Init+0xa8>
 8002280:	4b70      	ldr	r3, [pc, #448]	; (8002444 <LCD_Init+0x254>)
 8002282:	889b      	ldrh	r3, [r3, #4]
 8002284:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002288:	4293      	cmp	r3, r2
 800228a:	d005      	beq.n	8002298 <LCD_Init+0xa8>
 800228c:	4b6d      	ldr	r3, [pc, #436]	; (8002444 <LCD_Init+0x254>)
 800228e:	889b      	ldrh	r3, [r3, #4]
 8002290:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8002294:	f040 80c8 	bne.w	8002428 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8002298:	20d3      	movs	r0, #211	; 0xd3
 800229a:	f7fe fc81 	bl	8000ba0 <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 800229e:	f7fe fcc7 	bl	8000c30 <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 80022a2:	f7fe fcc5 	bl	8000c30 <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 80022a6:	f7fe fcc3 	bl	8000c30 <LCD_RD_DATA>
 80022aa:	4603      	mov	r3, r0
 80022ac:	461a      	mov	r2, r3
 80022ae:	4b65      	ldr	r3, [pc, #404]	; (8002444 <LCD_Init+0x254>)
 80022b0:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 80022b2:	4b64      	ldr	r3, [pc, #400]	; (8002444 <LCD_Init+0x254>)
 80022b4:	889b      	ldrh	r3, [r3, #4]
 80022b6:	021b      	lsls	r3, r3, #8
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	4b62      	ldr	r3, [pc, #392]	; (8002444 <LCD_Init+0x254>)
 80022bc:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 80022be:	f7fe fcb7 	bl	8000c30 <LCD_RD_DATA>
 80022c2:	4603      	mov	r3, r0
 80022c4:	461a      	mov	r2, r3
 80022c6:	4b5f      	ldr	r3, [pc, #380]	; (8002444 <LCD_Init+0x254>)
 80022c8:	889b      	ldrh	r3, [r3, #4]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	4b5d      	ldr	r3, [pc, #372]	; (8002444 <LCD_Init+0x254>)
 80022d0:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 80022d2:	4b5c      	ldr	r3, [pc, #368]	; (8002444 <LCD_Init+0x254>)
 80022d4:	889b      	ldrh	r3, [r3, #4]
 80022d6:	f249 3241 	movw	r2, #37697	; 0x9341
 80022da:	4293      	cmp	r3, r2
 80022dc:	f000 80a4 	beq.w	8002428 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 80022e0:	20bf      	movs	r0, #191	; 0xbf
 80022e2:	f7fe fc5d 	bl	8000ba0 <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 80022e6:	f7fe fca3 	bl	8000c30 <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 80022ea:	f7fe fca1 	bl	8000c30 <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 80022ee:	f7fe fc9f 	bl	8000c30 <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 80022f2:	f7fe fc9d 	bl	8000c30 <LCD_RD_DATA>
 80022f6:	4603      	mov	r3, r0
 80022f8:	461a      	mov	r2, r3
 80022fa:	4b52      	ldr	r3, [pc, #328]	; (8002444 <LCD_Init+0x254>)
 80022fc:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 80022fe:	4b51      	ldr	r3, [pc, #324]	; (8002444 <LCD_Init+0x254>)
 8002300:	889b      	ldrh	r3, [r3, #4]
 8002302:	021b      	lsls	r3, r3, #8
 8002304:	b29a      	uxth	r2, r3
 8002306:	4b4f      	ldr	r3, [pc, #316]	; (8002444 <LCD_Init+0x254>)
 8002308:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 800230a:	f7fe fc91 	bl	8000c30 <LCD_RD_DATA>
 800230e:	4603      	mov	r3, r0
 8002310:	461a      	mov	r2, r3
 8002312:	4b4c      	ldr	r3, [pc, #304]	; (8002444 <LCD_Init+0x254>)
 8002314:	889b      	ldrh	r3, [r3, #4]
 8002316:	4313      	orrs	r3, r2
 8002318:	b29a      	uxth	r2, r3
 800231a:	4b4a      	ldr	r3, [pc, #296]	; (8002444 <LCD_Init+0x254>)
 800231c:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 800231e:	4b49      	ldr	r3, [pc, #292]	; (8002444 <LCD_Init+0x254>)
 8002320:	889b      	ldrh	r3, [r3, #4]
 8002322:	f646 0204 	movw	r2, #26628	; 0x6804
 8002326:	4293      	cmp	r3, r2
 8002328:	d07e      	beq.n	8002428 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 800232a:	20d4      	movs	r0, #212	; 0xd4
 800232c:	f7fe fc38 	bl	8000ba0 <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 8002330:	f7fe fc7e 	bl	8000c30 <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 8002334:	f7fe fc7c 	bl	8000c30 <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 8002338:	f7fe fc7a 	bl	8000c30 <LCD_RD_DATA>
 800233c:	4603      	mov	r3, r0
 800233e:	461a      	mov	r2, r3
 8002340:	4b40      	ldr	r3, [pc, #256]	; (8002444 <LCD_Init+0x254>)
 8002342:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 8002344:	4b3f      	ldr	r3, [pc, #252]	; (8002444 <LCD_Init+0x254>)
 8002346:	889b      	ldrh	r3, [r3, #4]
 8002348:	021b      	lsls	r3, r3, #8
 800234a:	b29a      	uxth	r2, r3
 800234c:	4b3d      	ldr	r3, [pc, #244]	; (8002444 <LCD_Init+0x254>)
 800234e:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 8002350:	f7fe fc6e 	bl	8000c30 <LCD_RD_DATA>
 8002354:	4603      	mov	r3, r0
 8002356:	461a      	mov	r2, r3
 8002358:	4b3a      	ldr	r3, [pc, #232]	; (8002444 <LCD_Init+0x254>)
 800235a:	889b      	ldrh	r3, [r3, #4]
 800235c:	4313      	orrs	r3, r2
 800235e:	b29a      	uxth	r2, r3
 8002360:	4b38      	ldr	r3, [pc, #224]	; (8002444 <LCD_Init+0x254>)
 8002362:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8002364:	4b37      	ldr	r3, [pc, #220]	; (8002444 <LCD_Init+0x254>)
 8002366:	889b      	ldrh	r3, [r3, #4]
 8002368:	f245 3210 	movw	r2, #21264	; 0x5310
 800236c:	4293      	cmp	r3, r2
 800236e:	d05b      	beq.n	8002428 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 8002370:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8002374:	f7fe fc14 	bl	8000ba0 <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 8002378:	f7fe fc5a 	bl	8000c30 <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 800237c:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8002380:	f7fe fc0e 	bl	8000ba0 <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 8002384:	f7fe fc54 	bl	8000c30 <LCD_RD_DATA>
 8002388:	4603      	mov	r3, r0
 800238a:	461a      	mov	r2, r3
 800238c:	4b2d      	ldr	r3, [pc, #180]	; (8002444 <LCD_Init+0x254>)
 800238e:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 8002390:	4b2c      	ldr	r3, [pc, #176]	; (8002444 <LCD_Init+0x254>)
 8002392:	889b      	ldrh	r3, [r3, #4]
 8002394:	021b      	lsls	r3, r3, #8
 8002396:	b29a      	uxth	r2, r3
 8002398:	4b2a      	ldr	r3, [pc, #168]	; (8002444 <LCD_Init+0x254>)
 800239a:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 800239c:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 80023a0:	f7fe fbfe 	bl	8000ba0 <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 80023a4:	f7fe fc44 	bl	8000c30 <LCD_RD_DATA>
 80023a8:	4603      	mov	r3, r0
 80023aa:	461a      	mov	r2, r3
 80023ac:	4b25      	ldr	r3, [pc, #148]	; (8002444 <LCD_Init+0x254>)
 80023ae:	889b      	ldrh	r3, [r3, #4]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	4b23      	ldr	r3, [pc, #140]	; (8002444 <LCD_Init+0x254>)
 80023b6:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 80023b8:	4b22      	ldr	r3, [pc, #136]	; (8002444 <LCD_Init+0x254>)
 80023ba:	889b      	ldrh	r3, [r3, #4]
 80023bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023c0:	d103      	bne.n	80023ca <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 80023c2:	4b20      	ldr	r3, [pc, #128]	; (8002444 <LCD_Init+0x254>)
 80023c4:	f245 5210 	movw	r2, #21776	; 0x5510
 80023c8:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 80023ca:	4b1e      	ldr	r3, [pc, #120]	; (8002444 <LCD_Init+0x254>)
 80023cc:	889b      	ldrh	r3, [r3, #4]
 80023ce:	f245 5210 	movw	r2, #21776	; 0x5510
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d028      	beq.n	8002428 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 80023d6:	20a1      	movs	r0, #161	; 0xa1
 80023d8:	f7fe fbe2 	bl	8000ba0 <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 80023dc:	f7fe fc28 	bl	8000c30 <LCD_RD_DATA>
 80023e0:	4603      	mov	r3, r0
 80023e2:	461a      	mov	r2, r3
 80023e4:	4b17      	ldr	r3, [pc, #92]	; (8002444 <LCD_Init+0x254>)
 80023e6:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 80023e8:	f7fe fc22 	bl	8000c30 <LCD_RD_DATA>
 80023ec:	4603      	mov	r3, r0
 80023ee:	461a      	mov	r2, r3
 80023f0:	4b14      	ldr	r3, [pc, #80]	; (8002444 <LCD_Init+0x254>)
 80023f2:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 80023f4:	4b13      	ldr	r3, [pc, #76]	; (8002444 <LCD_Init+0x254>)
 80023f6:	889b      	ldrh	r3, [r3, #4]
 80023f8:	021b      	lsls	r3, r3, #8
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	4b11      	ldr	r3, [pc, #68]	; (8002444 <LCD_Init+0x254>)
 80023fe:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 8002400:	f7fe fc16 	bl	8000c30 <LCD_RD_DATA>
 8002404:	4603      	mov	r3, r0
 8002406:	461a      	mov	r2, r3
 8002408:	4b0e      	ldr	r3, [pc, #56]	; (8002444 <LCD_Init+0x254>)
 800240a:	889b      	ldrh	r3, [r3, #4]
 800240c:	4313      	orrs	r3, r2
 800240e:	b29a      	uxth	r2, r3
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <LCD_Init+0x254>)
 8002412:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 8002414:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <LCD_Init+0x254>)
 8002416:	889b      	ldrh	r3, [r3, #4]
 8002418:	f245 7261 	movw	r2, #22369	; 0x5761
 800241c:	4293      	cmp	r3, r2
 800241e:	d103      	bne.n	8002428 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8002420:	4b08      	ldr	r3, [pc, #32]	; (8002444 <LCD_Init+0x254>)
 8002422:	f641 1263 	movw	r2, #6499	; 0x1963
 8002426:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 8002428:	4b06      	ldr	r3, [pc, #24]	; (8002444 <LCD_Init+0x254>)
 800242a:	889b      	ldrh	r3, [r3, #4]
 800242c:	f249 3241 	movw	r2, #37697	; 0x9341
 8002430:	4293      	cmp	r3, r2
 8002432:	f040 811f 	bne.w	8002674 <LCD_Init+0x484>
 8002436:	e007      	b.n	8002448 <LCD_Init+0x258>
 8002438:	40021000 	.word	0x40021000
 800243c:	40011000 	.word	0x40011000
 8002440:	40010c00 	.word	0x40010c00
 8002444:	20005a88 	.word	0x20005a88
			{
		LCD_WR_REG(0xCF);
 8002448:	20cf      	movs	r0, #207	; 0xcf
 800244a:	f7fe fba9 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800244e:	2000      	movs	r0, #0
 8002450:	f7fe fbca 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 8002454:	20c1      	movs	r0, #193	; 0xc1
 8002456:	f7fe fbc7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 800245a:	2030      	movs	r0, #48	; 0x30
 800245c:	f7fe fbc4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 8002460:	20ed      	movs	r0, #237	; 0xed
 8002462:	f7fe fb9d 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 8002466:	2064      	movs	r0, #100	; 0x64
 8002468:	f7fe fbbe 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 800246c:	2003      	movs	r0, #3
 800246e:	f7fe fbbb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 8002472:	2012      	movs	r0, #18
 8002474:	f7fe fbb8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 8002478:	2081      	movs	r0, #129	; 0x81
 800247a:	f7fe fbb5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 800247e:	20e8      	movs	r0, #232	; 0xe8
 8002480:	f7fe fb8e 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 8002484:	2085      	movs	r0, #133	; 0x85
 8002486:	f7fe fbaf 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 800248a:	2010      	movs	r0, #16
 800248c:	f7fe fbac 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002490:	207a      	movs	r0, #122	; 0x7a
 8002492:	f7fe fba9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 8002496:	20cb      	movs	r0, #203	; 0xcb
 8002498:	f7fe fb82 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 800249c:	2039      	movs	r0, #57	; 0x39
 800249e:	f7fe fba3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 80024a2:	202c      	movs	r0, #44	; 0x2c
 80024a4:	f7fe fba0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024a8:	2000      	movs	r0, #0
 80024aa:	f7fe fb9d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 80024ae:	2034      	movs	r0, #52	; 0x34
 80024b0:	f7fe fb9a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 80024b4:	2002      	movs	r0, #2
 80024b6:	f7fe fb97 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 80024ba:	20f7      	movs	r0, #247	; 0xf7
 80024bc:	f7fe fb70 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 80024c0:	2020      	movs	r0, #32
 80024c2:	f7fe fb91 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 80024c6:	20ea      	movs	r0, #234	; 0xea
 80024c8:	f7fe fb6a 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80024cc:	2000      	movs	r0, #0
 80024ce:	f7fe fb8b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80024d2:	2000      	movs	r0, #0
 80024d4:	f7fe fb88 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 80024d8:	20c0      	movs	r0, #192	; 0xc0
 80024da:	f7fe fb61 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 80024de:	201b      	movs	r0, #27
 80024e0:	f7fe fb82 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 80024e4:	20c1      	movs	r0, #193	; 0xc1
 80024e6:	f7fe fb5b 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 80024ea:	2001      	movs	r0, #1
 80024ec:	f7fe fb7c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 80024f0:	20c5      	movs	r0, #197	; 0xc5
 80024f2:	f7fe fb55 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 80024f6:	2030      	movs	r0, #48	; 0x30
 80024f8:	f7fe fb76 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 80024fc:	2030      	movs	r0, #48	; 0x30
 80024fe:	f7fe fb73 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 8002502:	20c7      	movs	r0, #199	; 0xc7
 8002504:	f7fe fb4c 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 8002508:	20b7      	movs	r0, #183	; 0xb7
 800250a:	f7fe fb6d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 800250e:	2036      	movs	r0, #54	; 0x36
 8002510:	f7fe fb46 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 8002514:	2048      	movs	r0, #72	; 0x48
 8002516:	f7fe fb67 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 800251a:	203a      	movs	r0, #58	; 0x3a
 800251c:	f7fe fb40 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 8002520:	2055      	movs	r0, #85	; 0x55
 8002522:	f7fe fb61 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 8002526:	20b1      	movs	r0, #177	; 0xb1
 8002528:	f7fe fb3a 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800252c:	2000      	movs	r0, #0
 800252e:	f7fe fb5b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 8002532:	201a      	movs	r0, #26
 8002534:	f7fe fb58 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 8002538:	20b6      	movs	r0, #182	; 0xb6
 800253a:	f7fe fb31 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 800253e:	200a      	movs	r0, #10
 8002540:	f7fe fb52 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8002544:	20a2      	movs	r0, #162	; 0xa2
 8002546:	f7fe fb4f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 800254a:	20f2      	movs	r0, #242	; 0xf2
 800254c:	f7fe fb28 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002550:	2000      	movs	r0, #0
 8002552:	f7fe fb49 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 8002556:	2026      	movs	r0, #38	; 0x26
 8002558:	f7fe fb22 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 800255c:	2001      	movs	r0, #1
 800255e:	f7fe fb43 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 8002562:	20e0      	movs	r0, #224	; 0xe0
 8002564:	f7fe fb1c 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 8002568:	200f      	movs	r0, #15
 800256a:	f7fe fb3d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 800256e:	202a      	movs	r0, #42	; 0x2a
 8002570:	f7fe fb3a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 8002574:	2028      	movs	r0, #40	; 0x28
 8002576:	f7fe fb37 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 800257a:	2008      	movs	r0, #8
 800257c:	f7fe fb34 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 8002580:	200e      	movs	r0, #14
 8002582:	f7fe fb31 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 8002586:	2008      	movs	r0, #8
 8002588:	f7fe fb2e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 800258c:	2054      	movs	r0, #84	; 0x54
 800258e:	f7fe fb2b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 8002592:	20a9      	movs	r0, #169	; 0xa9
 8002594:	f7fe fb28 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8002598:	2043      	movs	r0, #67	; 0x43
 800259a:	f7fe fb25 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 800259e:	200a      	movs	r0, #10
 80025a0:	f7fe fb22 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 80025a4:	200f      	movs	r0, #15
 80025a6:	f7fe fb1f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025aa:	2000      	movs	r0, #0
 80025ac:	f7fe fb1c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025b0:	2000      	movs	r0, #0
 80025b2:	f7fe fb19 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025b6:	2000      	movs	r0, #0
 80025b8:	f7fe fb16 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80025bc:	2000      	movs	r0, #0
 80025be:	f7fe fb13 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 80025c2:	20e1      	movs	r0, #225	; 0xe1
 80025c4:	f7fe faec 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80025c8:	2000      	movs	r0, #0
 80025ca:	f7fe fb0d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 80025ce:	2015      	movs	r0, #21
 80025d0:	f7fe fb0a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 80025d4:	2017      	movs	r0, #23
 80025d6:	f7fe fb07 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 80025da:	2007      	movs	r0, #7
 80025dc:	f7fe fb04 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 80025e0:	2011      	movs	r0, #17
 80025e2:	f7fe fb01 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 80025e6:	2006      	movs	r0, #6
 80025e8:	f7fe fafe 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 80025ec:	202b      	movs	r0, #43	; 0x2b
 80025ee:	f7fe fafb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 80025f2:	2056      	movs	r0, #86	; 0x56
 80025f4:	f7fe faf8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80025f8:	203c      	movs	r0, #60	; 0x3c
 80025fa:	f7fe faf5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 80025fe:	2005      	movs	r0, #5
 8002600:	f7fe faf2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8002604:	2010      	movs	r0, #16
 8002606:	f7fe faef 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 800260a:	200f      	movs	r0, #15
 800260c:	f7fe faec 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002610:	203f      	movs	r0, #63	; 0x3f
 8002612:	f7fe fae9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002616:	203f      	movs	r0, #63	; 0x3f
 8002618:	f7fe fae6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 800261c:	200f      	movs	r0, #15
 800261e:	f7fe fae3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 8002622:	202b      	movs	r0, #43	; 0x2b
 8002624:	f7fe fabc 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002628:	2000      	movs	r0, #0
 800262a:	f7fe fadd 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800262e:	2000      	movs	r0, #0
 8002630:	f7fe fada 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002634:	2001      	movs	r0, #1
 8002636:	f7fe fad7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 800263a:	203f      	movs	r0, #63	; 0x3f
 800263c:	f7fe fad4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 8002640:	202a      	movs	r0, #42	; 0x2a
 8002642:	f7fe faad 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002646:	2000      	movs	r0, #0
 8002648:	f7fe face 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800264c:	2000      	movs	r0, #0
 800264e:	f7fe facb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002652:	2000      	movs	r0, #0
 8002654:	f7fe fac8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 8002658:	20ef      	movs	r0, #239	; 0xef
 800265a:	f7fe fac5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 800265e:	2011      	movs	r0, #17
 8002660:	f7fe fa9e 	bl	8000ba0 <LCD_WR_REG>
		HAL_Delay(120);
 8002664:	2078      	movs	r0, #120	; 0x78
 8002666:	f005 faad 	bl	8007bc4 <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 800266a:	2029      	movs	r0, #41	; 0x29
 800266c:	f7fe fa98 	bl	8000ba0 <LCD_WR_REG>
 8002670:	f003 bcd8 	b.w	8006024 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 8002674:	4b58      	ldr	r3, [pc, #352]	; (80027d8 <LCD_Init+0x5e8>)
 8002676:	889b      	ldrh	r3, [r3, #4]
 8002678:	f646 0204 	movw	r2, #26628	; 0x6804
 800267c:	4293      	cmp	r3, r2
 800267e:	f040 80ad 	bne.w	80027dc <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 8002682:	2011      	movs	r0, #17
 8002684:	f7fe fa8c 	bl	8000ba0 <LCD_WR_REG>
		HAL_Delay(20);
 8002688:	2014      	movs	r0, #20
 800268a:	f005 fa9b 	bl	8007bc4 <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 800268e:	20d0      	movs	r0, #208	; 0xd0
 8002690:	f7fe fa86 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 8002694:	2007      	movs	r0, #7
 8002696:	f7fe faa7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 800269a:	2042      	movs	r0, #66	; 0x42
 800269c:	f7fe faa4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 80026a0:	201d      	movs	r0, #29
 80026a2:	f7fe faa1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 80026a6:	20d1      	movs	r0, #209	; 0xd1
 80026a8:	f7fe fa7a 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80026ac:	2000      	movs	r0, #0
 80026ae:	f7fe fa9b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 80026b2:	201a      	movs	r0, #26
 80026b4:	f7fe fa98 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 80026b8:	2009      	movs	r0, #9
 80026ba:	f7fe fa95 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 80026be:	20d2      	movs	r0, #210	; 0xd2
 80026c0:	f7fe fa6e 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 80026c4:	2001      	movs	r0, #1
 80026c6:	f7fe fa8f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 80026ca:	2022      	movs	r0, #34	; 0x22
 80026cc:	f7fe fa8c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 80026d0:	20c0      	movs	r0, #192	; 0xc0
 80026d2:	f7fe fa65 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 80026d6:	2010      	movs	r0, #16
 80026d8:	f7fe fa86 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 80026dc:	203b      	movs	r0, #59	; 0x3b
 80026de:	f7fe fa83 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80026e2:	2000      	movs	r0, #0
 80026e4:	f7fe fa80 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 80026e8:	2002      	movs	r0, #2
 80026ea:	f7fe fa7d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 80026ee:	2011      	movs	r0, #17
 80026f0:	f7fe fa7a 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 80026f4:	20c5      	movs	r0, #197	; 0xc5
 80026f6:	f7fe fa53 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 80026fa:	2003      	movs	r0, #3
 80026fc:	f7fe fa74 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 8002700:	20c8      	movs	r0, #200	; 0xc8
 8002702:	f7fe fa4d 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002706:	2000      	movs	r0, #0
 8002708:	f7fe fa6e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 800270c:	2025      	movs	r0, #37	; 0x25
 800270e:	f7fe fa6b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 8002712:	2021      	movs	r0, #33	; 0x21
 8002714:	f7fe fa68 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 8002718:	2005      	movs	r0, #5
 800271a:	f7fe fa65 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800271e:	2000      	movs	r0, #0
 8002720:	f7fe fa62 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 8002724:	200a      	movs	r0, #10
 8002726:	f7fe fa5f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 800272a:	2065      	movs	r0, #101	; 0x65
 800272c:	f7fe fa5c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8002730:	2025      	movs	r0, #37	; 0x25
 8002732:	f7fe fa59 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 8002736:	2077      	movs	r0, #119	; 0x77
 8002738:	f7fe fa56 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 800273c:	2050      	movs	r0, #80	; 0x50
 800273e:	f7fe fa53 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 8002742:	200f      	movs	r0, #15
 8002744:	f7fe fa50 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002748:	2000      	movs	r0, #0
 800274a:	f7fe fa4d 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 800274e:	20f8      	movs	r0, #248	; 0xf8
 8002750:	f7fe fa26 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8002754:	2001      	movs	r0, #1
 8002756:	f7fe fa47 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 800275a:	20fe      	movs	r0, #254	; 0xfe
 800275c:	f7fe fa20 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002760:	2000      	movs	r0, #0
 8002762:	f7fe fa41 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8002766:	2002      	movs	r0, #2
 8002768:	f7fe fa3e 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 800276c:	2020      	movs	r0, #32
 800276e:	f7fe fa17 	bl	8000ba0 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 8002772:	2036      	movs	r0, #54	; 0x36
 8002774:	f7fe fa14 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 8002778:	2008      	movs	r0, #8
 800277a:	f7fe fa35 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 800277e:	203a      	movs	r0, #58	; 0x3a
 8002780:	f7fe fa0e 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 8002784:	2055      	movs	r0, #85	; 0x55
 8002786:	f7fe fa2f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 800278a:	202b      	movs	r0, #43	; 0x2b
 800278c:	f7fe fa08 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8002790:	2000      	movs	r0, #0
 8002792:	f7fe fa29 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8002796:	2000      	movs	r0, #0
 8002798:	f7fe fa26 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 800279c:	2001      	movs	r0, #1
 800279e:	f7fe fa23 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 80027a2:	203f      	movs	r0, #63	; 0x3f
 80027a4:	f7fe fa20 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 80027a8:	202a      	movs	r0, #42	; 0x2a
 80027aa:	f7fe f9f9 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80027ae:	2000      	movs	r0, #0
 80027b0:	f7fe fa1a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80027b4:	2000      	movs	r0, #0
 80027b6:	f7fe fa17 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 80027ba:	2001      	movs	r0, #1
 80027bc:	f7fe fa14 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 80027c0:	20df      	movs	r0, #223	; 0xdf
 80027c2:	f7fe fa11 	bl	8000be8 <LCD_WR_DATAX>
		HAL_Delay(120);
 80027c6:	2078      	movs	r0, #120	; 0x78
 80027c8:	f005 f9fc 	bl	8007bc4 <HAL_Delay>
		LCD_WR_REG(0X29);
 80027cc:	2029      	movs	r0, #41	; 0x29
 80027ce:	f7fe f9e7 	bl	8000ba0 <LCD_WR_REG>
 80027d2:	f003 bc27 	b.w	8006024 <LCD_Init+0x3e34>
 80027d6:	bf00      	nop
 80027d8:	20005a88 	.word	0x20005a88
	} else if (lcddev.id == 0x5310) {
 80027dc:	4b03      	ldr	r3, [pc, #12]	; (80027ec <LCD_Init+0x5fc>)
 80027de:	889b      	ldrh	r3, [r3, #4]
 80027e0:	f245 3210 	movw	r2, #21264	; 0x5310
 80027e4:	4293      	cmp	r3, r2
 80027e6:	f040 877c 	bne.w	80036e2 <LCD_Init+0x14f2>
 80027ea:	e001      	b.n	80027f0 <LCD_Init+0x600>
 80027ec:	20005a88 	.word	0x20005a88
		LCD_WR_REG(0xED);
 80027f0:	20ed      	movs	r0, #237	; 0xed
 80027f2:	f7fe f9d5 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 80027f6:	2001      	movs	r0, #1
 80027f8:	f7fe f9f6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 80027fc:	20fe      	movs	r0, #254	; 0xfe
 80027fe:	f7fe f9f3 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 8002802:	20ee      	movs	r0, #238	; 0xee
 8002804:	f7fe f9cc 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 8002808:	20de      	movs	r0, #222	; 0xde
 800280a:	f7fe f9ed 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 800280e:	2021      	movs	r0, #33	; 0x21
 8002810:	f7fe f9ea 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 8002814:	20f1      	movs	r0, #241	; 0xf1
 8002816:	f7fe f9c3 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 800281a:	2001      	movs	r0, #1
 800281c:	f7fe f9e4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 8002820:	20df      	movs	r0, #223	; 0xdf
 8002822:	f7fe f9bd 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 8002826:	2010      	movs	r0, #16
 8002828:	f7fe f9de 	bl	8000be8 <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 800282c:	20c4      	movs	r0, #196	; 0xc4
 800282e:	f7fe f9b7 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 8002832:	208f      	movs	r0, #143	; 0x8f
 8002834:	f7fe f9d8 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002838:	20c6      	movs	r0, #198	; 0xc6
 800283a:	f7fe f9b1 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800283e:	2000      	movs	r0, #0
 8002840:	f7fe f9d2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8002844:	20e2      	movs	r0, #226	; 0xe2
 8002846:	f7fe f9cf 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 800284a:	20e2      	movs	r0, #226	; 0xe2
 800284c:	f7fe f9cc 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8002850:	20e2      	movs	r0, #226	; 0xe2
 8002852:	f7fe f9c9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 8002856:	20bf      	movs	r0, #191	; 0xbf
 8002858:	f7fe f9a2 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 800285c:	20aa      	movs	r0, #170	; 0xaa
 800285e:	f7fe f9c3 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 8002862:	20b0      	movs	r0, #176	; 0xb0
 8002864:	f7fe f99c 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 8002868:	200d      	movs	r0, #13
 800286a:	f7fe f9bd 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800286e:	2000      	movs	r0, #0
 8002870:	f7fe f9ba 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 8002874:	200d      	movs	r0, #13
 8002876:	f7fe f9b7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800287a:	2000      	movs	r0, #0
 800287c:	f7fe f9b4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8002880:	2011      	movs	r0, #17
 8002882:	f7fe f9b1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002886:	2000      	movs	r0, #0
 8002888:	f7fe f9ae 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 800288c:	2019      	movs	r0, #25
 800288e:	f7fe f9ab 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002892:	2000      	movs	r0, #0
 8002894:	f7fe f9a8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002898:	2021      	movs	r0, #33	; 0x21
 800289a:	f7fe f9a5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800289e:	2000      	movs	r0, #0
 80028a0:	f7fe f9a2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 80028a4:	202d      	movs	r0, #45	; 0x2d
 80028a6:	f7fe f99f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028aa:	2000      	movs	r0, #0
 80028ac:	f7fe f99c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 80028b0:	203d      	movs	r0, #61	; 0x3d
 80028b2:	f7fe f999 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028b6:	2000      	movs	r0, #0
 80028b8:	f7fe f996 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 80028bc:	205d      	movs	r0, #93	; 0x5d
 80028be:	f7fe f993 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028c2:	2000      	movs	r0, #0
 80028c4:	f7fe f990 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 80028c8:	205d      	movs	r0, #93	; 0x5d
 80028ca:	f7fe f98d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ce:	2000      	movs	r0, #0
 80028d0:	f7fe f98a 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 80028d4:	20b1      	movs	r0, #177	; 0xb1
 80028d6:	f7fe f963 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 80028da:	2080      	movs	r0, #128	; 0x80
 80028dc:	f7fe f984 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028e0:	2000      	movs	r0, #0
 80028e2:	f7fe f981 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 80028e6:	208b      	movs	r0, #139	; 0x8b
 80028e8:	f7fe f97e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028ec:	2000      	movs	r0, #0
 80028ee:	f7fe f97b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 80028f2:	2096      	movs	r0, #150	; 0x96
 80028f4:	f7fe f978 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80028f8:	2000      	movs	r0, #0
 80028fa:	f7fe f975 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 80028fe:	20b2      	movs	r0, #178	; 0xb2
 8002900:	f7fe f94e 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002904:	2000      	movs	r0, #0
 8002906:	f7fe f96f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800290a:	2000      	movs	r0, #0
 800290c:	f7fe f96c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8002910:	2002      	movs	r0, #2
 8002912:	f7fe f969 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002916:	2000      	movs	r0, #0
 8002918:	f7fe f966 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 800291c:	2003      	movs	r0, #3
 800291e:	f7fe f963 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002922:	2000      	movs	r0, #0
 8002924:	f7fe f960 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 8002928:	20b3      	movs	r0, #179	; 0xb3
 800292a:	f7fe f939 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800292e:	2000      	movs	r0, #0
 8002930:	f7fe f95a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002934:	2000      	movs	r0, #0
 8002936:	f7fe f957 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800293a:	2000      	movs	r0, #0
 800293c:	f7fe f954 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002940:	2000      	movs	r0, #0
 8002942:	f7fe f951 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002946:	2000      	movs	r0, #0
 8002948:	f7fe f94e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800294c:	2000      	movs	r0, #0
 800294e:	f7fe f94b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002952:	2000      	movs	r0, #0
 8002954:	f7fe f948 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002958:	2000      	movs	r0, #0
 800295a:	f7fe f945 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800295e:	2000      	movs	r0, #0
 8002960:	f7fe f942 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002964:	2000      	movs	r0, #0
 8002966:	f7fe f93f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800296a:	2000      	movs	r0, #0
 800296c:	f7fe f93c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002970:	2000      	movs	r0, #0
 8002972:	f7fe f939 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002976:	2000      	movs	r0, #0
 8002978:	f7fe f936 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800297c:	2000      	movs	r0, #0
 800297e:	f7fe f933 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002982:	2000      	movs	r0, #0
 8002984:	f7fe f930 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002988:	2000      	movs	r0, #0
 800298a:	f7fe f92d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800298e:	2000      	movs	r0, #0
 8002990:	f7fe f92a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002994:	2000      	movs	r0, #0
 8002996:	f7fe f927 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800299a:	2000      	movs	r0, #0
 800299c:	f7fe f924 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029a0:	2000      	movs	r0, #0
 80029a2:	f7fe f921 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029a6:	2000      	movs	r0, #0
 80029a8:	f7fe f91e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ac:	2000      	movs	r0, #0
 80029ae:	f7fe f91b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029b2:	2000      	movs	r0, #0
 80029b4:	f7fe f918 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029b8:	2000      	movs	r0, #0
 80029ba:	f7fe f915 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 80029be:	20b4      	movs	r0, #180	; 0xb4
 80029c0:	f7fe f8ee 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 80029c4:	208b      	movs	r0, #139	; 0x8b
 80029c6:	f7fe f90f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029ca:	2000      	movs	r0, #0
 80029cc:	f7fe f90c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 80029d0:	2096      	movs	r0, #150	; 0x96
 80029d2:	f7fe f909 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029d6:	2000      	movs	r0, #0
 80029d8:	f7fe f906 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 80029dc:	20a1      	movs	r0, #161	; 0xa1
 80029de:	f7fe f903 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029e2:	2000      	movs	r0, #0
 80029e4:	f7fe f900 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 80029e8:	20b5      	movs	r0, #181	; 0xb5
 80029ea:	f7fe f8d9 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 80029ee:	2002      	movs	r0, #2
 80029f0:	f7fe f8fa 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80029f4:	2000      	movs	r0, #0
 80029f6:	f7fe f8f7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 80029fa:	2003      	movs	r0, #3
 80029fc:	f7fe f8f4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a00:	2000      	movs	r0, #0
 8002a02:	f7fe f8f1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8002a06:	2004      	movs	r0, #4
 8002a08:	f7fe f8ee 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	f7fe f8eb 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 8002a12:	20b6      	movs	r0, #182	; 0xb6
 8002a14:	f7fe f8c4 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002a18:	2000      	movs	r0, #0
 8002a1a:	f7fe f8e5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a1e:	2000      	movs	r0, #0
 8002a20:	f7fe f8e2 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 8002a24:	20b7      	movs	r0, #183	; 0xb7
 8002a26:	f7fe f8bb 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	f7fe f8dc 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a30:	2000      	movs	r0, #0
 8002a32:	f7fe f8d9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8002a36:	203f      	movs	r0, #63	; 0x3f
 8002a38:	f7fe f8d6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	f7fe f8d3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 8002a42:	205e      	movs	r0, #94	; 0x5e
 8002a44:	f7fe f8d0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f7fe f8cd 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002a4e:	2064      	movs	r0, #100	; 0x64
 8002a50:	f7fe f8ca 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a54:	2000      	movs	r0, #0
 8002a56:	f7fe f8c7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 8002a5a:	208c      	movs	r0, #140	; 0x8c
 8002a5c:	f7fe f8c4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a60:	2000      	movs	r0, #0
 8002a62:	f7fe f8c1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 8002a66:	20ac      	movs	r0, #172	; 0xac
 8002a68:	f7fe f8be 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	f7fe f8bb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8002a72:	20dc      	movs	r0, #220	; 0xdc
 8002a74:	f7fe f8b8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a78:	2000      	movs	r0, #0
 8002a7a:	f7fe f8b5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 8002a7e:	2070      	movs	r0, #112	; 0x70
 8002a80:	f7fe f8b2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a84:	2000      	movs	r0, #0
 8002a86:	f7fe f8af 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 8002a8a:	2090      	movs	r0, #144	; 0x90
 8002a8c:	f7fe f8ac 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a90:	2000      	movs	r0, #0
 8002a92:	f7fe f8a9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 8002a96:	20eb      	movs	r0, #235	; 0xeb
 8002a98:	f7fe f8a6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f7fe f8a3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 8002aa2:	20dc      	movs	r0, #220	; 0xdc
 8002aa4:	f7fe f8a0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	f7fe f89d 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 8002aae:	20b8      	movs	r0, #184	; 0xb8
 8002ab0:	f7fe f876 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	f7fe f897 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002aba:	2000      	movs	r0, #0
 8002abc:	f7fe f894 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f7fe f891 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	f7fe f88e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002acc:	2000      	movs	r0, #0
 8002ace:	f7fe f88b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	f7fe f888 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f7fe f885 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ade:	2000      	movs	r0, #0
 8002ae0:	f7fe f882 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 8002ae4:	20ba      	movs	r0, #186	; 0xba
 8002ae6:	f7fe f85b 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 8002aea:	2024      	movs	r0, #36	; 0x24
 8002aec:	f7fe f87c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002af0:	2000      	movs	r0, #0
 8002af2:	f7fe f879 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002af6:	2000      	movs	r0, #0
 8002af8:	f7fe f876 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002afc:	2000      	movs	r0, #0
 8002afe:	f7fe f873 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 8002b02:	20c1      	movs	r0, #193	; 0xc1
 8002b04:	f7fe f84c 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002b08:	2020      	movs	r0, #32
 8002b0a:	f7fe f86d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b0e:	2000      	movs	r0, #0
 8002b10:	f7fe f86a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8002b14:	2054      	movs	r0, #84	; 0x54
 8002b16:	f7fe f867 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b1a:	2000      	movs	r0, #0
 8002b1c:	f7fe f864 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 8002b20:	20ff      	movs	r0, #255	; 0xff
 8002b22:	f7fe f861 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b26:	2000      	movs	r0, #0
 8002b28:	f7fe f85e 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 8002b2c:	20c2      	movs	r0, #194	; 0xc2
 8002b2e:	f7fe f837 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8002b32:	200a      	movs	r0, #10
 8002b34:	f7fe f858 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b38:	2000      	movs	r0, #0
 8002b3a:	f7fe f855 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8002b3e:	2004      	movs	r0, #4
 8002b40:	f7fe f852 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b44:	2000      	movs	r0, #0
 8002b46:	f7fe f84f 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 8002b4a:	20c3      	movs	r0, #195	; 0xc3
 8002b4c:	f7fe f828 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 8002b50:	203c      	movs	r0, #60	; 0x3c
 8002b52:	f7fe f849 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b56:	2000      	movs	r0, #0
 8002b58:	f7fe f846 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 8002b5c:	203a      	movs	r0, #58	; 0x3a
 8002b5e:	f7fe f843 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b62:	2000      	movs	r0, #0
 8002b64:	f7fe f840 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 8002b68:	2039      	movs	r0, #57	; 0x39
 8002b6a:	f7fe f83d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b6e:	2000      	movs	r0, #0
 8002b70:	f7fe f83a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 8002b74:	2037      	movs	r0, #55	; 0x37
 8002b76:	f7fe f837 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	f7fe f834 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002b80:	203c      	movs	r0, #60	; 0x3c
 8002b82:	f7fe f831 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b86:	2000      	movs	r0, #0
 8002b88:	f7fe f82e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002b8c:	2036      	movs	r0, #54	; 0x36
 8002b8e:	f7fe f82b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b92:	2000      	movs	r0, #0
 8002b94:	f7fe f828 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002b98:	2032      	movs	r0, #50	; 0x32
 8002b9a:	f7fe f825 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	f7fe f822 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8002ba4:	202f      	movs	r0, #47	; 0x2f
 8002ba6:	f7fe f81f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002baa:	2000      	movs	r0, #0
 8002bac:	f7fe f81c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002bb0:	202c      	movs	r0, #44	; 0x2c
 8002bb2:	f7fe f819 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	f7fe f816 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002bbc:	2029      	movs	r0, #41	; 0x29
 8002bbe:	f7fe f813 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	f7fe f810 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002bc8:	2026      	movs	r0, #38	; 0x26
 8002bca:	f7fe f80d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bce:	2000      	movs	r0, #0
 8002bd0:	f7fe f80a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002bd4:	2024      	movs	r0, #36	; 0x24
 8002bd6:	f7fe f807 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bda:	2000      	movs	r0, #0
 8002bdc:	f7fe f804 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002be0:	2024      	movs	r0, #36	; 0x24
 8002be2:	f7fe f801 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002be6:	2000      	movs	r0, #0
 8002be8:	f7fd fffe 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002bec:	2023      	movs	r0, #35	; 0x23
 8002bee:	f7fd fffb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	f7fd fff8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8002bf8:	203c      	movs	r0, #60	; 0x3c
 8002bfa:	f7fd fff5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002bfe:	2000      	movs	r0, #0
 8002c00:	f7fd fff2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002c04:	2036      	movs	r0, #54	; 0x36
 8002c06:	f7fd ffef 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	f7fd ffec 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8002c10:	2032      	movs	r0, #50	; 0x32
 8002c12:	f7fd ffe9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c16:	2000      	movs	r0, #0
 8002c18:	f7fd ffe6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8002c1c:	202f      	movs	r0, #47	; 0x2f
 8002c1e:	f7fd ffe3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c22:	2000      	movs	r0, #0
 8002c24:	f7fd ffe0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8002c28:	202c      	movs	r0, #44	; 0x2c
 8002c2a:	f7fd ffdd 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c2e:	2000      	movs	r0, #0
 8002c30:	f7fd ffda 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8002c34:	2029      	movs	r0, #41	; 0x29
 8002c36:	f7fd ffd7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	f7fd ffd4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8002c40:	2026      	movs	r0, #38	; 0x26
 8002c42:	f7fd ffd1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c46:	2000      	movs	r0, #0
 8002c48:	f7fd ffce 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002c4c:	2024      	movs	r0, #36	; 0x24
 8002c4e:	f7fd ffcb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c52:	2000      	movs	r0, #0
 8002c54:	f7fd ffc8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8002c58:	2024      	movs	r0, #36	; 0x24
 8002c5a:	f7fd ffc5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c5e:	2000      	movs	r0, #0
 8002c60:	f7fd ffc2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8002c64:	2023      	movs	r0, #35	; 0x23
 8002c66:	f7fd ffbf 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	f7fd ffbc 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 8002c70:	20c4      	movs	r0, #196	; 0xc4
 8002c72:	f7fd ff95 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 8002c76:	2062      	movs	r0, #98	; 0x62
 8002c78:	f7fd ffb6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	f7fd ffb3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8002c82:	2005      	movs	r0, #5
 8002c84:	f7fd ffb0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c88:	2000      	movs	r0, #0
 8002c8a:	f7fd ffad 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8002c8e:	2084      	movs	r0, #132	; 0x84
 8002c90:	f7fd ffaa 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002c94:	2000      	movs	r0, #0
 8002c96:	f7fd ffa7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 8002c9a:	20f0      	movs	r0, #240	; 0xf0
 8002c9c:	f7fd ffa4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	f7fd ffa1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002ca6:	2018      	movs	r0, #24
 8002ca8:	f7fd ff9e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cac:	2000      	movs	r0, #0
 8002cae:	f7fd ff9b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 8002cb2:	20a4      	movs	r0, #164	; 0xa4
 8002cb4:	f7fd ff98 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cb8:	2000      	movs	r0, #0
 8002cba:	f7fd ff95 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8002cbe:	2018      	movs	r0, #24
 8002cc0:	f7fd ff92 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	f7fd ff8f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8002cca:	2050      	movs	r0, #80	; 0x50
 8002ccc:	f7fd ff8c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	f7fd ff89 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 8002cd6:	200c      	movs	r0, #12
 8002cd8:	f7fd ff86 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cdc:	2000      	movs	r0, #0
 8002cde:	f7fd ff83 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002ce2:	2017      	movs	r0, #23
 8002ce4:	f7fd ff80 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ce8:	2000      	movs	r0, #0
 8002cea:	f7fd ff7d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 8002cee:	2095      	movs	r0, #149	; 0x95
 8002cf0:	f7fd ff7a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	f7fd ff77 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002cfa:	20f3      	movs	r0, #243	; 0xf3
 8002cfc:	f7fd ff74 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d00:	2000      	movs	r0, #0
 8002d02:	f7fd ff71 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 8002d06:	20e6      	movs	r0, #230	; 0xe6
 8002d08:	f7fd ff6e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d0c:	2000      	movs	r0, #0
 8002d0e:	f7fd ff6b 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 8002d12:	20c5      	movs	r0, #197	; 0xc5
 8002d14:	f7fd ff44 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8002d18:	2032      	movs	r0, #50	; 0x32
 8002d1a:	f7fd ff65 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d1e:	2000      	movs	r0, #0
 8002d20:	f7fd ff62 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8002d24:	2044      	movs	r0, #68	; 0x44
 8002d26:	f7fd ff5f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	f7fd ff5c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 8002d30:	2065      	movs	r0, #101	; 0x65
 8002d32:	f7fd ff59 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d36:	2000      	movs	r0, #0
 8002d38:	f7fd ff56 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8002d3c:	2076      	movs	r0, #118	; 0x76
 8002d3e:	f7fd ff53 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d42:	2000      	movs	r0, #0
 8002d44:	f7fd ff50 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8002d48:	2088      	movs	r0, #136	; 0x88
 8002d4a:	f7fd ff4d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d4e:	2000      	movs	r0, #0
 8002d50:	f7fd ff4a 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8002d54:	20c6      	movs	r0, #198	; 0xc6
 8002d56:	f7fd ff23 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8002d5a:	2020      	movs	r0, #32
 8002d5c:	f7fd ff44 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d60:	2000      	movs	r0, #0
 8002d62:	f7fd ff41 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8002d66:	2017      	movs	r0, #23
 8002d68:	f7fd ff3e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	f7fd ff3b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8002d72:	2001      	movs	r0, #1
 8002d74:	f7fd ff38 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d78:	2000      	movs	r0, #0
 8002d7a:	f7fd ff35 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 8002d7e:	20c7      	movs	r0, #199	; 0xc7
 8002d80:	f7fd ff0e 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002d84:	2000      	movs	r0, #0
 8002d86:	f7fd ff2f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	f7fd ff2c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d90:	2000      	movs	r0, #0
 8002d92:	f7fd ff29 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002d96:	2000      	movs	r0, #0
 8002d98:	f7fd ff26 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 8002d9c:	20c8      	movs	r0, #200	; 0xc8
 8002d9e:	f7fd feff 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002da2:	2000      	movs	r0, #0
 8002da4:	f7fd ff20 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002da8:	2000      	movs	r0, #0
 8002daa:	f7fd ff1d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dae:	2000      	movs	r0, #0
 8002db0:	f7fd ff1a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002db4:	2000      	movs	r0, #0
 8002db6:	f7fd ff17 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 8002dba:	20c9      	movs	r0, #201	; 0xc9
 8002dbc:	f7fd fef0 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	f7fd ff11 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dc6:	2000      	movs	r0, #0
 8002dc8:	f7fd ff0e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dcc:	2000      	movs	r0, #0
 8002dce:	f7fd ff0b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	f7fd ff08 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f7fd ff05 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dde:	2000      	movs	r0, #0
 8002de0:	f7fd ff02 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002de4:	2000      	movs	r0, #0
 8002de6:	f7fd feff 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dea:	2000      	movs	r0, #0
 8002dec:	f7fd fefc 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002df0:	2000      	movs	r0, #0
 8002df2:	f7fd fef9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002df6:	2000      	movs	r0, #0
 8002df8:	f7fd fef6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	f7fd fef3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e02:	2000      	movs	r0, #0
 8002e04:	f7fd fef0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e08:	2000      	movs	r0, #0
 8002e0a:	f7fd feed 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e0e:	2000      	movs	r0, #0
 8002e10:	f7fd feea 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e14:	2000      	movs	r0, #0
 8002e16:	f7fd fee7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	f7fd fee4 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8002e20:	20e0      	movs	r0, #224	; 0xe0
 8002e22:	f7fd febd 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002e26:	2016      	movs	r0, #22
 8002e28:	f7fd fede 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	f7fd fedb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002e32:	201c      	movs	r0, #28
 8002e34:	f7fd fed8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e38:	2000      	movs	r0, #0
 8002e3a:	f7fd fed5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8002e3e:	2021      	movs	r0, #33	; 0x21
 8002e40:	f7fd fed2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e44:	2000      	movs	r0, #0
 8002e46:	f7fd fecf 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002e4a:	2036      	movs	r0, #54	; 0x36
 8002e4c:	f7fd fecc 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e50:	2000      	movs	r0, #0
 8002e52:	f7fd fec9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 8002e56:	2046      	movs	r0, #70	; 0x46
 8002e58:	f7fd fec6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	f7fd fec3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002e62:	2052      	movs	r0, #82	; 0x52
 8002e64:	f7fd fec0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e68:	2000      	movs	r0, #0
 8002e6a:	f7fd febd 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002e6e:	2064      	movs	r0, #100	; 0x64
 8002e70:	f7fd feba 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e74:	2000      	movs	r0, #0
 8002e76:	f7fd feb7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002e7a:	207a      	movs	r0, #122	; 0x7a
 8002e7c:	f7fd feb4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e80:	2000      	movs	r0, #0
 8002e82:	f7fd feb1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002e86:	208b      	movs	r0, #139	; 0x8b
 8002e88:	f7fd feae 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e8c:	2000      	movs	r0, #0
 8002e8e:	f7fd feab 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002e92:	2099      	movs	r0, #153	; 0x99
 8002e94:	f7fd fea8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002e98:	2000      	movs	r0, #0
 8002e9a:	f7fd fea5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002e9e:	20a8      	movs	r0, #168	; 0xa8
 8002ea0:	f7fd fea2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ea4:	2000      	movs	r0, #0
 8002ea6:	f7fd fe9f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002eaa:	20b9      	movs	r0, #185	; 0xb9
 8002eac:	f7fd fe9c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	f7fd fe99 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002eb6:	20c4      	movs	r0, #196	; 0xc4
 8002eb8:	f7fd fe96 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	f7fd fe93 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002ec2:	20ca      	movs	r0, #202	; 0xca
 8002ec4:	f7fd fe90 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ec8:	2000      	movs	r0, #0
 8002eca:	f7fd fe8d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002ece:	20d2      	movs	r0, #210	; 0xd2
 8002ed0:	f7fd fe8a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	f7fd fe87 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 8002eda:	20d9      	movs	r0, #217	; 0xd9
 8002edc:	f7fd fe84 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	f7fd fe81 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002ee6:	20e0      	movs	r0, #224	; 0xe0
 8002ee8:	f7fd fe7e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002eec:	2000      	movs	r0, #0
 8002eee:	f7fd fe7b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002ef2:	20f3      	movs	r0, #243	; 0xf3
 8002ef4:	f7fd fe78 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ef8:	2000      	movs	r0, #0
 8002efa:	f7fd fe75 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 8002efe:	20e1      	movs	r0, #225	; 0xe1
 8002f00:	f7fd fe4e 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8002f04:	2016      	movs	r0, #22
 8002f06:	f7fd fe6f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f7fd fe6c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8002f10:	201c      	movs	r0, #28
 8002f12:	f7fd fe69 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f16:	2000      	movs	r0, #0
 8002f18:	f7fd fe66 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 8002f1c:	2022      	movs	r0, #34	; 0x22
 8002f1e:	f7fd fe63 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f22:	2000      	movs	r0, #0
 8002f24:	f7fd fe60 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8002f28:	2036      	movs	r0, #54	; 0x36
 8002f2a:	f7fd fe5d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f2e:	2000      	movs	r0, #0
 8002f30:	f7fd fe5a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8002f34:	2045      	movs	r0, #69	; 0x45
 8002f36:	f7fd fe57 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	f7fd fe54 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8002f40:	2052      	movs	r0, #82	; 0x52
 8002f42:	f7fd fe51 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f46:	2000      	movs	r0, #0
 8002f48:	f7fd fe4e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8002f4c:	2064      	movs	r0, #100	; 0x64
 8002f4e:	f7fd fe4b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f52:	2000      	movs	r0, #0
 8002f54:	f7fd fe48 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8002f58:	207a      	movs	r0, #122	; 0x7a
 8002f5a:	f7fd fe45 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f5e:	2000      	movs	r0, #0
 8002f60:	f7fd fe42 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8002f64:	208b      	movs	r0, #139	; 0x8b
 8002f66:	f7fd fe3f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	f7fd fe3c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8002f70:	2099      	movs	r0, #153	; 0x99
 8002f72:	f7fd fe39 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f76:	2000      	movs	r0, #0
 8002f78:	f7fd fe36 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8002f7c:	20a8      	movs	r0, #168	; 0xa8
 8002f7e:	f7fd fe33 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f82:	2000      	movs	r0, #0
 8002f84:	f7fd fe30 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8002f88:	20b9      	movs	r0, #185	; 0xb9
 8002f8a:	f7fd fe2d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f8e:	2000      	movs	r0, #0
 8002f90:	f7fd fe2a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8002f94:	20c4      	movs	r0, #196	; 0xc4
 8002f96:	f7fd fe27 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	f7fd fe24 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8002fa0:	20ca      	movs	r0, #202	; 0xca
 8002fa2:	f7fd fe21 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	f7fd fe1e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8002fac:	20d2      	movs	r0, #210	; 0xd2
 8002fae:	f7fd fe1b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	f7fd fe18 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8002fb8:	20d8      	movs	r0, #216	; 0xd8
 8002fba:	f7fd fe15 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	f7fd fe12 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8002fc4:	20e0      	movs	r0, #224	; 0xe0
 8002fc6:	f7fd fe0f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fca:	2000      	movs	r0, #0
 8002fcc:	f7fd fe0c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8002fd0:	20f3      	movs	r0, #243	; 0xf3
 8002fd2:	f7fd fe09 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	f7fd fe06 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 8002fdc:	20e2      	movs	r0, #226	; 0xe2
 8002fde:	f7fd fddf 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8002fe2:	2005      	movs	r0, #5
 8002fe4:	f7fd fe00 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002fe8:	2000      	movs	r0, #0
 8002fea:	f7fd fdfd 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 8002fee:	200b      	movs	r0, #11
 8002ff0:	f7fd fdfa 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f7fd fdf7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 8002ffa:	201b      	movs	r0, #27
 8002ffc:	f7fd fdf4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003000:	2000      	movs	r0, #0
 8003002:	f7fd fdf1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8003006:	2034      	movs	r0, #52	; 0x34
 8003008:	f7fd fdee 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800300c:	2000      	movs	r0, #0
 800300e:	f7fd fdeb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003012:	2044      	movs	r0, #68	; 0x44
 8003014:	f7fd fde8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003018:	2000      	movs	r0, #0
 800301a:	f7fd fde5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 800301e:	204f      	movs	r0, #79	; 0x4f
 8003020:	f7fd fde2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003024:	2000      	movs	r0, #0
 8003026:	f7fd fddf 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 800302a:	2061      	movs	r0, #97	; 0x61
 800302c:	f7fd fddc 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003030:	2000      	movs	r0, #0
 8003032:	f7fd fdd9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 8003036:	2079      	movs	r0, #121	; 0x79
 8003038:	f7fd fdd6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800303c:	2000      	movs	r0, #0
 800303e:	f7fd fdd3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003042:	2088      	movs	r0, #136	; 0x88
 8003044:	f7fd fdd0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003048:	2000      	movs	r0, #0
 800304a:	f7fd fdcd 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 800304e:	2097      	movs	r0, #151	; 0x97
 8003050:	f7fd fdca 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003054:	2000      	movs	r0, #0
 8003056:	f7fd fdc7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 800305a:	20a6      	movs	r0, #166	; 0xa6
 800305c:	f7fd fdc4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003060:	2000      	movs	r0, #0
 8003062:	f7fd fdc1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8003066:	20b7      	movs	r0, #183	; 0xb7
 8003068:	f7fd fdbe 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800306c:	2000      	movs	r0, #0
 800306e:	f7fd fdbb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8003072:	20c2      	movs	r0, #194	; 0xc2
 8003074:	f7fd fdb8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003078:	2000      	movs	r0, #0
 800307a:	f7fd fdb5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 800307e:	20c7      	movs	r0, #199	; 0xc7
 8003080:	f7fd fdb2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003084:	2000      	movs	r0, #0
 8003086:	f7fd fdaf 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 800308a:	20d1      	movs	r0, #209	; 0xd1
 800308c:	f7fd fdac 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003090:	2000      	movs	r0, #0
 8003092:	f7fd fda9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 8003096:	20d6      	movs	r0, #214	; 0xd6
 8003098:	f7fd fda6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800309c:	2000      	movs	r0, #0
 800309e:	f7fd fda3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 80030a2:	20dd      	movs	r0, #221	; 0xdd
 80030a4:	f7fd fda0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030a8:	2000      	movs	r0, #0
 80030aa:	f7fd fd9d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 80030ae:	20f3      	movs	r0, #243	; 0xf3
 80030b0:	f7fd fd9a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030b4:	2000      	movs	r0, #0
 80030b6:	f7fd fd97 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 80030ba:	20e3      	movs	r0, #227	; 0xe3
 80030bc:	f7fd fd70 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 80030c0:	2005      	movs	r0, #5
 80030c2:	f7fd fd91 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030c6:	2000      	movs	r0, #0
 80030c8:	f7fd fd8e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 80030cc:	200a      	movs	r0, #10
 80030ce:	f7fd fd8b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030d2:	2000      	movs	r0, #0
 80030d4:	f7fd fd88 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 80030d8:	201c      	movs	r0, #28
 80030da:	f7fd fd85 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030de:	2000      	movs	r0, #0
 80030e0:	f7fd fd82 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 80030e4:	2033      	movs	r0, #51	; 0x33
 80030e6:	f7fd fd7f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030ea:	2000      	movs	r0, #0
 80030ec:	f7fd fd7c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80030f0:	2044      	movs	r0, #68	; 0x44
 80030f2:	f7fd fd79 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80030f6:	2000      	movs	r0, #0
 80030f8:	f7fd fd76 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 80030fc:	2050      	movs	r0, #80	; 0x50
 80030fe:	f7fd fd73 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003102:	2000      	movs	r0, #0
 8003104:	f7fd fd70 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 8003108:	2062      	movs	r0, #98	; 0x62
 800310a:	f7fd fd6d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800310e:	2000      	movs	r0, #0
 8003110:	f7fd fd6a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 8003114:	2078      	movs	r0, #120	; 0x78
 8003116:	f7fd fd67 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800311a:	2000      	movs	r0, #0
 800311c:	f7fd fd64 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003120:	2088      	movs	r0, #136	; 0x88
 8003122:	f7fd fd61 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003126:	2000      	movs	r0, #0
 8003128:	f7fd fd5e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 800312c:	2097      	movs	r0, #151	; 0x97
 800312e:	f7fd fd5b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003132:	2000      	movs	r0, #0
 8003134:	f7fd fd58 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8003138:	20a6      	movs	r0, #166	; 0xa6
 800313a:	f7fd fd55 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800313e:	2000      	movs	r0, #0
 8003140:	f7fd fd52 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8003144:	20b7      	movs	r0, #183	; 0xb7
 8003146:	f7fd fd4f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800314a:	2000      	movs	r0, #0
 800314c:	f7fd fd4c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8003150:	20c2      	movs	r0, #194	; 0xc2
 8003152:	f7fd fd49 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003156:	2000      	movs	r0, #0
 8003158:	f7fd fd46 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 800315c:	20c7      	movs	r0, #199	; 0xc7
 800315e:	f7fd fd43 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003162:	2000      	movs	r0, #0
 8003164:	f7fd fd40 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8003168:	20d1      	movs	r0, #209	; 0xd1
 800316a:	f7fd fd3d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800316e:	2000      	movs	r0, #0
 8003170:	f7fd fd3a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 8003174:	20d5      	movs	r0, #213	; 0xd5
 8003176:	f7fd fd37 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800317a:	2000      	movs	r0, #0
 800317c:	f7fd fd34 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8003180:	20dd      	movs	r0, #221	; 0xdd
 8003182:	f7fd fd31 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003186:	2000      	movs	r0, #0
 8003188:	f7fd fd2e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 800318c:	20f3      	movs	r0, #243	; 0xf3
 800318e:	f7fd fd2b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003192:	2000      	movs	r0, #0
 8003194:	f7fd fd28 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 8003198:	20e4      	movs	r0, #228	; 0xe4
 800319a:	f7fd fd01 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 800319e:	2001      	movs	r0, #1
 80031a0:	f7fd fd22 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031a4:	2000      	movs	r0, #0
 80031a6:	f7fd fd1f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 80031aa:	2001      	movs	r0, #1
 80031ac:	f7fd fd1c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031b0:	2000      	movs	r0, #0
 80031b2:	f7fd fd19 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 80031b6:	2002      	movs	r0, #2
 80031b8:	f7fd fd16 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031bc:	2000      	movs	r0, #0
 80031be:	f7fd fd13 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 80031c2:	202a      	movs	r0, #42	; 0x2a
 80031c4:	f7fd fd10 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031c8:	2000      	movs	r0, #0
 80031ca:	f7fd fd0d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80031ce:	203c      	movs	r0, #60	; 0x3c
 80031d0:	f7fd fd0a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031d4:	2000      	movs	r0, #0
 80031d6:	f7fd fd07 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 80031da:	204b      	movs	r0, #75	; 0x4b
 80031dc:	f7fd fd04 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031e0:	2000      	movs	r0, #0
 80031e2:	f7fd fd01 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 80031e6:	205d      	movs	r0, #93	; 0x5d
 80031e8:	f7fd fcfe 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031ec:	2000      	movs	r0, #0
 80031ee:	f7fd fcfb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 80031f2:	2074      	movs	r0, #116	; 0x74
 80031f4:	f7fd fcf8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80031f8:	2000      	movs	r0, #0
 80031fa:	f7fd fcf5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 80031fe:	2084      	movs	r0, #132	; 0x84
 8003200:	f7fd fcf2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003204:	2000      	movs	r0, #0
 8003206:	f7fd fcef 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 800320a:	2093      	movs	r0, #147	; 0x93
 800320c:	f7fd fcec 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003210:	2000      	movs	r0, #0
 8003212:	f7fd fce9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8003216:	20a2      	movs	r0, #162	; 0xa2
 8003218:	f7fd fce6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800321c:	2000      	movs	r0, #0
 800321e:	f7fd fce3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8003222:	20b3      	movs	r0, #179	; 0xb3
 8003224:	f7fd fce0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003228:	2000      	movs	r0, #0
 800322a:	f7fd fcdd 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 800322e:	20be      	movs	r0, #190	; 0xbe
 8003230:	f7fd fcda 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003234:	2000      	movs	r0, #0
 8003236:	f7fd fcd7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 800323a:	20c4      	movs	r0, #196	; 0xc4
 800323c:	f7fd fcd4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003240:	2000      	movs	r0, #0
 8003242:	f7fd fcd1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8003246:	20cd      	movs	r0, #205	; 0xcd
 8003248:	f7fd fcce 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800324c:	2000      	movs	r0, #0
 800324e:	f7fd fccb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8003252:	20d3      	movs	r0, #211	; 0xd3
 8003254:	f7fd fcc8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003258:	2000      	movs	r0, #0
 800325a:	f7fd fcc5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 800325e:	20dd      	movs	r0, #221	; 0xdd
 8003260:	f7fd fcc2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003264:	2000      	movs	r0, #0
 8003266:	f7fd fcbf 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 800326a:	20f3      	movs	r0, #243	; 0xf3
 800326c:	f7fd fcbc 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003270:	2000      	movs	r0, #0
 8003272:	f7fd fcb9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 8003276:	20e5      	movs	r0, #229	; 0xe5
 8003278:	f7fd fc92 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800327c:	2000      	movs	r0, #0
 800327e:	f7fd fcb3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003282:	2000      	movs	r0, #0
 8003284:	f7fd fcb0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003288:	2000      	movs	r0, #0
 800328a:	f7fd fcad 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800328e:	2000      	movs	r0, #0
 8003290:	f7fd fcaa 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8003294:	2002      	movs	r0, #2
 8003296:	f7fd fca7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800329a:	2000      	movs	r0, #0
 800329c:	f7fd fca4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80032a0:	2029      	movs	r0, #41	; 0x29
 80032a2:	f7fd fca1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032a6:	2000      	movs	r0, #0
 80032a8:	f7fd fc9e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80032ac:	203c      	movs	r0, #60	; 0x3c
 80032ae:	f7fd fc9b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032b2:	2000      	movs	r0, #0
 80032b4:	f7fd fc98 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 80032b8:	204b      	movs	r0, #75	; 0x4b
 80032ba:	f7fd fc95 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032be:	2000      	movs	r0, #0
 80032c0:	f7fd fc92 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 80032c4:	205d      	movs	r0, #93	; 0x5d
 80032c6:	f7fd fc8f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032ca:	2000      	movs	r0, #0
 80032cc:	f7fd fc8c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 80032d0:	2074      	movs	r0, #116	; 0x74
 80032d2:	f7fd fc89 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032d6:	2000      	movs	r0, #0
 80032d8:	f7fd fc86 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 80032dc:	2084      	movs	r0, #132	; 0x84
 80032de:	f7fd fc83 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032e2:	2000      	movs	r0, #0
 80032e4:	f7fd fc80 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 80032e8:	2093      	movs	r0, #147	; 0x93
 80032ea:	f7fd fc7d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032ee:	2000      	movs	r0, #0
 80032f0:	f7fd fc7a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 80032f4:	20a2      	movs	r0, #162	; 0xa2
 80032f6:	f7fd fc77 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032fa:	2000      	movs	r0, #0
 80032fc:	f7fd fc74 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8003300:	20b3      	movs	r0, #179	; 0xb3
 8003302:	f7fd fc71 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003306:	2000      	movs	r0, #0
 8003308:	f7fd fc6e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 800330c:	20be      	movs	r0, #190	; 0xbe
 800330e:	f7fd fc6b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003312:	2000      	movs	r0, #0
 8003314:	f7fd fc68 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8003318:	20c4      	movs	r0, #196	; 0xc4
 800331a:	f7fd fc65 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800331e:	2000      	movs	r0, #0
 8003320:	f7fd fc62 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8003324:	20cd      	movs	r0, #205	; 0xcd
 8003326:	f7fd fc5f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800332a:	2000      	movs	r0, #0
 800332c:	f7fd fc5c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8003330:	20d3      	movs	r0, #211	; 0xd3
 8003332:	f7fd fc59 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003336:	2000      	movs	r0, #0
 8003338:	f7fd fc56 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 800333c:	20dc      	movs	r0, #220	; 0xdc
 800333e:	f7fd fc53 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003342:	2000      	movs	r0, #0
 8003344:	f7fd fc50 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8003348:	20f3      	movs	r0, #243	; 0xf3
 800334a:	f7fd fc4d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800334e:	2000      	movs	r0, #0
 8003350:	f7fd fc4a 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 8003354:	20e6      	movs	r0, #230	; 0xe6
 8003356:	f7fd fc23 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 800335a:	2011      	movs	r0, #17
 800335c:	f7fd fc44 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003360:	2000      	movs	r0, #0
 8003362:	f7fd fc41 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8003366:	2034      	movs	r0, #52	; 0x34
 8003368:	f7fd fc3e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800336c:	2000      	movs	r0, #0
 800336e:	f7fd fc3b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8003372:	2056      	movs	r0, #86	; 0x56
 8003374:	f7fd fc38 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003378:	2000      	movs	r0, #0
 800337a:	f7fd fc35 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 800337e:	2076      	movs	r0, #118	; 0x76
 8003380:	f7fd fc32 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003384:	2000      	movs	r0, #0
 8003386:	f7fd fc2f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 800338a:	2077      	movs	r0, #119	; 0x77
 800338c:	f7fd fc2c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003390:	2000      	movs	r0, #0
 8003392:	f7fd fc29 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003396:	2066      	movs	r0, #102	; 0x66
 8003398:	f7fd fc26 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800339c:	2000      	movs	r0, #0
 800339e:	f7fd fc23 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80033a2:	2088      	movs	r0, #136	; 0x88
 80033a4:	f7fd fc20 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033a8:	2000      	movs	r0, #0
 80033aa:	f7fd fc1d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80033ae:	2099      	movs	r0, #153	; 0x99
 80033b0:	f7fd fc1a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033b4:	2000      	movs	r0, #0
 80033b6:	f7fd fc17 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80033ba:	20bb      	movs	r0, #187	; 0xbb
 80033bc:	f7fd fc14 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033c0:	2000      	movs	r0, #0
 80033c2:	f7fd fc11 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80033c6:	2099      	movs	r0, #153	; 0x99
 80033c8:	f7fd fc0e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033cc:	2000      	movs	r0, #0
 80033ce:	f7fd fc0b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80033d2:	2066      	movs	r0, #102	; 0x66
 80033d4:	f7fd fc08 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033d8:	2000      	movs	r0, #0
 80033da:	f7fd fc05 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80033de:	2055      	movs	r0, #85	; 0x55
 80033e0:	f7fd fc02 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033e4:	2000      	movs	r0, #0
 80033e6:	f7fd fbff 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80033ea:	2055      	movs	r0, #85	; 0x55
 80033ec:	f7fd fbfc 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033f0:	2000      	movs	r0, #0
 80033f2:	f7fd fbf9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 80033f6:	2045      	movs	r0, #69	; 0x45
 80033f8:	f7fd fbf6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033fc:	2000      	movs	r0, #0
 80033fe:	f7fd fbf3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8003402:	2043      	movs	r0, #67	; 0x43
 8003404:	f7fd fbf0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003408:	2000      	movs	r0, #0
 800340a:	f7fd fbed 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800340e:	2044      	movs	r0, #68	; 0x44
 8003410:	f7fd fbea 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003414:	2000      	movs	r0, #0
 8003416:	f7fd fbe7 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 800341a:	20e7      	movs	r0, #231	; 0xe7
 800341c:	f7fd fbc0 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8003420:	2032      	movs	r0, #50	; 0x32
 8003422:	f7fd fbe1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003426:	2000      	movs	r0, #0
 8003428:	f7fd fbde 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800342c:	2055      	movs	r0, #85	; 0x55
 800342e:	f7fd fbdb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003432:	2000      	movs	r0, #0
 8003434:	f7fd fbd8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8003438:	2076      	movs	r0, #118	; 0x76
 800343a:	f7fd fbd5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800343e:	2000      	movs	r0, #0
 8003440:	f7fd fbd2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003444:	2066      	movs	r0, #102	; 0x66
 8003446:	f7fd fbcf 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800344a:	2000      	movs	r0, #0
 800344c:	f7fd fbcc 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8003450:	2067      	movs	r0, #103	; 0x67
 8003452:	f7fd fbc9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003456:	2000      	movs	r0, #0
 8003458:	f7fd fbc6 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 800345c:	2067      	movs	r0, #103	; 0x67
 800345e:	f7fd fbc3 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003462:	2000      	movs	r0, #0
 8003464:	f7fd fbc0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8003468:	2087      	movs	r0, #135	; 0x87
 800346a:	f7fd fbbd 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800346e:	2000      	movs	r0, #0
 8003470:	f7fd fbba 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003474:	2099      	movs	r0, #153	; 0x99
 8003476:	f7fd fbb7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800347a:	2000      	movs	r0, #0
 800347c:	f7fd fbb4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8003480:	20bb      	movs	r0, #187	; 0xbb
 8003482:	f7fd fbb1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003486:	2000      	movs	r0, #0
 8003488:	f7fd fbae 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 800348c:	2099      	movs	r0, #153	; 0x99
 800348e:	f7fd fbab 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003492:	2000      	movs	r0, #0
 8003494:	f7fd fba8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003498:	2077      	movs	r0, #119	; 0x77
 800349a:	f7fd fba5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800349e:	2000      	movs	r0, #0
 80034a0:	f7fd fba2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80034a4:	2044      	movs	r0, #68	; 0x44
 80034a6:	f7fd fb9f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034aa:	2000      	movs	r0, #0
 80034ac:	f7fd fb9c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 80034b0:	2056      	movs	r0, #86	; 0x56
 80034b2:	f7fd fb99 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034b6:	2000      	movs	r0, #0
 80034b8:	f7fd fb96 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 80034bc:	2023      	movs	r0, #35	; 0x23
 80034be:	f7fd fb93 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034c2:	2000      	movs	r0, #0
 80034c4:	f7fd fb90 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 80034c8:	2033      	movs	r0, #51	; 0x33
 80034ca:	f7fd fb8d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034ce:	2000      	movs	r0, #0
 80034d0:	f7fd fb8a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 80034d4:	2045      	movs	r0, #69	; 0x45
 80034d6:	f7fd fb87 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034da:	2000      	movs	r0, #0
 80034dc:	f7fd fb84 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 80034e0:	20e8      	movs	r0, #232	; 0xe8
 80034e2:	f7fd fb5d 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80034e6:	2000      	movs	r0, #0
 80034e8:	f7fd fb7e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034ec:	2000      	movs	r0, #0
 80034ee:	f7fd fb7b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80034f2:	2099      	movs	r0, #153	; 0x99
 80034f4:	f7fd fb78 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80034f8:	2000      	movs	r0, #0
 80034fa:	f7fd fb75 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 80034fe:	2087      	movs	r0, #135	; 0x87
 8003500:	f7fd fb72 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003504:	2000      	movs	r0, #0
 8003506:	f7fd fb6f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800350a:	2088      	movs	r0, #136	; 0x88
 800350c:	f7fd fb6c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003510:	2000      	movs	r0, #0
 8003512:	f7fd fb69 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8003516:	2077      	movs	r0, #119	; 0x77
 8003518:	f7fd fb66 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800351c:	2000      	movs	r0, #0
 800351e:	f7fd fb63 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8003522:	2066      	movs	r0, #102	; 0x66
 8003524:	f7fd fb60 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003528:	2000      	movs	r0, #0
 800352a:	f7fd fb5d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800352e:	2088      	movs	r0, #136	; 0x88
 8003530:	f7fd fb5a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003534:	2000      	movs	r0, #0
 8003536:	f7fd fb57 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 800353a:	20aa      	movs	r0, #170	; 0xaa
 800353c:	f7fd fb54 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003540:	2000      	movs	r0, #0
 8003542:	f7fd fb51 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8003546:	20bb      	movs	r0, #187	; 0xbb
 8003548:	f7fd fb4e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800354c:	2000      	movs	r0, #0
 800354e:	f7fd fb4b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003552:	2099      	movs	r0, #153	; 0x99
 8003554:	f7fd fb48 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003558:	2000      	movs	r0, #0
 800355a:	f7fd fb45 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800355e:	2066      	movs	r0, #102	; 0x66
 8003560:	f7fd fb42 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003564:	2000      	movs	r0, #0
 8003566:	f7fd fb3f 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800356a:	2055      	movs	r0, #85	; 0x55
 800356c:	f7fd fb3c 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003570:	2000      	movs	r0, #0
 8003572:	f7fd fb39 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 8003576:	2055      	movs	r0, #85	; 0x55
 8003578:	f7fd fb36 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800357c:	2000      	movs	r0, #0
 800357e:	f7fd fb33 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003582:	2044      	movs	r0, #68	; 0x44
 8003584:	f7fd fb30 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003588:	2000      	movs	r0, #0
 800358a:	f7fd fb2d 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800358e:	2044      	movs	r0, #68	; 0x44
 8003590:	f7fd fb2a 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003594:	2000      	movs	r0, #0
 8003596:	f7fd fb27 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800359a:	2055      	movs	r0, #85	; 0x55
 800359c:	f7fd fb24 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035a0:	2000      	movs	r0, #0
 80035a2:	f7fd fb21 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 80035a6:	20e9      	movs	r0, #233	; 0xe9
 80035a8:	f7fd fafa 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 80035ac:	20aa      	movs	r0, #170	; 0xaa
 80035ae:	f7fd fb1b 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035b2:	2000      	movs	r0, #0
 80035b4:	f7fd fb18 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035b8:	2000      	movs	r0, #0
 80035ba:	f7fd fb15 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035be:	2000      	movs	r0, #0
 80035c0:	f7fd fb12 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 80035c4:	2000      	movs	r0, #0
 80035c6:	f7fd faeb 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 80035ca:	20aa      	movs	r0, #170	; 0xaa
 80035cc:	f7fd fb0c 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 80035d0:	20cf      	movs	r0, #207	; 0xcf
 80035d2:	f7fd fae5 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80035d6:	2000      	movs	r0, #0
 80035d8:	f7fd fb06 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035dc:	2000      	movs	r0, #0
 80035de:	f7fd fb03 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035e2:	2000      	movs	r0, #0
 80035e4:	f7fd fb00 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035e8:	2000      	movs	r0, #0
 80035ea:	f7fd fafd 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035ee:	2000      	movs	r0, #0
 80035f0:	f7fd fafa 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035f4:	2000      	movs	r0, #0
 80035f6:	f7fd faf7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80035fa:	2000      	movs	r0, #0
 80035fc:	f7fd faf4 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003600:	2000      	movs	r0, #0
 8003602:	f7fd faf1 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003606:	2000      	movs	r0, #0
 8003608:	f7fd faee 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800360c:	2000      	movs	r0, #0
 800360e:	f7fd faeb 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003612:	2000      	movs	r0, #0
 8003614:	f7fd fae8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003618:	2000      	movs	r0, #0
 800361a:	f7fd fae5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800361e:	2000      	movs	r0, #0
 8003620:	f7fd fae2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003624:	2000      	movs	r0, #0
 8003626:	f7fd fadf 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800362a:	2000      	movs	r0, #0
 800362c:	f7fd fadc 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003630:	2000      	movs	r0, #0
 8003632:	f7fd fad9 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003636:	2000      	movs	r0, #0
 8003638:	f7fd fad6 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 800363c:	20f0      	movs	r0, #240	; 0xf0
 800363e:	f7fd faaf 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003642:	2000      	movs	r0, #0
 8003644:	f7fd fad0 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8003648:	2050      	movs	r0, #80	; 0x50
 800364a:	f7fd facd 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800364e:	2000      	movs	r0, #0
 8003650:	f7fd faca 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003654:	2000      	movs	r0, #0
 8003656:	f7fd fac7 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800365a:	2000      	movs	r0, #0
 800365c:	f7fd fac4 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 8003660:	20f3      	movs	r0, #243	; 0xf3
 8003662:	f7fd fa9d 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003666:	2000      	movs	r0, #0
 8003668:	f7fd fabe 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 800366c:	20f9      	movs	r0, #249	; 0xf9
 800366e:	f7fd fa97 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 8003672:	2006      	movs	r0, #6
 8003674:	f7fd fab8 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8003678:	2010      	movs	r0, #16
 800367a:	f7fd fab5 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 800367e:	2029      	movs	r0, #41	; 0x29
 8003680:	f7fd fab2 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003684:	2000      	movs	r0, #0
 8003686:	f7fd faaf 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 800368a:	203a      	movs	r0, #58	; 0x3a
 800368c:	f7fd fa88 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 8003690:	2055      	movs	r0, #85	; 0x55
 8003692:	f7fd faa9 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 8003696:	2011      	movs	r0, #17
 8003698:	f7fd fa82 	bl	8000ba0 <LCD_WR_REG>
		HAL_Delay(100);
 800369c:	2064      	movs	r0, #100	; 0x64
 800369e:	f004 fa91 	bl	8007bc4 <HAL_Delay>
		LCD_WR_REG(0x29);
 80036a2:	2029      	movs	r0, #41	; 0x29
 80036a4:	f7fd fa7c 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 80036a8:	2035      	movs	r0, #53	; 0x35
 80036aa:	f7fd fa79 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80036ae:	2000      	movs	r0, #0
 80036b0:	f7fd fa9a 	bl	8000be8 <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 80036b4:	2051      	movs	r0, #81	; 0x51
 80036b6:	f7fd fa73 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 80036ba:	20ff      	movs	r0, #255	; 0xff
 80036bc:	f7fd fa94 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 80036c0:	2053      	movs	r0, #83	; 0x53
 80036c2:	f7fd fa6d 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 80036c6:	202c      	movs	r0, #44	; 0x2c
 80036c8:	f7fd fa8e 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 80036cc:	2055      	movs	r0, #85	; 0x55
 80036ce:	f7fd fa67 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 80036d2:	2082      	movs	r0, #130	; 0x82
 80036d4:	f7fd fa88 	bl	8000be8 <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 80036d8:	202c      	movs	r0, #44	; 0x2c
 80036da:	f7fd fa61 	bl	8000ba0 <LCD_WR_REG>
 80036de:	f002 bca1 	b.w	8006024 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 80036e2:	4b04      	ldr	r3, [pc, #16]	; (80036f4 <LCD_Init+0x1504>)
 80036e4:	889b      	ldrh	r3, [r3, #4]
 80036e6:	f245 5210 	movw	r2, #21776	; 0x5510
 80036ea:	4293      	cmp	r3, r2
 80036ec:	f040 8782 	bne.w	80045f4 <LCD_Init+0x2404>
 80036f0:	e002      	b.n	80036f8 <LCD_Init+0x1508>
 80036f2:	bf00      	nop
 80036f4:	20005a88 	.word	0x20005a88
		LCD_WriteReg(0xF000, 0x55);
 80036f8:	2155      	movs	r1, #85	; 0x55
 80036fa:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80036fe:	f7fd fadb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8003702:	21aa      	movs	r1, #170	; 0xaa
 8003704:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003708:	f7fd fad6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 800370c:	2152      	movs	r1, #82	; 0x52
 800370e:	f24f 0002 	movw	r0, #61442	; 0xf002
 8003712:	f7fd fad1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8003716:	2108      	movs	r1, #8
 8003718:	f24f 0003 	movw	r0, #61443	; 0xf003
 800371c:	f7fd facc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 8003720:	2101      	movs	r1, #1
 8003722:	f24f 0004 	movw	r0, #61444	; 0xf004
 8003726:	f7fd fac7 	bl	8000cb8 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 800372a:	210d      	movs	r1, #13
 800372c:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8003730:	f7fd fac2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 8003734:	210d      	movs	r1, #13
 8003736:	f24b 0001 	movw	r0, #45057	; 0xb001
 800373a:	f7fd fabd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 800373e:	210d      	movs	r1, #13
 8003740:	f24b 0002 	movw	r0, #45058	; 0xb002
 8003744:	f7fd fab8 	bl	8000cb8 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 8003748:	2134      	movs	r1, #52	; 0x34
 800374a:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 800374e:	f7fd fab3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 8003752:	2134      	movs	r1, #52	; 0x34
 8003754:	f24b 6001 	movw	r0, #46593	; 0xb601
 8003758:	f7fd faae 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 800375c:	2134      	movs	r1, #52	; 0x34
 800375e:	f24b 6002 	movw	r0, #46594	; 0xb602
 8003762:	f7fd faa9 	bl	8000cb8 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 8003766:	210d      	movs	r1, #13
 8003768:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 800376c:	f7fd faa4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 8003770:	210d      	movs	r1, #13
 8003772:	f24b 1001 	movw	r0, #45313	; 0xb101
 8003776:	f7fd fa9f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 800377a:	210d      	movs	r1, #13
 800377c:	f24b 1002 	movw	r0, #45314	; 0xb102
 8003780:	f7fd fa9a 	bl	8000cb8 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 8003784:	2134      	movs	r1, #52	; 0x34
 8003786:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 800378a:	f7fd fa95 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 800378e:	2134      	movs	r1, #52	; 0x34
 8003790:	f24b 7001 	movw	r0, #46849	; 0xb701
 8003794:	f7fd fa90 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 8003798:	2134      	movs	r1, #52	; 0x34
 800379a:	f24b 7002 	movw	r0, #46850	; 0xb702
 800379e:	f7fd fa8b 	bl	8000cb8 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 80037a2:	2100      	movs	r1, #0
 80037a4:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 80037a8:	f7fd fa86 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 80037ac:	2100      	movs	r1, #0
 80037ae:	f24b 2001 	movw	r0, #45569	; 0xb201
 80037b2:	f7fd fa81 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 80037b6:	2100      	movs	r1, #0
 80037b8:	f24b 2002 	movw	r0, #45570	; 0xb202
 80037bc:	f7fd fa7c 	bl	8000cb8 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 80037c0:	2124      	movs	r1, #36	; 0x24
 80037c2:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80037c6:	f7fd fa77 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 80037ca:	2124      	movs	r1, #36	; 0x24
 80037cc:	f64b 0001 	movw	r0, #47105	; 0xb801
 80037d0:	f7fd fa72 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 80037d4:	2124      	movs	r1, #36	; 0x24
 80037d6:	f64b 0002 	movw	r0, #47106	; 0xb802
 80037da:	f7fd fa6d 	bl	8000cb8 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 80037de:	2101      	movs	r1, #1
 80037e0:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 80037e4:	f7fd fa68 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 80037e8:	210f      	movs	r1, #15
 80037ea:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 80037ee:	f7fd fa63 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 80037f2:	210f      	movs	r1, #15
 80037f4:	f24b 3001 	movw	r0, #45825	; 0xb301
 80037f8:	f7fd fa5e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 80037fc:	210f      	movs	r1, #15
 80037fe:	f24b 3002 	movw	r0, #45826	; 0xb302
 8003802:	f7fd fa59 	bl	8000cb8 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 8003806:	2134      	movs	r1, #52	; 0x34
 8003808:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 800380c:	f7fd fa54 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 8003810:	2134      	movs	r1, #52	; 0x34
 8003812:	f64b 1001 	movw	r0, #47361	; 0xb901
 8003816:	f7fd fa4f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 800381a:	2134      	movs	r1, #52	; 0x34
 800381c:	f64b 1002 	movw	r0, #47362	; 0xb902
 8003820:	f7fd fa4a 	bl	8000cb8 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 8003824:	2108      	movs	r1, #8
 8003826:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 800382a:	f7fd fa45 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 800382e:	2108      	movs	r1, #8
 8003830:	f24b 5001 	movw	r0, #46337	; 0xb501
 8003834:	f7fd fa40 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 8003838:	2108      	movs	r1, #8
 800383a:	f24b 5002 	movw	r0, #46338	; 0xb502
 800383e:	f7fd fa3b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 8003842:	2103      	movs	r1, #3
 8003844:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8003848:	f7fd fa36 	bl	8000cb8 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 800384c:	2124      	movs	r1, #36	; 0x24
 800384e:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8003852:	f7fd fa31 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 8003856:	2124      	movs	r1, #36	; 0x24
 8003858:	f64b 2001 	movw	r0, #47617	; 0xba01
 800385c:	f7fd fa2c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 8003860:	2124      	movs	r1, #36	; 0x24
 8003862:	f64b 2002 	movw	r0, #47618	; 0xba02
 8003866:	f7fd fa27 	bl	8000cb8 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 800386a:	2100      	movs	r1, #0
 800386c:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003870:	f7fd fa22 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 8003874:	2178      	movs	r1, #120	; 0x78
 8003876:	f64b 4001 	movw	r0, #48129	; 0xbc01
 800387a:	f7fd fa1d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 800387e:	2100      	movs	r1, #0
 8003880:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8003884:	f7fd fa18 	bl	8000cb8 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 8003888:	2100      	movs	r1, #0
 800388a:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 800388e:	f7fd fa13 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 8003892:	2178      	movs	r1, #120	; 0x78
 8003894:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8003898:	f7fd fa0e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 800389c:	2100      	movs	r1, #0
 800389e:	f64b 5002 	movw	r0, #48386	; 0xbd02
 80038a2:	f7fd fa09 	bl	8000cb8 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 80038a6:	2100      	movs	r1, #0
 80038a8:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 80038ac:	f7fd fa04 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 80038b0:	2164      	movs	r1, #100	; 0x64
 80038b2:	f64b 6001 	movw	r0, #48641	; 0xbe01
 80038b6:	f7fd f9ff 	bl	8000cb8 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 80038ba:	2100      	movs	r1, #0
 80038bc:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 80038c0:	f7fd f9fa 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 80038c4:	2133      	movs	r1, #51	; 0x33
 80038c6:	f24d 1001 	movw	r0, #53505	; 0xd101
 80038ca:	f7fd f9f5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 80038ce:	2100      	movs	r1, #0
 80038d0:	f24d 1002 	movw	r0, #53506	; 0xd102
 80038d4:	f7fd f9f0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 80038d8:	2134      	movs	r1, #52	; 0x34
 80038da:	f24d 1003 	movw	r0, #53507	; 0xd103
 80038de:	f7fd f9eb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 80038e2:	2100      	movs	r1, #0
 80038e4:	f24d 1004 	movw	r0, #53508	; 0xd104
 80038e8:	f7fd f9e6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 80038ec:	213a      	movs	r1, #58	; 0x3a
 80038ee:	f24d 1005 	movw	r0, #53509	; 0xd105
 80038f2:	f7fd f9e1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 80038f6:	2100      	movs	r1, #0
 80038f8:	f24d 1006 	movw	r0, #53510	; 0xd106
 80038fc:	f7fd f9dc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 8003900:	214a      	movs	r1, #74	; 0x4a
 8003902:	f24d 1007 	movw	r0, #53511	; 0xd107
 8003906:	f7fd f9d7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 800390a:	2100      	movs	r1, #0
 800390c:	f24d 1008 	movw	r0, #53512	; 0xd108
 8003910:	f7fd f9d2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 8003914:	215c      	movs	r1, #92	; 0x5c
 8003916:	f24d 1009 	movw	r0, #53513	; 0xd109
 800391a:	f7fd f9cd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 800391e:	2100      	movs	r1, #0
 8003920:	f24d 100a 	movw	r0, #53514	; 0xd10a
 8003924:	f7fd f9c8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 8003928:	2181      	movs	r1, #129	; 0x81
 800392a:	f24d 100b 	movw	r0, #53515	; 0xd10b
 800392e:	f7fd f9c3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 8003932:	2100      	movs	r1, #0
 8003934:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8003938:	f7fd f9be 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 800393c:	21a6      	movs	r1, #166	; 0xa6
 800393e:	f24d 100d 	movw	r0, #53517	; 0xd10d
 8003942:	f7fd f9b9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 8003946:	2100      	movs	r1, #0
 8003948:	f24d 100e 	movw	r0, #53518	; 0xd10e
 800394c:	f7fd f9b4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 8003950:	21e5      	movs	r1, #229	; 0xe5
 8003952:	f24d 100f 	movw	r0, #53519	; 0xd10f
 8003956:	f7fd f9af 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 800395a:	2101      	movs	r1, #1
 800395c:	f24d 1010 	movw	r0, #53520	; 0xd110
 8003960:	f7fd f9aa 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 8003964:	2113      	movs	r1, #19
 8003966:	f24d 1011 	movw	r0, #53521	; 0xd111
 800396a:	f7fd f9a5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 800396e:	2101      	movs	r1, #1
 8003970:	f24d 1012 	movw	r0, #53522	; 0xd112
 8003974:	f7fd f9a0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 8003978:	2154      	movs	r1, #84	; 0x54
 800397a:	f24d 1013 	movw	r0, #53523	; 0xd113
 800397e:	f7fd f99b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 8003982:	2101      	movs	r1, #1
 8003984:	f24d 1014 	movw	r0, #53524	; 0xd114
 8003988:	f7fd f996 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 800398c:	2182      	movs	r1, #130	; 0x82
 800398e:	f24d 1015 	movw	r0, #53525	; 0xd115
 8003992:	f7fd f991 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 8003996:	2101      	movs	r1, #1
 8003998:	f24d 1016 	movw	r0, #53526	; 0xd116
 800399c:	f7fd f98c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 80039a0:	21ca      	movs	r1, #202	; 0xca
 80039a2:	f24d 1017 	movw	r0, #53527	; 0xd117
 80039a6:	f7fd f987 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 80039aa:	2102      	movs	r1, #2
 80039ac:	f24d 1018 	movw	r0, #53528	; 0xd118
 80039b0:	f7fd f982 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 80039b4:	2100      	movs	r1, #0
 80039b6:	f24d 1019 	movw	r0, #53529	; 0xd119
 80039ba:	f7fd f97d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 80039be:	2102      	movs	r1, #2
 80039c0:	f24d 101a 	movw	r0, #53530	; 0xd11a
 80039c4:	f7fd f978 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 80039c8:	2101      	movs	r1, #1
 80039ca:	f24d 101b 	movw	r0, #53531	; 0xd11b
 80039ce:	f7fd f973 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 80039d2:	2102      	movs	r1, #2
 80039d4:	f24d 101c 	movw	r0, #53532	; 0xd11c
 80039d8:	f7fd f96e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 80039dc:	2134      	movs	r1, #52	; 0x34
 80039de:	f24d 101d 	movw	r0, #53533	; 0xd11d
 80039e2:	f7fd f969 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 80039e6:	2102      	movs	r1, #2
 80039e8:	f24d 101e 	movw	r0, #53534	; 0xd11e
 80039ec:	f7fd f964 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 80039f0:	2167      	movs	r1, #103	; 0x67
 80039f2:	f24d 101f 	movw	r0, #53535	; 0xd11f
 80039f6:	f7fd f95f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 80039fa:	2102      	movs	r1, #2
 80039fc:	f24d 1020 	movw	r0, #53536	; 0xd120
 8003a00:	f7fd f95a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 8003a04:	2184      	movs	r1, #132	; 0x84
 8003a06:	f24d 1021 	movw	r0, #53537	; 0xd121
 8003a0a:	f7fd f955 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 8003a0e:	2102      	movs	r1, #2
 8003a10:	f24d 1022 	movw	r0, #53538	; 0xd122
 8003a14:	f7fd f950 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 8003a18:	21a4      	movs	r1, #164	; 0xa4
 8003a1a:	f24d 1023 	movw	r0, #53539	; 0xd123
 8003a1e:	f7fd f94b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 8003a22:	2102      	movs	r1, #2
 8003a24:	f24d 1024 	movw	r0, #53540	; 0xd124
 8003a28:	f7fd f946 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 8003a2c:	21b7      	movs	r1, #183	; 0xb7
 8003a2e:	f24d 1025 	movw	r0, #53541	; 0xd125
 8003a32:	f7fd f941 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 8003a36:	2102      	movs	r1, #2
 8003a38:	f24d 1026 	movw	r0, #53542	; 0xd126
 8003a3c:	f7fd f93c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 8003a40:	21cf      	movs	r1, #207	; 0xcf
 8003a42:	f24d 1027 	movw	r0, #53543	; 0xd127
 8003a46:	f7fd f937 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 8003a4a:	2102      	movs	r1, #2
 8003a4c:	f24d 1028 	movw	r0, #53544	; 0xd128
 8003a50:	f7fd f932 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 8003a54:	21de      	movs	r1, #222	; 0xde
 8003a56:	f24d 1029 	movw	r0, #53545	; 0xd129
 8003a5a:	f7fd f92d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 8003a5e:	2102      	movs	r1, #2
 8003a60:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8003a64:	f7fd f928 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 8003a68:	21f2      	movs	r1, #242	; 0xf2
 8003a6a:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8003a6e:	f7fd f923 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 8003a72:	2102      	movs	r1, #2
 8003a74:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8003a78:	f7fd f91e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 8003a7c:	21fe      	movs	r1, #254	; 0xfe
 8003a7e:	f24d 102d 	movw	r0, #53549	; 0xd12d
 8003a82:	f7fd f919 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 8003a86:	2103      	movs	r1, #3
 8003a88:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8003a8c:	f7fd f914 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 8003a90:	2110      	movs	r1, #16
 8003a92:	f24d 102f 	movw	r0, #53551	; 0xd12f
 8003a96:	f7fd f90f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 8003a9a:	2103      	movs	r1, #3
 8003a9c:	f24d 1030 	movw	r0, #53552	; 0xd130
 8003aa0:	f7fd f90a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 8003aa4:	2133      	movs	r1, #51	; 0x33
 8003aa6:	f24d 1031 	movw	r0, #53553	; 0xd131
 8003aaa:	f7fd f905 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 8003aae:	2103      	movs	r1, #3
 8003ab0:	f24d 1032 	movw	r0, #53554	; 0xd132
 8003ab4:	f7fd f900 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 8003ab8:	216d      	movs	r1, #109	; 0x6d
 8003aba:	f24d 1033 	movw	r0, #53555	; 0xd133
 8003abe:	f7fd f8fb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8003ac8:	f7fd f8f6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 8003acc:	2133      	movs	r1, #51	; 0x33
 8003ace:	f24d 2001 	movw	r0, #53761	; 0xd201
 8003ad2:	f7fd f8f1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	f24d 2002 	movw	r0, #53762	; 0xd202
 8003adc:	f7fd f8ec 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 8003ae0:	2134      	movs	r1, #52	; 0x34
 8003ae2:	f24d 2003 	movw	r0, #53763	; 0xd203
 8003ae6:	f7fd f8e7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 8003aea:	2100      	movs	r1, #0
 8003aec:	f24d 2004 	movw	r0, #53764	; 0xd204
 8003af0:	f7fd f8e2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 8003af4:	213a      	movs	r1, #58	; 0x3a
 8003af6:	f24d 2005 	movw	r0, #53765	; 0xd205
 8003afa:	f7fd f8dd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 8003afe:	2100      	movs	r1, #0
 8003b00:	f24d 2006 	movw	r0, #53766	; 0xd206
 8003b04:	f7fd f8d8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 8003b08:	214a      	movs	r1, #74	; 0x4a
 8003b0a:	f24d 2007 	movw	r0, #53767	; 0xd207
 8003b0e:	f7fd f8d3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 8003b12:	2100      	movs	r1, #0
 8003b14:	f24d 2008 	movw	r0, #53768	; 0xd208
 8003b18:	f7fd f8ce 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 8003b1c:	215c      	movs	r1, #92	; 0x5c
 8003b1e:	f24d 2009 	movw	r0, #53769	; 0xd209
 8003b22:	f7fd f8c9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 8003b26:	2100      	movs	r1, #0
 8003b28:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8003b2c:	f7fd f8c4 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 8003b30:	2181      	movs	r1, #129	; 0x81
 8003b32:	f24d 200b 	movw	r0, #53771	; 0xd20b
 8003b36:	f7fd f8bf 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8003b40:	f7fd f8ba 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 8003b44:	21a6      	movs	r1, #166	; 0xa6
 8003b46:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8003b4a:	f7fd f8b5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 8003b4e:	2100      	movs	r1, #0
 8003b50:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8003b54:	f7fd f8b0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 8003b58:	21e5      	movs	r1, #229	; 0xe5
 8003b5a:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8003b5e:	f7fd f8ab 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 8003b62:	2101      	movs	r1, #1
 8003b64:	f24d 2010 	movw	r0, #53776	; 0xd210
 8003b68:	f7fd f8a6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 8003b6c:	2113      	movs	r1, #19
 8003b6e:	f24d 2011 	movw	r0, #53777	; 0xd211
 8003b72:	f7fd f8a1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 8003b76:	2101      	movs	r1, #1
 8003b78:	f24d 2012 	movw	r0, #53778	; 0xd212
 8003b7c:	f7fd f89c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 8003b80:	2154      	movs	r1, #84	; 0x54
 8003b82:	f24d 2013 	movw	r0, #53779	; 0xd213
 8003b86:	f7fd f897 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	f24d 2014 	movw	r0, #53780	; 0xd214
 8003b90:	f7fd f892 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 8003b94:	2182      	movs	r1, #130	; 0x82
 8003b96:	f24d 2015 	movw	r0, #53781	; 0xd215
 8003b9a:	f7fd f88d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	f24d 2016 	movw	r0, #53782	; 0xd216
 8003ba4:	f7fd f888 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 8003ba8:	21ca      	movs	r1, #202	; 0xca
 8003baa:	f24d 2017 	movw	r0, #53783	; 0xd217
 8003bae:	f7fd f883 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 8003bb2:	2102      	movs	r1, #2
 8003bb4:	f24d 2018 	movw	r0, #53784	; 0xd218
 8003bb8:	f7fd f87e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	f24d 2019 	movw	r0, #53785	; 0xd219
 8003bc2:	f7fd f879 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 8003bc6:	2102      	movs	r1, #2
 8003bc8:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8003bcc:	f7fd f874 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8003bd6:	f7fd f86f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 8003bda:	2102      	movs	r1, #2
 8003bdc:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8003be0:	f7fd f86a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 8003be4:	2134      	movs	r1, #52	; 0x34
 8003be6:	f24d 201d 	movw	r0, #53789	; 0xd21d
 8003bea:	f7fd f865 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 8003bee:	2102      	movs	r1, #2
 8003bf0:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8003bf4:	f7fd f860 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 8003bf8:	2167      	movs	r1, #103	; 0x67
 8003bfa:	f24d 201f 	movw	r0, #53791	; 0xd21f
 8003bfe:	f7fd f85b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 8003c02:	2102      	movs	r1, #2
 8003c04:	f24d 2020 	movw	r0, #53792	; 0xd220
 8003c08:	f7fd f856 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 8003c0c:	2184      	movs	r1, #132	; 0x84
 8003c0e:	f24d 2021 	movw	r0, #53793	; 0xd221
 8003c12:	f7fd f851 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 8003c16:	2102      	movs	r1, #2
 8003c18:	f24d 2022 	movw	r0, #53794	; 0xd222
 8003c1c:	f7fd f84c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 8003c20:	21a4      	movs	r1, #164	; 0xa4
 8003c22:	f24d 2023 	movw	r0, #53795	; 0xd223
 8003c26:	f7fd f847 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 8003c2a:	2102      	movs	r1, #2
 8003c2c:	f24d 2024 	movw	r0, #53796	; 0xd224
 8003c30:	f7fd f842 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 8003c34:	21b7      	movs	r1, #183	; 0xb7
 8003c36:	f24d 2025 	movw	r0, #53797	; 0xd225
 8003c3a:	f7fd f83d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 8003c3e:	2102      	movs	r1, #2
 8003c40:	f24d 2026 	movw	r0, #53798	; 0xd226
 8003c44:	f7fd f838 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 8003c48:	21cf      	movs	r1, #207	; 0xcf
 8003c4a:	f24d 2027 	movw	r0, #53799	; 0xd227
 8003c4e:	f7fd f833 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 8003c52:	2102      	movs	r1, #2
 8003c54:	f24d 2028 	movw	r0, #53800	; 0xd228
 8003c58:	f7fd f82e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 8003c5c:	21de      	movs	r1, #222	; 0xde
 8003c5e:	f24d 2029 	movw	r0, #53801	; 0xd229
 8003c62:	f7fd f829 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 8003c66:	2102      	movs	r1, #2
 8003c68:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8003c6c:	f7fd f824 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 8003c70:	21f2      	movs	r1, #242	; 0xf2
 8003c72:	f24d 202b 	movw	r0, #53803	; 0xd22b
 8003c76:	f7fd f81f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 8003c7a:	2102      	movs	r1, #2
 8003c7c:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8003c80:	f7fd f81a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 8003c84:	21fe      	movs	r1, #254	; 0xfe
 8003c86:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8003c8a:	f7fd f815 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 8003c8e:	2103      	movs	r1, #3
 8003c90:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8003c94:	f7fd f810 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 8003c98:	2110      	movs	r1, #16
 8003c9a:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8003c9e:	f7fd f80b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 8003ca2:	2103      	movs	r1, #3
 8003ca4:	f24d 2030 	movw	r0, #53808	; 0xd230
 8003ca8:	f7fd f806 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 8003cac:	2133      	movs	r1, #51	; 0x33
 8003cae:	f24d 2031 	movw	r0, #53809	; 0xd231
 8003cb2:	f7fd f801 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 8003cb6:	2103      	movs	r1, #3
 8003cb8:	f24d 2032 	movw	r0, #53810	; 0xd232
 8003cbc:	f7fc fffc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 8003cc0:	216d      	movs	r1, #109	; 0x6d
 8003cc2:	f24d 2033 	movw	r0, #53811	; 0xd233
 8003cc6:	f7fc fff7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 8003cca:	2100      	movs	r1, #0
 8003ccc:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8003cd0:	f7fc fff2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 8003cd4:	2133      	movs	r1, #51	; 0x33
 8003cd6:	f24d 3001 	movw	r0, #54017	; 0xd301
 8003cda:	f7fc ffed 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 8003cde:	2100      	movs	r1, #0
 8003ce0:	f24d 3002 	movw	r0, #54018	; 0xd302
 8003ce4:	f7fc ffe8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 8003ce8:	2134      	movs	r1, #52	; 0x34
 8003cea:	f24d 3003 	movw	r0, #54019	; 0xd303
 8003cee:	f7fc ffe3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	f24d 3004 	movw	r0, #54020	; 0xd304
 8003cf8:	f7fc ffde 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 8003cfc:	213a      	movs	r1, #58	; 0x3a
 8003cfe:	f24d 3005 	movw	r0, #54021	; 0xd305
 8003d02:	f7fc ffd9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 8003d06:	2100      	movs	r1, #0
 8003d08:	f24d 3006 	movw	r0, #54022	; 0xd306
 8003d0c:	f7fc ffd4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 8003d10:	214a      	movs	r1, #74	; 0x4a
 8003d12:	f24d 3007 	movw	r0, #54023	; 0xd307
 8003d16:	f7fc ffcf 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	f24d 3008 	movw	r0, #54024	; 0xd308
 8003d20:	f7fc ffca 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 8003d24:	215c      	movs	r1, #92	; 0x5c
 8003d26:	f24d 3009 	movw	r0, #54025	; 0xd309
 8003d2a:	f7fc ffc5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 8003d2e:	2100      	movs	r1, #0
 8003d30:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8003d34:	f7fc ffc0 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8003d38:	2181      	movs	r1, #129	; 0x81
 8003d3a:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8003d3e:	f7fc ffbb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 8003d42:	2100      	movs	r1, #0
 8003d44:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8003d48:	f7fc ffb6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 8003d4c:	21a6      	movs	r1, #166	; 0xa6
 8003d4e:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8003d52:	f7fc ffb1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 8003d56:	2100      	movs	r1, #0
 8003d58:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8003d5c:	f7fc ffac 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 8003d60:	21e5      	movs	r1, #229	; 0xe5
 8003d62:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8003d66:	f7fc ffa7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	f24d 3010 	movw	r0, #54032	; 0xd310
 8003d70:	f7fc ffa2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 8003d74:	2113      	movs	r1, #19
 8003d76:	f24d 3011 	movw	r0, #54033	; 0xd311
 8003d7a:	f7fc ff9d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 8003d7e:	2101      	movs	r1, #1
 8003d80:	f24d 3012 	movw	r0, #54034	; 0xd312
 8003d84:	f7fc ff98 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 8003d88:	2154      	movs	r1, #84	; 0x54
 8003d8a:	f24d 3013 	movw	r0, #54035	; 0xd313
 8003d8e:	f7fc ff93 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 8003d92:	2101      	movs	r1, #1
 8003d94:	f24d 3014 	movw	r0, #54036	; 0xd314
 8003d98:	f7fc ff8e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 8003d9c:	2182      	movs	r1, #130	; 0x82
 8003d9e:	f24d 3015 	movw	r0, #54037	; 0xd315
 8003da2:	f7fc ff89 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 8003da6:	2101      	movs	r1, #1
 8003da8:	f24d 3016 	movw	r0, #54038	; 0xd316
 8003dac:	f7fc ff84 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 8003db0:	21ca      	movs	r1, #202	; 0xca
 8003db2:	f24d 3017 	movw	r0, #54039	; 0xd317
 8003db6:	f7fc ff7f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 8003dba:	2102      	movs	r1, #2
 8003dbc:	f24d 3018 	movw	r0, #54040	; 0xd318
 8003dc0:	f7fc ff7a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	f24d 3019 	movw	r0, #54041	; 0xd319
 8003dca:	f7fc ff75 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 8003dce:	2102      	movs	r1, #2
 8003dd0:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8003dd4:	f7fc ff70 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 8003dd8:	2101      	movs	r1, #1
 8003dda:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8003dde:	f7fc ff6b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 8003de2:	2102      	movs	r1, #2
 8003de4:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8003de8:	f7fc ff66 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 8003dec:	2134      	movs	r1, #52	; 0x34
 8003dee:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8003df2:	f7fc ff61 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 8003df6:	2102      	movs	r1, #2
 8003df8:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8003dfc:	f7fc ff5c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 8003e00:	2167      	movs	r1, #103	; 0x67
 8003e02:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8003e06:	f7fc ff57 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 8003e0a:	2102      	movs	r1, #2
 8003e0c:	f24d 3020 	movw	r0, #54048	; 0xd320
 8003e10:	f7fc ff52 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 8003e14:	2184      	movs	r1, #132	; 0x84
 8003e16:	f24d 3021 	movw	r0, #54049	; 0xd321
 8003e1a:	f7fc ff4d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 8003e1e:	2102      	movs	r1, #2
 8003e20:	f24d 3022 	movw	r0, #54050	; 0xd322
 8003e24:	f7fc ff48 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8003e28:	21a4      	movs	r1, #164	; 0xa4
 8003e2a:	f24d 3023 	movw	r0, #54051	; 0xd323
 8003e2e:	f7fc ff43 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 8003e32:	2102      	movs	r1, #2
 8003e34:	f24d 3024 	movw	r0, #54052	; 0xd324
 8003e38:	f7fc ff3e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 8003e3c:	21b7      	movs	r1, #183	; 0xb7
 8003e3e:	f24d 3025 	movw	r0, #54053	; 0xd325
 8003e42:	f7fc ff39 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 8003e46:	2102      	movs	r1, #2
 8003e48:	f24d 3026 	movw	r0, #54054	; 0xd326
 8003e4c:	f7fc ff34 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8003e50:	21cf      	movs	r1, #207	; 0xcf
 8003e52:	f24d 3027 	movw	r0, #54055	; 0xd327
 8003e56:	f7fc ff2f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 8003e5a:	2102      	movs	r1, #2
 8003e5c:	f24d 3028 	movw	r0, #54056	; 0xd328
 8003e60:	f7fc ff2a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 8003e64:	21de      	movs	r1, #222	; 0xde
 8003e66:	f24d 3029 	movw	r0, #54057	; 0xd329
 8003e6a:	f7fc ff25 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 8003e6e:	2102      	movs	r1, #2
 8003e70:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8003e74:	f7fc ff20 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 8003e78:	21f2      	movs	r1, #242	; 0xf2
 8003e7a:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8003e7e:	f7fc ff1b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 8003e82:	2102      	movs	r1, #2
 8003e84:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8003e88:	f7fc ff16 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 8003e8c:	21fe      	movs	r1, #254	; 0xfe
 8003e8e:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8003e92:	f7fc ff11 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 8003e96:	2103      	movs	r1, #3
 8003e98:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8003e9c:	f7fc ff0c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 8003ea0:	2110      	movs	r1, #16
 8003ea2:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8003ea6:	f7fc ff07 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 8003eaa:	2103      	movs	r1, #3
 8003eac:	f24d 3030 	movw	r0, #54064	; 0xd330
 8003eb0:	f7fc ff02 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 8003eb4:	2133      	movs	r1, #51	; 0x33
 8003eb6:	f24d 3031 	movw	r0, #54065	; 0xd331
 8003eba:	f7fc fefd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 8003ebe:	2103      	movs	r1, #3
 8003ec0:	f24d 3032 	movw	r0, #54066	; 0xd332
 8003ec4:	f7fc fef8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8003ec8:	216d      	movs	r1, #109	; 0x6d
 8003eca:	f24d 3033 	movw	r0, #54067	; 0xd333
 8003ece:	f7fc fef3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8003ed8:	f7fc feee 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 8003edc:	2133      	movs	r1, #51	; 0x33
 8003ede:	f24d 4001 	movw	r0, #54273	; 0xd401
 8003ee2:	f7fc fee9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	f24d 4002 	movw	r0, #54274	; 0xd402
 8003eec:	f7fc fee4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 8003ef0:	2134      	movs	r1, #52	; 0x34
 8003ef2:	f24d 4003 	movw	r0, #54275	; 0xd403
 8003ef6:	f7fc fedf 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 8003efa:	2100      	movs	r1, #0
 8003efc:	f24d 4004 	movw	r0, #54276	; 0xd404
 8003f00:	f7fc feda 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 8003f04:	213a      	movs	r1, #58	; 0x3a
 8003f06:	f24d 4005 	movw	r0, #54277	; 0xd405
 8003f0a:	f7fc fed5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 8003f0e:	2100      	movs	r1, #0
 8003f10:	f24d 4006 	movw	r0, #54278	; 0xd406
 8003f14:	f7fc fed0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8003f18:	214a      	movs	r1, #74	; 0x4a
 8003f1a:	f24d 4007 	movw	r0, #54279	; 0xd407
 8003f1e:	f7fc fecb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 8003f22:	2100      	movs	r1, #0
 8003f24:	f24d 4008 	movw	r0, #54280	; 0xd408
 8003f28:	f7fc fec6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 8003f2c:	215c      	movs	r1, #92	; 0x5c
 8003f2e:	f24d 4009 	movw	r0, #54281	; 0xd409
 8003f32:	f7fc fec1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 8003f36:	2100      	movs	r1, #0
 8003f38:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8003f3c:	f7fc febc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8003f40:	2181      	movs	r1, #129	; 0x81
 8003f42:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8003f46:	f7fc feb7 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8003f50:	f7fc feb2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 8003f54:	21a6      	movs	r1, #166	; 0xa6
 8003f56:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8003f5a:	f7fc fead 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 8003f5e:	2100      	movs	r1, #0
 8003f60:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8003f64:	f7fc fea8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 8003f68:	21e5      	movs	r1, #229	; 0xe5
 8003f6a:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8003f6e:	f7fc fea3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 8003f72:	2101      	movs	r1, #1
 8003f74:	f24d 4010 	movw	r0, #54288	; 0xd410
 8003f78:	f7fc fe9e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 8003f7c:	2113      	movs	r1, #19
 8003f7e:	f24d 4011 	movw	r0, #54289	; 0xd411
 8003f82:	f7fc fe99 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 8003f86:	2101      	movs	r1, #1
 8003f88:	f24d 4012 	movw	r0, #54290	; 0xd412
 8003f8c:	f7fc fe94 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 8003f90:	2154      	movs	r1, #84	; 0x54
 8003f92:	f24d 4013 	movw	r0, #54291	; 0xd413
 8003f96:	f7fc fe8f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	f24d 4014 	movw	r0, #54292	; 0xd414
 8003fa0:	f7fc fe8a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 8003fa4:	2182      	movs	r1, #130	; 0x82
 8003fa6:	f24d 4015 	movw	r0, #54293	; 0xd415
 8003faa:	f7fc fe85 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 8003fae:	2101      	movs	r1, #1
 8003fb0:	f24d 4016 	movw	r0, #54294	; 0xd416
 8003fb4:	f7fc fe80 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8003fb8:	21ca      	movs	r1, #202	; 0xca
 8003fba:	f24d 4017 	movw	r0, #54295	; 0xd417
 8003fbe:	f7fc fe7b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 8003fc2:	2102      	movs	r1, #2
 8003fc4:	f24d 4018 	movw	r0, #54296	; 0xd418
 8003fc8:	f7fc fe76 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 8003fcc:	2100      	movs	r1, #0
 8003fce:	f24d 4019 	movw	r0, #54297	; 0xd419
 8003fd2:	f7fc fe71 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 8003fd6:	2102      	movs	r1, #2
 8003fd8:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8003fdc:	f7fc fe6c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8003fe6:	f7fc fe67 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 8003fea:	2102      	movs	r1, #2
 8003fec:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8003ff0:	f7fc fe62 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 8003ff4:	2134      	movs	r1, #52	; 0x34
 8003ff6:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8003ffa:	f7fc fe5d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 8003ffe:	2102      	movs	r1, #2
 8004000:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8004004:	f7fc fe58 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 8004008:	2167      	movs	r1, #103	; 0x67
 800400a:	f24d 401f 	movw	r0, #54303	; 0xd41f
 800400e:	f7fc fe53 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 8004012:	2102      	movs	r1, #2
 8004014:	f24d 4020 	movw	r0, #54304	; 0xd420
 8004018:	f7fc fe4e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 800401c:	2184      	movs	r1, #132	; 0x84
 800401e:	f24d 4021 	movw	r0, #54305	; 0xd421
 8004022:	f7fc fe49 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 8004026:	2102      	movs	r1, #2
 8004028:	f24d 4022 	movw	r0, #54306	; 0xd422
 800402c:	f7fc fe44 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 8004030:	21a4      	movs	r1, #164	; 0xa4
 8004032:	f24d 4023 	movw	r0, #54307	; 0xd423
 8004036:	f7fc fe3f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 800403a:	2102      	movs	r1, #2
 800403c:	f24d 4024 	movw	r0, #54308	; 0xd424
 8004040:	f7fc fe3a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 8004044:	21b7      	movs	r1, #183	; 0xb7
 8004046:	f24d 4025 	movw	r0, #54309	; 0xd425
 800404a:	f7fc fe35 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 800404e:	2102      	movs	r1, #2
 8004050:	f24d 4026 	movw	r0, #54310	; 0xd426
 8004054:	f7fc fe30 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 8004058:	21cf      	movs	r1, #207	; 0xcf
 800405a:	f24d 4027 	movw	r0, #54311	; 0xd427
 800405e:	f7fc fe2b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 8004062:	2102      	movs	r1, #2
 8004064:	f24d 4028 	movw	r0, #54312	; 0xd428
 8004068:	f7fc fe26 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 800406c:	21de      	movs	r1, #222	; 0xde
 800406e:	f24d 4029 	movw	r0, #54313	; 0xd429
 8004072:	f7fc fe21 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 8004076:	2102      	movs	r1, #2
 8004078:	f24d 402a 	movw	r0, #54314	; 0xd42a
 800407c:	f7fc fe1c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 8004080:	21f2      	movs	r1, #242	; 0xf2
 8004082:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8004086:	f7fc fe17 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 800408a:	2102      	movs	r1, #2
 800408c:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8004090:	f7fc fe12 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 8004094:	21fe      	movs	r1, #254	; 0xfe
 8004096:	f24d 402d 	movw	r0, #54317	; 0xd42d
 800409a:	f7fc fe0d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 800409e:	2103      	movs	r1, #3
 80040a0:	f24d 402e 	movw	r0, #54318	; 0xd42e
 80040a4:	f7fc fe08 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 80040a8:	2110      	movs	r1, #16
 80040aa:	f24d 402f 	movw	r0, #54319	; 0xd42f
 80040ae:	f7fc fe03 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 80040b2:	2103      	movs	r1, #3
 80040b4:	f24d 4030 	movw	r0, #54320	; 0xd430
 80040b8:	f7fc fdfe 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 80040bc:	2133      	movs	r1, #51	; 0x33
 80040be:	f24d 4031 	movw	r0, #54321	; 0xd431
 80040c2:	f7fc fdf9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 80040c6:	2103      	movs	r1, #3
 80040c8:	f24d 4032 	movw	r0, #54322	; 0xd432
 80040cc:	f7fc fdf4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 80040d0:	216d      	movs	r1, #109	; 0x6d
 80040d2:	f24d 4033 	movw	r0, #54323	; 0xd433
 80040d6:	f7fc fdef 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 80040da:	2100      	movs	r1, #0
 80040dc:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 80040e0:	f7fc fdea 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 80040e4:	2133      	movs	r1, #51	; 0x33
 80040e6:	f24d 5001 	movw	r0, #54529	; 0xd501
 80040ea:	f7fc fde5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 80040ee:	2100      	movs	r1, #0
 80040f0:	f24d 5002 	movw	r0, #54530	; 0xd502
 80040f4:	f7fc fde0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 80040f8:	2134      	movs	r1, #52	; 0x34
 80040fa:	f24d 5003 	movw	r0, #54531	; 0xd503
 80040fe:	f7fc fddb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 8004102:	2100      	movs	r1, #0
 8004104:	f24d 5004 	movw	r0, #54532	; 0xd504
 8004108:	f7fc fdd6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 800410c:	213a      	movs	r1, #58	; 0x3a
 800410e:	f24d 5005 	movw	r0, #54533	; 0xd505
 8004112:	f7fc fdd1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 8004116:	2100      	movs	r1, #0
 8004118:	f24d 5006 	movw	r0, #54534	; 0xd506
 800411c:	f7fc fdcc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 8004120:	214a      	movs	r1, #74	; 0x4a
 8004122:	f24d 5007 	movw	r0, #54535	; 0xd507
 8004126:	f7fc fdc7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 800412a:	2100      	movs	r1, #0
 800412c:	f24d 5008 	movw	r0, #54536	; 0xd508
 8004130:	f7fc fdc2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 8004134:	215c      	movs	r1, #92	; 0x5c
 8004136:	f24d 5009 	movw	r0, #54537	; 0xd509
 800413a:	f7fc fdbd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 800413e:	2100      	movs	r1, #0
 8004140:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8004144:	f7fc fdb8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 8004148:	2181      	movs	r1, #129	; 0x81
 800414a:	f24d 500b 	movw	r0, #54539	; 0xd50b
 800414e:	f7fc fdb3 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 8004152:	2100      	movs	r1, #0
 8004154:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8004158:	f7fc fdae 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 800415c:	21a6      	movs	r1, #166	; 0xa6
 800415e:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8004162:	f7fc fda9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 8004166:	2100      	movs	r1, #0
 8004168:	f24d 500e 	movw	r0, #54542	; 0xd50e
 800416c:	f7fc fda4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 8004170:	21e5      	movs	r1, #229	; 0xe5
 8004172:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8004176:	f7fc fd9f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 800417a:	2101      	movs	r1, #1
 800417c:	f24d 5010 	movw	r0, #54544	; 0xd510
 8004180:	f7fc fd9a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 8004184:	2113      	movs	r1, #19
 8004186:	f24d 5011 	movw	r0, #54545	; 0xd511
 800418a:	f7fc fd95 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 800418e:	2101      	movs	r1, #1
 8004190:	f24d 5012 	movw	r0, #54546	; 0xd512
 8004194:	f7fc fd90 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 8004198:	2154      	movs	r1, #84	; 0x54
 800419a:	f24d 5013 	movw	r0, #54547	; 0xd513
 800419e:	f7fc fd8b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 80041a2:	2101      	movs	r1, #1
 80041a4:	f24d 5014 	movw	r0, #54548	; 0xd514
 80041a8:	f7fc fd86 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 80041ac:	2182      	movs	r1, #130	; 0x82
 80041ae:	f24d 5015 	movw	r0, #54549	; 0xd515
 80041b2:	f7fc fd81 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 80041b6:	2101      	movs	r1, #1
 80041b8:	f24d 5016 	movw	r0, #54550	; 0xd516
 80041bc:	f7fc fd7c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 80041c0:	21ca      	movs	r1, #202	; 0xca
 80041c2:	f24d 5017 	movw	r0, #54551	; 0xd517
 80041c6:	f7fc fd77 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 80041ca:	2102      	movs	r1, #2
 80041cc:	f24d 5018 	movw	r0, #54552	; 0xd518
 80041d0:	f7fc fd72 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 80041d4:	2100      	movs	r1, #0
 80041d6:	f24d 5019 	movw	r0, #54553	; 0xd519
 80041da:	f7fc fd6d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 80041de:	2102      	movs	r1, #2
 80041e0:	f24d 501a 	movw	r0, #54554	; 0xd51a
 80041e4:	f7fc fd68 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 80041e8:	2101      	movs	r1, #1
 80041ea:	f24d 501b 	movw	r0, #54555	; 0xd51b
 80041ee:	f7fc fd63 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 80041f2:	2102      	movs	r1, #2
 80041f4:	f24d 501c 	movw	r0, #54556	; 0xd51c
 80041f8:	f7fc fd5e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 80041fc:	2134      	movs	r1, #52	; 0x34
 80041fe:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8004202:	f7fc fd59 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 8004206:	2102      	movs	r1, #2
 8004208:	f24d 501e 	movw	r0, #54558	; 0xd51e
 800420c:	f7fc fd54 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 8004210:	2167      	movs	r1, #103	; 0x67
 8004212:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8004216:	f7fc fd4f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 800421a:	2102      	movs	r1, #2
 800421c:	f24d 5020 	movw	r0, #54560	; 0xd520
 8004220:	f7fc fd4a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 8004224:	2184      	movs	r1, #132	; 0x84
 8004226:	f24d 5021 	movw	r0, #54561	; 0xd521
 800422a:	f7fc fd45 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 800422e:	2102      	movs	r1, #2
 8004230:	f24d 5022 	movw	r0, #54562	; 0xd522
 8004234:	f7fc fd40 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 8004238:	21a4      	movs	r1, #164	; 0xa4
 800423a:	f24d 5023 	movw	r0, #54563	; 0xd523
 800423e:	f7fc fd3b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 8004242:	2102      	movs	r1, #2
 8004244:	f24d 5024 	movw	r0, #54564	; 0xd524
 8004248:	f7fc fd36 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 800424c:	21b7      	movs	r1, #183	; 0xb7
 800424e:	f24d 5025 	movw	r0, #54565	; 0xd525
 8004252:	f7fc fd31 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 8004256:	2102      	movs	r1, #2
 8004258:	f24d 5026 	movw	r0, #54566	; 0xd526
 800425c:	f7fc fd2c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 8004260:	21cf      	movs	r1, #207	; 0xcf
 8004262:	f24d 5027 	movw	r0, #54567	; 0xd527
 8004266:	f7fc fd27 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 800426a:	2102      	movs	r1, #2
 800426c:	f24d 5028 	movw	r0, #54568	; 0xd528
 8004270:	f7fc fd22 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 8004274:	21de      	movs	r1, #222	; 0xde
 8004276:	f24d 5029 	movw	r0, #54569	; 0xd529
 800427a:	f7fc fd1d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 800427e:	2102      	movs	r1, #2
 8004280:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8004284:	f7fc fd18 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 8004288:	21f2      	movs	r1, #242	; 0xf2
 800428a:	f24d 502b 	movw	r0, #54571	; 0xd52b
 800428e:	f7fc fd13 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 8004292:	2102      	movs	r1, #2
 8004294:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8004298:	f7fc fd0e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 800429c:	21fe      	movs	r1, #254	; 0xfe
 800429e:	f24d 502d 	movw	r0, #54573	; 0xd52d
 80042a2:	f7fc fd09 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 80042a6:	2103      	movs	r1, #3
 80042a8:	f24d 502e 	movw	r0, #54574	; 0xd52e
 80042ac:	f7fc fd04 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 80042b0:	2110      	movs	r1, #16
 80042b2:	f24d 502f 	movw	r0, #54575	; 0xd52f
 80042b6:	f7fc fcff 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 80042ba:	2103      	movs	r1, #3
 80042bc:	f24d 5030 	movw	r0, #54576	; 0xd530
 80042c0:	f7fc fcfa 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 80042c4:	2133      	movs	r1, #51	; 0x33
 80042c6:	f24d 5031 	movw	r0, #54577	; 0xd531
 80042ca:	f7fc fcf5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 80042ce:	2103      	movs	r1, #3
 80042d0:	f24d 5032 	movw	r0, #54578	; 0xd532
 80042d4:	f7fc fcf0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 80042d8:	216d      	movs	r1, #109	; 0x6d
 80042da:	f24d 5033 	movw	r0, #54579	; 0xd533
 80042de:	f7fc fceb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 80042e2:	2100      	movs	r1, #0
 80042e4:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 80042e8:	f7fc fce6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 80042ec:	2133      	movs	r1, #51	; 0x33
 80042ee:	f24d 6001 	movw	r0, #54785	; 0xd601
 80042f2:	f7fc fce1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 80042f6:	2100      	movs	r1, #0
 80042f8:	f24d 6002 	movw	r0, #54786	; 0xd602
 80042fc:	f7fc fcdc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 8004300:	2134      	movs	r1, #52	; 0x34
 8004302:	f24d 6003 	movw	r0, #54787	; 0xd603
 8004306:	f7fc fcd7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 800430a:	2100      	movs	r1, #0
 800430c:	f24d 6004 	movw	r0, #54788	; 0xd604
 8004310:	f7fc fcd2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 8004314:	213a      	movs	r1, #58	; 0x3a
 8004316:	f24d 6005 	movw	r0, #54789	; 0xd605
 800431a:	f7fc fccd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 800431e:	2100      	movs	r1, #0
 8004320:	f24d 6006 	movw	r0, #54790	; 0xd606
 8004324:	f7fc fcc8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 8004328:	214a      	movs	r1, #74	; 0x4a
 800432a:	f24d 6007 	movw	r0, #54791	; 0xd607
 800432e:	f7fc fcc3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 8004332:	2100      	movs	r1, #0
 8004334:	f24d 6008 	movw	r0, #54792	; 0xd608
 8004338:	f7fc fcbe 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 800433c:	215c      	movs	r1, #92	; 0x5c
 800433e:	f24d 6009 	movw	r0, #54793	; 0xd609
 8004342:	f7fc fcb9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 8004346:	2100      	movs	r1, #0
 8004348:	f24d 600a 	movw	r0, #54794	; 0xd60a
 800434c:	f7fc fcb4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 8004350:	2181      	movs	r1, #129	; 0x81
 8004352:	f24d 600b 	movw	r0, #54795	; 0xd60b
 8004356:	f7fc fcaf 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 800435a:	2100      	movs	r1, #0
 800435c:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8004360:	f7fc fcaa 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 8004364:	21a6      	movs	r1, #166	; 0xa6
 8004366:	f24d 600d 	movw	r0, #54797	; 0xd60d
 800436a:	f7fc fca5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 800436e:	2100      	movs	r1, #0
 8004370:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8004374:	f7fc fca0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 8004378:	21e5      	movs	r1, #229	; 0xe5
 800437a:	f24d 600f 	movw	r0, #54799	; 0xd60f
 800437e:	f7fc fc9b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 8004382:	2101      	movs	r1, #1
 8004384:	f24d 6010 	movw	r0, #54800	; 0xd610
 8004388:	f7fc fc96 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 800438c:	2113      	movs	r1, #19
 800438e:	f24d 6011 	movw	r0, #54801	; 0xd611
 8004392:	f7fc fc91 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 8004396:	2101      	movs	r1, #1
 8004398:	f24d 6012 	movw	r0, #54802	; 0xd612
 800439c:	f7fc fc8c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 80043a0:	2154      	movs	r1, #84	; 0x54
 80043a2:	f24d 6013 	movw	r0, #54803	; 0xd613
 80043a6:	f7fc fc87 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 80043aa:	2101      	movs	r1, #1
 80043ac:	f24d 6014 	movw	r0, #54804	; 0xd614
 80043b0:	f7fc fc82 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 80043b4:	2182      	movs	r1, #130	; 0x82
 80043b6:	f24d 6015 	movw	r0, #54805	; 0xd615
 80043ba:	f7fc fc7d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 80043be:	2101      	movs	r1, #1
 80043c0:	f24d 6016 	movw	r0, #54806	; 0xd616
 80043c4:	f7fc fc78 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 80043c8:	21ca      	movs	r1, #202	; 0xca
 80043ca:	f24d 6017 	movw	r0, #54807	; 0xd617
 80043ce:	f7fc fc73 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 80043d2:	2102      	movs	r1, #2
 80043d4:	f24d 6018 	movw	r0, #54808	; 0xd618
 80043d8:	f7fc fc6e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 80043dc:	2100      	movs	r1, #0
 80043de:	f24d 6019 	movw	r0, #54809	; 0xd619
 80043e2:	f7fc fc69 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 80043e6:	2102      	movs	r1, #2
 80043e8:	f24d 601a 	movw	r0, #54810	; 0xd61a
 80043ec:	f7fc fc64 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 80043f0:	2101      	movs	r1, #1
 80043f2:	f24d 601b 	movw	r0, #54811	; 0xd61b
 80043f6:	f7fc fc5f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 80043fa:	2102      	movs	r1, #2
 80043fc:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8004400:	f7fc fc5a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 8004404:	2134      	movs	r1, #52	; 0x34
 8004406:	f24d 601d 	movw	r0, #54813	; 0xd61d
 800440a:	f7fc fc55 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 800440e:	2102      	movs	r1, #2
 8004410:	f24d 601e 	movw	r0, #54814	; 0xd61e
 8004414:	f7fc fc50 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 8004418:	2167      	movs	r1, #103	; 0x67
 800441a:	f24d 601f 	movw	r0, #54815	; 0xd61f
 800441e:	f7fc fc4b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 8004422:	2102      	movs	r1, #2
 8004424:	f24d 6020 	movw	r0, #54816	; 0xd620
 8004428:	f7fc fc46 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 800442c:	2184      	movs	r1, #132	; 0x84
 800442e:	f24d 6021 	movw	r0, #54817	; 0xd621
 8004432:	f7fc fc41 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 8004436:	2102      	movs	r1, #2
 8004438:	f24d 6022 	movw	r0, #54818	; 0xd622
 800443c:	f7fc fc3c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 8004440:	21a4      	movs	r1, #164	; 0xa4
 8004442:	f24d 6023 	movw	r0, #54819	; 0xd623
 8004446:	f7fc fc37 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 800444a:	2102      	movs	r1, #2
 800444c:	f24d 6024 	movw	r0, #54820	; 0xd624
 8004450:	f7fc fc32 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 8004454:	21b7      	movs	r1, #183	; 0xb7
 8004456:	f24d 6025 	movw	r0, #54821	; 0xd625
 800445a:	f7fc fc2d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 800445e:	2102      	movs	r1, #2
 8004460:	f24d 6026 	movw	r0, #54822	; 0xd626
 8004464:	f7fc fc28 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 8004468:	21cf      	movs	r1, #207	; 0xcf
 800446a:	f24d 6027 	movw	r0, #54823	; 0xd627
 800446e:	f7fc fc23 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 8004472:	2102      	movs	r1, #2
 8004474:	f24d 6028 	movw	r0, #54824	; 0xd628
 8004478:	f7fc fc1e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 800447c:	21de      	movs	r1, #222	; 0xde
 800447e:	f24d 6029 	movw	r0, #54825	; 0xd629
 8004482:	f7fc fc19 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 8004486:	2102      	movs	r1, #2
 8004488:	f24d 602a 	movw	r0, #54826	; 0xd62a
 800448c:	f7fc fc14 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 8004490:	21f2      	movs	r1, #242	; 0xf2
 8004492:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8004496:	f7fc fc0f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 800449a:	2102      	movs	r1, #2
 800449c:	f24d 602c 	movw	r0, #54828	; 0xd62c
 80044a0:	f7fc fc0a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 80044a4:	21fe      	movs	r1, #254	; 0xfe
 80044a6:	f24d 602d 	movw	r0, #54829	; 0xd62d
 80044aa:	f7fc fc05 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 80044ae:	2103      	movs	r1, #3
 80044b0:	f24d 602e 	movw	r0, #54830	; 0xd62e
 80044b4:	f7fc fc00 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 80044b8:	2110      	movs	r1, #16
 80044ba:	f24d 602f 	movw	r0, #54831	; 0xd62f
 80044be:	f7fc fbfb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 80044c2:	2103      	movs	r1, #3
 80044c4:	f24d 6030 	movw	r0, #54832	; 0xd630
 80044c8:	f7fc fbf6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 80044cc:	2133      	movs	r1, #51	; 0x33
 80044ce:	f24d 6031 	movw	r0, #54833	; 0xd631
 80044d2:	f7fc fbf1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 80044d6:	2103      	movs	r1, #3
 80044d8:	f24d 6032 	movw	r0, #54834	; 0xd632
 80044dc:	f7fc fbec 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 80044e0:	216d      	movs	r1, #109	; 0x6d
 80044e2:	f24d 6033 	movw	r0, #54835	; 0xd633
 80044e6:	f7fc fbe7 	bl	8000cb8 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 80044ea:	2155      	movs	r1, #85	; 0x55
 80044ec:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80044f0:	f7fc fbe2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 80044f4:	21aa      	movs	r1, #170	; 0xaa
 80044f6:	f24f 0001 	movw	r0, #61441	; 0xf001
 80044fa:	f7fc fbdd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 80044fe:	2152      	movs	r1, #82	; 0x52
 8004500:	f24f 0002 	movw	r0, #61442	; 0xf002
 8004504:	f7fc fbd8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8004508:	2108      	movs	r1, #8
 800450a:	f24f 0003 	movw	r0, #61443	; 0xf003
 800450e:	f7fc fbd3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 8004512:	2100      	movs	r1, #0
 8004514:	f24f 0004 	movw	r0, #61444	; 0xf004
 8004518:	f7fc fbce 	bl	8000cb8 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 800451c:	21cc      	movs	r1, #204	; 0xcc
 800451e:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8004522:	f7fc fbc9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 8004526:	2100      	movs	r1, #0
 8004528:	f24b 1001 	movw	r0, #45313	; 0xb101
 800452c:	f7fc fbc4 	bl	8000cb8 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 8004530:	2105      	movs	r1, #5
 8004532:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8004536:	f7fc fbbf 	bl	8000cb8 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 800453a:	2170      	movs	r1, #112	; 0x70
 800453c:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8004540:	f7fc fbba 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 8004544:	2170      	movs	r1, #112	; 0x70
 8004546:	f24b 7001 	movw	r0, #46849	; 0xb701
 800454a:	f7fc fbb5 	bl	8000cb8 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 800454e:	2101      	movs	r1, #1
 8004550:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8004554:	f7fc fbb0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 8004558:	2103      	movs	r1, #3
 800455a:	f64b 0001 	movw	r0, #47105	; 0xb801
 800455e:	f7fc fbab 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 8004562:	2103      	movs	r1, #3
 8004564:	f64b 0002 	movw	r0, #47106	; 0xb802
 8004568:	f7fc fba6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 800456c:	2103      	movs	r1, #3
 800456e:	f64b 0003 	movw	r0, #47107	; 0xb803
 8004572:	f7fc fba1 	bl	8000cb8 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 8004576:	2102      	movs	r1, #2
 8004578:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 800457c:	f7fc fb9c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 8004580:	2100      	movs	r1, #0
 8004582:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8004586:	f7fc fb97 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 800458a:	2100      	movs	r1, #0
 800458c:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8004590:	f7fc fb92 	bl	8000cb8 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 8004594:	21d0      	movs	r1, #208	; 0xd0
 8004596:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 800459a:	f7fc fb8d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 800459e:	2102      	movs	r1, #2
 80045a0:	f64c 1001 	movw	r0, #51457	; 0xc901
 80045a4:	f7fc fb88 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 80045a8:	2150      	movs	r1, #80	; 0x50
 80045aa:	f64c 1002 	movw	r0, #51458	; 0xc902
 80045ae:	f7fc fb83 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 80045b2:	2150      	movs	r1, #80	; 0x50
 80045b4:	f64c 1003 	movw	r0, #51459	; 0xc903
 80045b8:	f7fc fb7e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 80045bc:	2150      	movs	r1, #80	; 0x50
 80045be:	f64c 1004 	movw	r0, #51460	; 0xc904
 80045c2:	f7fc fb79 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 80045c6:	2100      	movs	r1, #0
 80045c8:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 80045cc:	f7fc fb74 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 80045d0:	2155      	movs	r1, #85	; 0x55
 80045d2:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 80045d6:	f7fc fb6f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 80045da:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 80045de:	f7fc fadf 	bl	8000ba0 <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 80045e2:	2001      	movs	r0, #1
 80045e4:	f003 faee 	bl	8007bc4 <HAL_Delay>
		LCD_WR_REG(0x2900);
 80045e8:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 80045ec:	f7fc fad8 	bl	8000ba0 <LCD_WR_REG>
 80045f0:	f001 bd18 	b.w	8006024 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 80045f4:	4bec      	ldr	r3, [pc, #944]	; (80049a8 <LCD_Init+0x27b8>)
 80045f6:	889b      	ldrh	r3, [r3, #4]
 80045f8:	f249 3225 	movw	r2, #37669	; 0x9325
 80045fc:	4293      	cmp	r3, r2
 80045fe:	f040 80d7 	bne.w	80047b0 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 8004602:	f647 01f0 	movw	r1, #30960	; 0x78f0
 8004606:	20e5      	movs	r0, #229	; 0xe5
 8004608:	f7fc fb56 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 800460c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004610:	2001      	movs	r0, #1
 8004612:	f7fc fb51 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8004616:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800461a:	2002      	movs	r0, #2
 800461c:	f7fc fb4c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8004620:	f241 0130 	movw	r1, #4144	; 0x1030
 8004624:	2003      	movs	r0, #3
 8004626:	f7fc fb47 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 800462a:	2100      	movs	r1, #0
 800462c:	2004      	movs	r0, #4
 800462e:	f7fc fb43 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8004632:	f240 2102 	movw	r1, #514	; 0x202
 8004636:	2008      	movs	r0, #8
 8004638:	f7fc fb3e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 800463c:	2100      	movs	r1, #0
 800463e:	2009      	movs	r0, #9
 8004640:	f7fc fb3a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 8004644:	2100      	movs	r1, #0
 8004646:	200a      	movs	r0, #10
 8004648:	f7fc fb36 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 800464c:	2100      	movs	r1, #0
 800464e:	200c      	movs	r0, #12
 8004650:	f7fc fb32 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 8004654:	2100      	movs	r1, #0
 8004656:	200d      	movs	r0, #13
 8004658:	f7fc fb2e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 800465c:	2100      	movs	r1, #0
 800465e:	200f      	movs	r0, #15
 8004660:	f7fc fb2a 	bl	8000cb8 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 8004664:	2100      	movs	r1, #0
 8004666:	2010      	movs	r0, #16
 8004668:	f7fc fb26 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 800466c:	2107      	movs	r1, #7
 800466e:	2011      	movs	r0, #17
 8004670:	f7fc fb22 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8004674:	2100      	movs	r1, #0
 8004676:	2012      	movs	r0, #18
 8004678:	f7fc fb1e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 800467c:	2100      	movs	r1, #0
 800467e:	2013      	movs	r0, #19
 8004680:	f7fc fb1a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 8004684:	2100      	movs	r1, #0
 8004686:	2007      	movs	r0, #7
 8004688:	f7fc fb16 	bl	8000cb8 <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 800468c:	f241 6190 	movw	r1, #5776	; 0x1690
 8004690:	2010      	movs	r0, #16
 8004692:	f7fc fb11 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 8004696:	f240 2127 	movw	r1, #551	; 0x227
 800469a:	2011      	movs	r0, #17
 800469c:	f7fc fb0c 	bl	8000cb8 <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 80046a0:	219d      	movs	r1, #157	; 0x9d
 80046a2:	2012      	movs	r0, #18
 80046a4:	f7fc fb08 	bl	8000cb8 <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 80046a8:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 80046ac:	2013      	movs	r0, #19
 80046ae:	f7fc fb03 	bl	8000cb8 <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 80046b2:	2125      	movs	r1, #37	; 0x25
 80046b4:	2029      	movs	r0, #41	; 0x29
 80046b6:	f7fc faff 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 80046ba:	210d      	movs	r1, #13
 80046bc:	202b      	movs	r0, #43	; 0x2b
 80046be:	f7fc fafb 	bl	8000cb8 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 80046c2:	2107      	movs	r1, #7
 80046c4:	2030      	movs	r0, #48	; 0x30
 80046c6:	f7fc faf7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 80046ca:	f240 3103 	movw	r1, #771	; 0x303
 80046ce:	2031      	movs	r0, #49	; 0x31
 80046d0:	f7fc faf2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 80046d4:	2103      	movs	r1, #3
 80046d6:	2032      	movs	r0, #50	; 0x32
 80046d8:	f7fc faee 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 80046dc:	f240 2106 	movw	r1, #518	; 0x206
 80046e0:	2035      	movs	r0, #53	; 0x35
 80046e2:	f7fc fae9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 80046e6:	2108      	movs	r1, #8
 80046e8:	2036      	movs	r0, #54	; 0x36
 80046ea:	f7fc fae5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 80046ee:	f240 4106 	movw	r1, #1030	; 0x406
 80046f2:	2037      	movs	r0, #55	; 0x37
 80046f4:	f7fc fae0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 80046f8:	f44f 7141 	mov.w	r1, #772	; 0x304
 80046fc:	2038      	movs	r0, #56	; 0x38
 80046fe:	f7fc fadb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 8004702:	2107      	movs	r1, #7
 8004704:	2039      	movs	r0, #57	; 0x39
 8004706:	f7fc fad7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 800470a:	f240 6102 	movw	r1, #1538	; 0x602
 800470e:	203c      	movs	r0, #60	; 0x3c
 8004710:	f7fc fad2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 8004714:	2108      	movs	r1, #8
 8004716:	203d      	movs	r0, #61	; 0x3d
 8004718:	f7fc face 	bl	8000cb8 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 800471c:	2100      	movs	r1, #0
 800471e:	2050      	movs	r0, #80	; 0x50
 8004720:	f7fc faca 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8004724:	21ef      	movs	r1, #239	; 0xef
 8004726:	2051      	movs	r0, #81	; 0x51
 8004728:	f7fc fac6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800472c:	2100      	movs	r1, #0
 800472e:	2052      	movs	r0, #82	; 0x52
 8004730:	f7fc fac2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004734:	f240 113f 	movw	r1, #319	; 0x13f
 8004738:	2053      	movs	r0, #83	; 0x53
 800473a:	f7fc fabd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 800473e:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8004742:	2060      	movs	r0, #96	; 0x60
 8004744:	f7fc fab8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004748:	2101      	movs	r1, #1
 800474a:	2061      	movs	r0, #97	; 0x61
 800474c:	f7fc fab4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004750:	2100      	movs	r1, #0
 8004752:	206a      	movs	r0, #106	; 0x6a
 8004754:	f7fc fab0 	bl	8000cb8 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 8004758:	2100      	movs	r1, #0
 800475a:	2080      	movs	r0, #128	; 0x80
 800475c:	f7fc faac 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004760:	2100      	movs	r1, #0
 8004762:	2081      	movs	r0, #129	; 0x81
 8004764:	f7fc faa8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004768:	2100      	movs	r1, #0
 800476a:	2082      	movs	r0, #130	; 0x82
 800476c:	f7fc faa4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004770:	2100      	movs	r1, #0
 8004772:	2083      	movs	r0, #131	; 0x83
 8004774:	f7fc faa0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004778:	2100      	movs	r1, #0
 800477a:	2084      	movs	r0, #132	; 0x84
 800477c:	f7fc fa9c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004780:	2100      	movs	r1, #0
 8004782:	2085      	movs	r0, #133	; 0x85
 8004784:	f7fc fa98 	bl	8000cb8 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 8004788:	2110      	movs	r1, #16
 800478a:	2090      	movs	r0, #144	; 0x90
 800478c:	f7fc fa94 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004790:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004794:	2092      	movs	r0, #146	; 0x92
 8004796:	f7fc fa8f 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 800479a:	f240 1133 	movw	r1, #307	; 0x133
 800479e:	2007      	movs	r0, #7
 80047a0:	f7fc fa8a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 80047a4:	2122      	movs	r1, #34	; 0x22
 80047a6:	2000      	movs	r0, #0
 80047a8:	f7fc fa86 	bl	8000cb8 <LCD_WriteReg>
 80047ac:	f001 bc3a 	b.w	8006024 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 80047b0:	4b7d      	ldr	r3, [pc, #500]	; (80049a8 <LCD_Init+0x27b8>)
 80047b2:	889b      	ldrh	r3, [r3, #4]
 80047b4:	f249 3228 	movw	r2, #37672	; 0x9328
 80047b8:	4293      	cmp	r3, r2
 80047ba:	f040 80f7 	bne.w	80049ac <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 80047be:	f241 018f 	movw	r1, #4239	; 0x108f
 80047c2:	20ec      	movs	r0, #236	; 0xec
 80047c4:	f7fc fa78 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 80047c8:	f241 2134 	movw	r1, #4660	; 0x1234
 80047cc:	20ef      	movs	r0, #239	; 0xef
 80047ce:	f7fc fa73 	bl	8000cb8 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 80047d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80047d6:	2001      	movs	r0, #1
 80047d8:	f7fc fa6e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 80047dc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80047e0:	2002      	movs	r0, #2
 80047e2:	f7fc fa69 	bl	8000cb8 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 80047e6:	f241 0130 	movw	r1, #4144	; 0x1030
 80047ea:	2003      	movs	r0, #3
 80047ec:	f7fc fa64 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 80047f0:	2100      	movs	r1, #0
 80047f2:	2004      	movs	r0, #4
 80047f4:	f7fc fa60 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 80047f8:	f240 2102 	movw	r1, #514	; 0x202
 80047fc:	2008      	movs	r0, #8
 80047fe:	f7fc fa5b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 8004802:	2100      	movs	r1, #0
 8004804:	2009      	movs	r0, #9
 8004806:	f7fc fa57 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 800480a:	2100      	movs	r1, #0
 800480c:	200a      	movs	r0, #10
 800480e:	f7fc fa53 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 8004812:	2101      	movs	r1, #1
 8004814:	200c      	movs	r0, #12
 8004816:	f7fc fa4f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 800481a:	2100      	movs	r1, #0
 800481c:	200d      	movs	r0, #13
 800481e:	f7fc fa4b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 8004822:	2100      	movs	r1, #0
 8004824:	200f      	movs	r0, #15
 8004826:	f7fc fa47 	bl	8000cb8 <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 800482a:	2100      	movs	r1, #0
 800482c:	2010      	movs	r0, #16
 800482e:	f7fc fa43 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8004832:	2107      	movs	r1, #7
 8004834:	2011      	movs	r0, #17
 8004836:	f7fc fa3f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 800483a:	2100      	movs	r1, #0
 800483c:	2012      	movs	r0, #18
 800483e:	f7fc fa3b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8004842:	2100      	movs	r1, #0
 8004844:	2013      	movs	r0, #19
 8004846:	f7fc fa37 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 800484a:	2101      	movs	r1, #1
 800484c:	2007      	movs	r0, #7
 800484e:	f7fc fa33 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50);
 8004852:	2032      	movs	r0, #50	; 0x32
 8004854:	f003 f9b6 	bl	8007bc4 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 8004858:	f241 4190 	movw	r1, #5264	; 0x1490
 800485c:	2010      	movs	r0, #16
 800485e:	f7fc fa2b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 8004862:	f240 2127 	movw	r1, #551	; 0x227
 8004866:	2011      	movs	r0, #17
 8004868:	f7fc fa26 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50);
 800486c:	2032      	movs	r0, #50	; 0x32
 800486e:	f003 f9a9 	bl	8007bc4 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 8004872:	218a      	movs	r1, #138	; 0x8a
 8004874:	2012      	movs	r0, #18
 8004876:	f7fc fa1f 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50);
 800487a:	2032      	movs	r0, #50	; 0x32
 800487c:	f003 f9a2 	bl	8007bc4 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 8004880:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8004884:	2013      	movs	r0, #19
 8004886:	f7fc fa17 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 800488a:	2106      	movs	r1, #6
 800488c:	2029      	movs	r0, #41	; 0x29
 800488e:	f7fc fa13 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 8004892:	210d      	movs	r1, #13
 8004894:	202b      	movs	r0, #43	; 0x2b
 8004896:	f7fc fa0f 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50);
 800489a:	2032      	movs	r0, #50	; 0x32
 800489c:	f003 f992 	bl	8007bc4 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 80048a0:	2100      	movs	r1, #0
 80048a2:	2020      	movs	r0, #32
 80048a4:	f7fc fa08 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 80048a8:	2100      	movs	r1, #0
 80048aa:	2021      	movs	r0, #33	; 0x21
 80048ac:	f7fc fa04 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50);
 80048b0:	2032      	movs	r0, #50	; 0x32
 80048b2:	f003 f987 	bl	8007bc4 <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 80048b6:	2100      	movs	r1, #0
 80048b8:	2030      	movs	r0, #48	; 0x30
 80048ba:	f7fc f9fd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 80048be:	f240 6104 	movw	r1, #1540	; 0x604
 80048c2:	2031      	movs	r0, #49	; 0x31
 80048c4:	f7fc f9f8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 80048c8:	f240 3105 	movw	r1, #773	; 0x305
 80048cc:	2032      	movs	r0, #50	; 0x32
 80048ce:	f7fc f9f3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 80048d2:	2100      	movs	r1, #0
 80048d4:	2035      	movs	r0, #53	; 0x35
 80048d6:	f7fc f9ef 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 80048da:	f640 4109 	movw	r1, #3081	; 0xc09
 80048de:	2036      	movs	r0, #54	; 0x36
 80048e0:	f7fc f9ea 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 80048e4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80048e8:	2037      	movs	r0, #55	; 0x37
 80048ea:	f7fc f9e5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 80048ee:	f240 3101 	movw	r1, #769	; 0x301
 80048f2:	2038      	movs	r0, #56	; 0x38
 80048f4:	f7fc f9e0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 80048f8:	f240 7107 	movw	r1, #1799	; 0x707
 80048fc:	2039      	movs	r0, #57	; 0x39
 80048fe:	f7fc f9db 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 8004902:	2100      	movs	r1, #0
 8004904:	203c      	movs	r0, #60	; 0x3c
 8004906:	f7fc f9d7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 800490a:	f640 210a 	movw	r1, #2570	; 0xa0a
 800490e:	203d      	movs	r0, #61	; 0x3d
 8004910:	f7fc f9d2 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50);
 8004914:	2032      	movs	r0, #50	; 0x32
 8004916:	f003 f955 	bl	8007bc4 <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 800491a:	2100      	movs	r1, #0
 800491c:	2050      	movs	r0, #80	; 0x50
 800491e:	f7fc f9cb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 8004922:	21ef      	movs	r1, #239	; 0xef
 8004924:	2051      	movs	r0, #81	; 0x51
 8004926:	f7fc f9c7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 800492a:	2100      	movs	r1, #0
 800492c:	2052      	movs	r0, #82	; 0x52
 800492e:	f7fc f9c3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 8004932:	f240 113f 	movw	r1, #319	; 0x13f
 8004936:	2053      	movs	r0, #83	; 0x53
 8004938:	f7fc f9be 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 800493c:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8004940:	2060      	movs	r0, #96	; 0x60
 8004942:	f7fc f9b9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004946:	2101      	movs	r1, #1
 8004948:	2061      	movs	r0, #97	; 0x61
 800494a:	f7fc f9b5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 800494e:	2100      	movs	r1, #0
 8004950:	206a      	movs	r0, #106	; 0x6a
 8004952:	f7fc f9b1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8004956:	2100      	movs	r1, #0
 8004958:	2080      	movs	r0, #128	; 0x80
 800495a:	f7fc f9ad 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 800495e:	2100      	movs	r1, #0
 8004960:	2081      	movs	r0, #129	; 0x81
 8004962:	f7fc f9a9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004966:	2100      	movs	r1, #0
 8004968:	2082      	movs	r0, #130	; 0x82
 800496a:	f7fc f9a5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 800496e:	2100      	movs	r1, #0
 8004970:	2083      	movs	r0, #131	; 0x83
 8004972:	f7fc f9a1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004976:	2100      	movs	r1, #0
 8004978:	2084      	movs	r0, #132	; 0x84
 800497a:	f7fc f99d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 800497e:	2100      	movs	r1, #0
 8004980:	2085      	movs	r0, #133	; 0x85
 8004982:	f7fc f999 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 8004986:	2110      	movs	r1, #16
 8004988:	2090      	movs	r0, #144	; 0x90
 800498a:	f7fc f995 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 800498e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004992:	2092      	movs	r0, #146	; 0x92
 8004994:	f7fc f990 	bl	8000cb8 <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 8004998:	f240 1133 	movw	r1, #307	; 0x133
 800499c:	2007      	movs	r0, #7
 800499e:	f7fc f98b 	bl	8000cb8 <LCD_WriteReg>
 80049a2:	f001 bb3f 	b.w	8006024 <LCD_Init+0x3e34>
 80049a6:	bf00      	nop
 80049a8:	20005a88 	.word	0x20005a88
	} else if (lcddev.id == 0x9320) //测试OK.
 80049ac:	4bce      	ldr	r3, [pc, #824]	; (8004ce8 <LCD_Init+0x2af8>)
 80049ae:	889b      	ldrh	r3, [r3, #4]
 80049b0:	f249 3220 	movw	r2, #37664	; 0x9320
 80049b4:	4293      	cmp	r3, r2
 80049b6:	f040 80ad 	bne.w	8004b14 <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 80049ba:	2100      	movs	r1, #0
 80049bc:	2000      	movs	r0, #0
 80049be:	f7fc f97b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 80049c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049c6:	2001      	movs	r0, #1
 80049c8:	f7fc f976 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 80049cc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80049d0:	2002      	movs	r0, #2
 80049d2:	f7fc f971 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 80049d6:	f241 0130 	movw	r1, #4144	; 0x1030
 80049da:	2003      	movs	r0, #3
 80049dc:	f7fc f96c 	bl	8000cb8 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 80049e0:	2100      	movs	r1, #0
 80049e2:	2004      	movs	r0, #4
 80049e4:	f7fc f968 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 80049e8:	f240 2102 	movw	r1, #514	; 0x202
 80049ec:	2008      	movs	r0, #8
 80049ee:	f7fc f963 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 80049f2:	2100      	movs	r1, #0
 80049f4:	2009      	movs	r0, #9
 80049f6:	f7fc f95f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 80049fa:	2100      	movs	r1, #0
 80049fc:	200a      	movs	r0, #10
 80049fe:	f7fc f95b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 8004a02:	2101      	movs	r1, #1
 8004a04:	200c      	movs	r0, #12
 8004a06:	f7fc f957 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	200d      	movs	r0, #13
 8004a0e:	f7fc f953 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 8004a12:	2100      	movs	r1, #0
 8004a14:	200f      	movs	r0, #15
 8004a16:	f7fc f94f 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50);
 8004a1a:	2032      	movs	r0, #50	; 0x32
 8004a1c:	f003 f8d2 	bl	8007bc4 <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 8004a20:	f240 1101 	movw	r1, #257	; 0x101
 8004a24:	2007      	movs	r0, #7
 8004a26:	f7fc f947 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50);
 8004a2a:	2032      	movs	r0, #50	; 0x32
 8004a2c:	f003 f8ca 	bl	8007bc4 <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 8004a30:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8004a34:	2010      	movs	r0, #16
 8004a36:	f7fc f93f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 8004a3a:	2107      	movs	r1, #7
 8004a3c:	2011      	movs	r0, #17
 8004a3e:	f7fc f93b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 8004a42:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004a46:	2012      	movs	r0, #18
 8004a48:	f7fc f936 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 8004a4c:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8004a50:	2013      	movs	r0, #19
 8004a52:	f7fc f931 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 8004a56:	2100      	movs	r1, #0
 8004a58:	2029      	movs	r0, #41	; 0x29
 8004a5a:	f7fc f92d 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 8004a5e:	f244 0110 	movw	r1, #16400	; 0x4010
 8004a62:	202b      	movs	r0, #43	; 0x2b
 8004a64:	f7fc f928 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 8004a68:	2100      	movs	r1, #0
 8004a6a:	2050      	movs	r0, #80	; 0x50
 8004a6c:	f7fc f924 	bl	8000cb8 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 8004a70:	21ef      	movs	r1, #239	; 0xef
 8004a72:	2051      	movs	r0, #81	; 0x51
 8004a74:	f7fc f920 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 8004a78:	2100      	movs	r1, #0
 8004a7a:	2052      	movs	r0, #82	; 0x52
 8004a7c:	f7fc f91c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 8004a80:	f240 113f 	movw	r1, #319	; 0x13f
 8004a84:	2053      	movs	r0, #83	; 0x53
 8004a86:	f7fc f917 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 8004a8a:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004a8e:	2060      	movs	r0, #96	; 0x60
 8004a90:	f7fc f912 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 8004a94:	2101      	movs	r1, #1
 8004a96:	2061      	movs	r0, #97	; 0x61
 8004a98:	f7fc f90e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	206a      	movs	r0, #106	; 0x6a
 8004aa0:	f7fc f90a 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	2080      	movs	r0, #128	; 0x80
 8004aa8:	f7fc f906 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 8004aac:	2100      	movs	r1, #0
 8004aae:	2081      	movs	r0, #129	; 0x81
 8004ab0:	f7fc f902 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	2082      	movs	r0, #130	; 0x82
 8004ab8:	f7fc f8fe 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 8004abc:	2100      	movs	r1, #0
 8004abe:	2083      	movs	r0, #131	; 0x83
 8004ac0:	f7fc f8fa 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	2084      	movs	r0, #132	; 0x84
 8004ac8:	f7fc f8f6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 8004acc:	2100      	movs	r1, #0
 8004ace:	2085      	movs	r0, #133	; 0x85
 8004ad0:	f7fc f8f2 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 8004ad4:	2110      	movs	r1, #16
 8004ad6:	2090      	movs	r0, #144	; 0x90
 8004ad8:	f7fc f8ee 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 8004adc:	2100      	movs	r1, #0
 8004ade:	2092      	movs	r0, #146	; 0x92
 8004ae0:	f7fc f8ea 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 8004ae4:	2101      	movs	r1, #1
 8004ae6:	2093      	movs	r0, #147	; 0x93
 8004ae8:	f7fc f8e6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 8004aec:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004af0:	2095      	movs	r0, #149	; 0x95
 8004af2:	f7fc f8e1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 8004af6:	2100      	movs	r1, #0
 8004af8:	2097      	movs	r0, #151	; 0x97
 8004afa:	f7fc f8dd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 8004afe:	2100      	movs	r1, #0
 8004b00:	2098      	movs	r0, #152	; 0x98
 8004b02:	f7fc f8d9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 8004b06:	f240 1173 	movw	r1, #371	; 0x173
 8004b0a:	2007      	movs	r0, #7
 8004b0c:	f7fc f8d4 	bl	8000cb8 <LCD_WriteReg>
 8004b10:	f001 ba88 	b.w	8006024 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 8004b14:	4b74      	ldr	r3, [pc, #464]	; (8004ce8 <LCD_Init+0x2af8>)
 8004b16:	889b      	ldrh	r3, [r3, #4]
 8004b18:	f249 3231 	movw	r2, #37681	; 0x9331
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	f040 80e5 	bne.w	8004cec <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 8004b22:	f241 0114 	movw	r1, #4116	; 0x1014
 8004b26:	20e7      	movs	r0, #231	; 0xe7
 8004b28:	f7fc f8c6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 8004b2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b30:	2001      	movs	r0, #1
 8004b32:	f7fc f8c1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 8004b36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b3a:	2002      	movs	r0, #2
 8004b3c:	f7fc f8bc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 8004b40:	f241 0138 	movw	r1, #4152	; 0x1038
 8004b44:	2003      	movs	r0, #3
 8004b46:	f7fc f8b7 	bl	8000cb8 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 8004b4a:	f240 2102 	movw	r1, #514	; 0x202
 8004b4e:	2008      	movs	r0, #8
 8004b50:	f7fc f8b2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 8004b54:	2100      	movs	r1, #0
 8004b56:	2009      	movs	r0, #9
 8004b58:	f7fc f8ae 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	200a      	movs	r0, #10
 8004b60:	f7fc f8aa 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 8004b64:	2100      	movs	r1, #0
 8004b66:	200c      	movs	r0, #12
 8004b68:	f7fc f8a6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	200d      	movs	r0, #13
 8004b70:	f7fc f8a2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 8004b74:	2100      	movs	r1, #0
 8004b76:	200f      	movs	r0, #15
 8004b78:	f7fc f89e 	bl	8000cb8 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	2010      	movs	r0, #16
 8004b80:	f7fc f89a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 8004b84:	2107      	movs	r1, #7
 8004b86:	2011      	movs	r0, #17
 8004b88:	f7fc f896 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	2012      	movs	r0, #18
 8004b90:	f7fc f892 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 8004b94:	2100      	movs	r1, #0
 8004b96:	2013      	movs	r0, #19
 8004b98:	f7fc f88e 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8004b9c:	20c8      	movs	r0, #200	; 0xc8
 8004b9e:	f003 f811 	bl	8007bc4 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004ba2:	f241 6190 	movw	r1, #5776	; 0x1690
 8004ba6:	2010      	movs	r0, #16
 8004ba8:	f7fc f886 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8004bac:	f240 2127 	movw	r1, #551	; 0x227
 8004bb0:	2011      	movs	r0, #17
 8004bb2:	f7fc f881 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004bb6:	2032      	movs	r0, #50	; 0x32
 8004bb8:	f003 f804 	bl	8007bc4 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8004bbc:	210c      	movs	r1, #12
 8004bbe:	2012      	movs	r0, #18
 8004bc0:	f7fc f87a 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004bc4:	2032      	movs	r0, #50	; 0x32
 8004bc6:	f002 fffd 	bl	8007bc4 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 8004bca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004bce:	2013      	movs	r0, #19
 8004bd0:	f7fc f872 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 8004bd4:	2111      	movs	r1, #17
 8004bd6:	2029      	movs	r0, #41	; 0x29
 8004bd8:	f7fc f86e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 8004bdc:	210b      	movs	r1, #11
 8004bde:	202b      	movs	r0, #43	; 0x2b
 8004be0:	f7fc f86a 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004be4:	2032      	movs	r0, #50	; 0x32
 8004be6:	f002 ffed 	bl	8007bc4 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 8004bea:	2100      	movs	r1, #0
 8004bec:	2020      	movs	r0, #32
 8004bee:	f7fc f863 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 8004bf2:	f240 113f 	movw	r1, #319	; 0x13f
 8004bf6:	2021      	movs	r0, #33	; 0x21
 8004bf8:	f7fc f85e 	bl	8000cb8 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	2030      	movs	r0, #48	; 0x30
 8004c00:	f7fc f85a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 8004c04:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004c08:	2031      	movs	r0, #49	; 0x31
 8004c0a:	f7fc f855 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 8004c0e:	2100      	movs	r1, #0
 8004c10:	2032      	movs	r0, #50	; 0x32
 8004c12:	f7fc f851 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8004c16:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004c1a:	2035      	movs	r0, #53	; 0x35
 8004c1c:	f7fc f84c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8004c20:	f241 610a 	movw	r1, #5642	; 0x160a
 8004c24:	2036      	movs	r0, #54	; 0x36
 8004c26:	f7fc f847 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 8004c2a:	f240 7107 	movw	r1, #1799	; 0x707
 8004c2e:	2037      	movs	r0, #55	; 0x37
 8004c30:	f7fc f842 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 8004c34:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004c38:	2038      	movs	r0, #56	; 0x38
 8004c3a:	f7fc f83d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004c3e:	f240 7107 	movw	r1, #1799	; 0x707
 8004c42:	2039      	movs	r0, #57	; 0x39
 8004c44:	f7fc f838 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8004c48:	f240 4102 	movw	r1, #1026	; 0x402
 8004c4c:	203c      	movs	r0, #60	; 0x3c
 8004c4e:	f7fc f833 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 8004c52:	f640 410f 	movw	r1, #3087	; 0xc0f
 8004c56:	203d      	movs	r0, #61	; 0x3d
 8004c58:	f7fc f82e 	bl	8000cb8 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	2050      	movs	r0, #80	; 0x50
 8004c60:	f7fc f82a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 8004c64:	21ef      	movs	r1, #239	; 0xef
 8004c66:	2051      	movs	r0, #81	; 0x51
 8004c68:	f7fc f826 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	2052      	movs	r0, #82	; 0x52
 8004c70:	f7fc f822 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 8004c74:	f240 113f 	movw	r1, #319	; 0x13f
 8004c78:	2053      	movs	r0, #83	; 0x53
 8004c7a:	f7fc f81d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8004c7e:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004c82:	2060      	movs	r0, #96	; 0x60
 8004c84:	f7fc f818 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 8004c88:	2101      	movs	r1, #1
 8004c8a:	2061      	movs	r0, #97	; 0x61
 8004c8c:	f7fc f814 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8004c90:	2100      	movs	r1, #0
 8004c92:	206a      	movs	r0, #106	; 0x6a
 8004c94:	f7fc f810 	bl	8000cb8 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8004c98:	2100      	movs	r1, #0
 8004c9a:	2080      	movs	r0, #128	; 0x80
 8004c9c:	f7fc f80c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	2081      	movs	r0, #129	; 0x81
 8004ca4:	f7fc f808 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004ca8:	2100      	movs	r1, #0
 8004caa:	2082      	movs	r0, #130	; 0x82
 8004cac:	f7fc f804 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	2083      	movs	r0, #131	; 0x83
 8004cb4:	f7fc f800 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004cb8:	2100      	movs	r1, #0
 8004cba:	2084      	movs	r0, #132	; 0x84
 8004cbc:	f7fb fffc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	2085      	movs	r0, #133	; 0x85
 8004cc4:	f7fb fff8 	bl	8000cb8 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8004cc8:	2110      	movs	r1, #16
 8004cca:	2090      	movs	r0, #144	; 0x90
 8004ccc:	f7fb fff4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004cd0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004cd4:	2092      	movs	r0, #146	; 0x92
 8004cd6:	f7fb ffef 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 8004cda:	f240 1133 	movw	r1, #307	; 0x133
 8004cde:	2007      	movs	r0, #7
 8004ce0:	f7fb ffea 	bl	8000cb8 <LCD_WriteReg>
 8004ce4:	f001 b99e 	b.w	8006024 <LCD_Init+0x3e34>
 8004ce8:	20005a88 	.word	0x20005a88
	} else if (lcddev.id == 0x5408) {
 8004cec:	4be2      	ldr	r3, [pc, #904]	; (8005078 <LCD_Init+0x2e88>)
 8004cee:	889b      	ldrh	r3, [r3, #4]
 8004cf0:	f245 4208 	movw	r2, #21512	; 0x5408
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	f040 80a3 	bne.w	8004e40 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 8004cfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cfe:	2001      	movs	r0, #1
 8004d00:	f7fb ffda 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 8004d04:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004d08:	2002      	movs	r0, #2
 8004d0a:	f7fb ffd5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 8004d0e:	f241 0130 	movw	r1, #4144	; 0x1030
 8004d12:	2003      	movs	r0, #3
 8004d14:	f7fb ffd0 	bl	8000cb8 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 8004d18:	2100      	movs	r1, #0
 8004d1a:	2004      	movs	r0, #4
 8004d1c:	f7fb ffcc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 8004d20:	f240 2107 	movw	r1, #519	; 0x207
 8004d24:	2008      	movs	r0, #8
 8004d26:	f7fb ffc7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	2009      	movs	r0, #9
 8004d2e:	f7fb ffc3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 8004d32:	2100      	movs	r1, #0
 8004d34:	200a      	movs	r0, #10
 8004d36:	f7fb ffbf 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	200c      	movs	r0, #12
 8004d3e:	f7fb ffbb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 8004d42:	2100      	movs	r1, #0
 8004d44:	200d      	movs	r0, #13
 8004d46:	f7fb ffb7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	200f      	movs	r0, #15
 8004d4e:	f7fb ffb3 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 8004d52:	2014      	movs	r0, #20
 8004d54:	f002 ff36 	bl	8007bc4 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 8004d58:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8004d5c:	2010      	movs	r0, #16
 8004d5e:	f7fb ffab 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 8004d62:	2101      	movs	r1, #1
 8004d64:	2011      	movs	r0, #17
 8004d66:	f7fb ffa7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	2017      	movs	r0, #23
 8004d6e:	f7fb ffa3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 8004d72:	f44f 719c 	mov.w	r1, #312	; 0x138
 8004d76:	2012      	movs	r0, #18
 8004d78:	f7fb ff9e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 8004d7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d80:	2013      	movs	r0, #19
 8004d82:	f7fb ff99 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 8004d86:	2109      	movs	r1, #9
 8004d88:	2029      	movs	r0, #41	; 0x29
 8004d8a:	f7fb ff95 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 8004d8e:	2109      	movs	r1, #9
 8004d90:	202a      	movs	r0, #42	; 0x2a
 8004d92:	f7fb ff91 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 8004d96:	2100      	movs	r1, #0
 8004d98:	20a4      	movs	r0, #164	; 0xa4
 8004d9a:	f7fb ff8d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 8004d9e:	2100      	movs	r1, #0
 8004da0:	2050      	movs	r0, #80	; 0x50
 8004da2:	f7fb ff89 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 8004da6:	21ef      	movs	r1, #239	; 0xef
 8004da8:	2051      	movs	r0, #81	; 0x51
 8004daa:	f7fb ff85 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 8004dae:	2100      	movs	r1, #0
 8004db0:	2052      	movs	r0, #82	; 0x52
 8004db2:	f7fb ff81 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 8004db6:	f240 113f 	movw	r1, #319	; 0x13f
 8004dba:	2053      	movs	r0, #83	; 0x53
 8004dbc:	f7fb ff7c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 8004dc0:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004dc4:	2060      	movs	r0, #96	; 0x60
 8004dc6:	f7fb ff77 	bl	8000cb8 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 8004dca:	2101      	movs	r1, #1
 8004dcc:	2061      	movs	r0, #97	; 0x61
 8004dce:	f7fb ff73 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	206a      	movs	r0, #106	; 0x6a
 8004dd6:	f7fb ff6f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 8004dda:	2100      	movs	r1, #0
 8004ddc:	2080      	movs	r0, #128	; 0x80
 8004dde:	f7fb ff6b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 8004de2:	2100      	movs	r1, #0
 8004de4:	2081      	movs	r0, #129	; 0x81
 8004de6:	f7fb ff67 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 8004dea:	2100      	movs	r1, #0
 8004dec:	2082      	movs	r0, #130	; 0x82
 8004dee:	f7fb ff63 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 8004df2:	2100      	movs	r1, #0
 8004df4:	2083      	movs	r0, #131	; 0x83
 8004df6:	f7fb ff5f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	2084      	movs	r0, #132	; 0x84
 8004dfe:	f7fb ff5b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 8004e02:	2100      	movs	r1, #0
 8004e04:	2085      	movs	r0, #133	; 0x85
 8004e06:	f7fb ff57 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 8004e0a:	2113      	movs	r1, #19
 8004e0c:	2090      	movs	r0, #144	; 0x90
 8004e0e:	f7fb ff53 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 8004e12:	2100      	movs	r1, #0
 8004e14:	2092      	movs	r0, #146	; 0x92
 8004e16:	f7fb ff4f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 8004e1a:	2103      	movs	r1, #3
 8004e1c:	2093      	movs	r0, #147	; 0x93
 8004e1e:	f7fb ff4b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 8004e22:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004e26:	2095      	movs	r0, #149	; 0x95
 8004e28:	f7fb ff46 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 8004e2c:	f240 1173 	movw	r1, #371	; 0x173
 8004e30:	2007      	movs	r0, #7
 8004e32:	f7fb ff41 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50);
 8004e36:	2032      	movs	r0, #50	; 0x32
 8004e38:	f002 fec4 	bl	8007bc4 <HAL_Delay>
 8004e3c:	f001 b8f2 	b.w	8006024 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8004e40:	4b8d      	ldr	r3, [pc, #564]	; (8005078 <LCD_Init+0x2e88>)
 8004e42:	889b      	ldrh	r3, [r3, #4]
 8004e44:	f241 5205 	movw	r2, #5381	; 0x1505
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	f040 8117 	bne.w	800507c <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 8004e4e:	2100      	movs	r1, #0
 8004e50:	2007      	movs	r0, #7
 8004e52:	f7fb ff31 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50);
 8004e56:	2032      	movs	r0, #50	; 0x32
 8004e58:	f002 feb4 	bl	8007bc4 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 8004e5c:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004e60:	2012      	movs	r0, #18
 8004e62:	f7fb ff29 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 8004e66:	2101      	movs	r1, #1
 8004e68:	20a4      	movs	r0, #164	; 0xa4
 8004e6a:	f7fb ff25 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 8004e6e:	210f      	movs	r1, #15
 8004e70:	2008      	movs	r0, #8
 8004e72:	f7fb ff21 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 8004e76:	2108      	movs	r1, #8
 8004e78:	200a      	movs	r0, #10
 8004e7a:	f7fb ff1d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 8004e7e:	2108      	movs	r1, #8
 8004e80:	200d      	movs	r0, #13
 8004e82:	f7fb ff19 	bl	8000cb8 <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 8004e86:	f240 7107 	movw	r1, #1799	; 0x707
 8004e8a:	2030      	movs	r0, #48	; 0x30
 8004e8c:	f7fb ff14 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 8004e90:	2107      	movs	r1, #7
 8004e92:	2031      	movs	r0, #49	; 0x31
 8004e94:	f7fb ff10 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 8004e98:	f240 6103 	movw	r1, #1539	; 0x603
 8004e9c:	2032      	movs	r0, #50	; 0x32
 8004e9e:	f7fb ff0b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 8004ea2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004ea6:	2033      	movs	r0, #51	; 0x33
 8004ea8:	f7fb ff06 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 8004eac:	f240 2102 	movw	r1, #514	; 0x202
 8004eb0:	2034      	movs	r0, #52	; 0x34
 8004eb2:	f7fb ff01 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 8004eb6:	2102      	movs	r1, #2
 8004eb8:	2035      	movs	r0, #53	; 0x35
 8004eba:	f7fb fefd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 8004ebe:	f641 710f 	movw	r1, #7951	; 0x1f0f
 8004ec2:	2036      	movs	r0, #54	; 0x36
 8004ec4:	f7fb fef8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8004ec8:	f240 7107 	movw	r1, #1799	; 0x707
 8004ecc:	2037      	movs	r0, #55	; 0x37
 8004ece:	f7fb fef3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	2038      	movs	r0, #56	; 0x38
 8004ed6:	f7fb feef 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 8004eda:	2100      	movs	r1, #0
 8004edc:	2039      	movs	r0, #57	; 0x39
 8004ede:	f7fb feeb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 8004ee2:	f240 7107 	movw	r1, #1799	; 0x707
 8004ee6:	203a      	movs	r0, #58	; 0x3a
 8004ee8:	f7fb fee6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 8004eec:	2100      	movs	r1, #0
 8004eee:	203b      	movs	r0, #59	; 0x3b
 8004ef0:	f7fb fee2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 8004ef4:	2107      	movs	r1, #7
 8004ef6:	203c      	movs	r0, #60	; 0x3c
 8004ef8:	f7fb fede 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 8004efc:	2100      	movs	r1, #0
 8004efe:	203d      	movs	r0, #61	; 0x3d
 8004f00:	f7fb feda 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50);
 8004f04:	2032      	movs	r0, #50	; 0x32
 8004f06:	f002 fe5d 	bl	8007bc4 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	2007      	movs	r0, #7
 8004f0e:	f7fb fed3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 8004f12:	2101      	movs	r1, #1
 8004f14:	2017      	movs	r0, #23
 8004f16:	f7fb fecf 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(50);
 8004f1a:	2032      	movs	r0, #50	; 0x32
 8004f1c:	f002 fe52 	bl	8007bc4 <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8004f20:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8004f24:	2010      	movs	r0, #16
 8004f26:	f7fb fec7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8004f2a:	f240 2117 	movw	r1, #535	; 0x217
 8004f2e:	2011      	movs	r0, #17
 8004f30:	f7fb fec2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8004f34:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004f38:	2012      	movs	r0, #18
 8004f3a:	f7fb febd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8004f3e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004f42:	2013      	movs	r0, #19
 8004f44:	f7fb feb8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8004f48:	2100      	movs	r1, #0
 8004f4a:	202a      	movs	r0, #42	; 0x2a
 8004f4c:	f7fb feb4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8004f50:	210a      	movs	r1, #10
 8004f52:	2029      	movs	r0, #41	; 0x29
 8004f54:	f7fb feb0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8004f58:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8004f5c:	2012      	movs	r0, #18
 8004f5e:	f7fb feab 	bl	8000cb8 <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 8004f62:	2100      	movs	r1, #0
 8004f64:	2050      	movs	r0, #80	; 0x50
 8004f66:	f7fb fea7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8004f6a:	21ef      	movs	r1, #239	; 0xef
 8004f6c:	2051      	movs	r0, #81	; 0x51
 8004f6e:	f7fb fea3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004f72:	2100      	movs	r1, #0
 8004f74:	2052      	movs	r0, #82	; 0x52
 8004f76:	f7fb fe9f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004f7a:	f240 113f 	movw	r1, #319	; 0x13f
 8004f7e:	2053      	movs	r0, #83	; 0x53
 8004f80:	f7fb fe9a 	bl	8000cb8 <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 8004f84:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004f88:	2060      	movs	r0, #96	; 0x60
 8004f8a:	f7fb fe95 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8004f8e:	2101      	movs	r1, #1
 8004f90:	2061      	movs	r0, #97	; 0x61
 8004f92:	f7fb fe91 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004f96:	2100      	movs	r1, #0
 8004f98:	206a      	movs	r0, #106	; 0x6a
 8004f9a:	f7fb fe8d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	2080      	movs	r0, #128	; 0x80
 8004fa2:	f7fb fe89 	bl	8000cb8 <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	2081      	movs	r0, #129	; 0x81
 8004faa:	f7fb fe85 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004fae:	2100      	movs	r1, #0
 8004fb0:	2082      	movs	r0, #130	; 0x82
 8004fb2:	f7fb fe81 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	2083      	movs	r0, #131	; 0x83
 8004fba:	f7fb fe7d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004fbe:	2100      	movs	r1, #0
 8004fc0:	2084      	movs	r0, #132	; 0x84
 8004fc2:	f7fb fe79 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	2085      	movs	r0, #133	; 0x85
 8004fca:	f7fb fe75 	bl	8000cb8 <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 8004fce:	2113      	movs	r1, #19
 8004fd0:	2090      	movs	r0, #144	; 0x90
 8004fd2:	f7fb fe71 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8004fd6:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004fda:	2092      	movs	r0, #146	; 0x92
 8004fdc:	f7fb fe6c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 8004fe0:	2105      	movs	r1, #5
 8004fe2:	2093      	movs	r0, #147	; 0x93
 8004fe4:	f7fb fe68 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 8004fe8:	2100      	movs	r1, #0
 8004fea:	2095      	movs	r0, #149	; 0x95
 8004fec:	f7fb fe64 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	2097      	movs	r0, #151	; 0x97
 8004ff4:	f7fb fe60 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	2098      	movs	r0, #152	; 0x98
 8004ffc:	f7fb fe5c 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 8005000:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005004:	2001      	movs	r0, #1
 8005006:	f7fb fe57 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 800500a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800500e:	2002      	movs	r0, #2
 8005010:	f7fb fe52 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8005014:	f241 0138 	movw	r1, #4152	; 0x1038
 8005018:	2003      	movs	r0, #3
 800501a:	f7fb fe4d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 800501e:	2100      	movs	r1, #0
 8005020:	2004      	movs	r0, #4
 8005022:	f7fb fe49 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8005026:	2100      	movs	r1, #0
 8005028:	200c      	movs	r0, #12
 800502a:	f7fb fe45 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 800502e:	2100      	movs	r1, #0
 8005030:	200f      	movs	r0, #15
 8005032:	f7fb fe41 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 8005036:	2100      	movs	r1, #0
 8005038:	2020      	movs	r0, #32
 800503a:	f7fb fe3d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 800503e:	2100      	movs	r1, #0
 8005040:	2021      	movs	r0, #33	; 0x21
 8005042:	f7fb fe39 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 8005046:	2121      	movs	r1, #33	; 0x21
 8005048:	2007      	movs	r0, #7
 800504a:	f7fb fe35 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 800504e:	2014      	movs	r0, #20
 8005050:	f002 fdb8 	bl	8007bc4 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8005054:	2161      	movs	r1, #97	; 0x61
 8005056:	2007      	movs	r0, #7
 8005058:	f7fb fe2e 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 800505c:	2014      	movs	r0, #20
 800505e:	f002 fdb1 	bl	8007bc4 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 8005062:	f240 1173 	movw	r1, #371	; 0x173
 8005066:	2007      	movs	r0, #7
 8005068:	f7fb fe26 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 800506c:	2014      	movs	r0, #20
 800506e:	f002 fda9 	bl	8007bc4 <HAL_Delay>
 8005072:	f000 bfd7 	b.w	8006024 <LCD_Init+0x3e34>
 8005076:	bf00      	nop
 8005078:	20005a88 	.word	0x20005a88
	} else if (lcddev.id == 0xB505) {
 800507c:	4bf0      	ldr	r3, [pc, #960]	; (8005440 <LCD_Init+0x3250>)
 800507e:	889b      	ldrh	r3, [r3, #4]
 8005080:	f24b 5205 	movw	r2, #46341	; 0xb505
 8005084:	4293      	cmp	r3, r2
 8005086:	f040 8103 	bne.w	8005290 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 800508a:	2100      	movs	r1, #0
 800508c:	2000      	movs	r0, #0
 800508e:	f7fb fe13 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005092:	2100      	movs	r1, #0
 8005094:	2000      	movs	r0, #0
 8005096:	f7fb fe0f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 800509a:	2100      	movs	r1, #0
 800509c:	2000      	movs	r0, #0
 800509e:	f7fb fe0b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80050a2:	2100      	movs	r1, #0
 80050a4:	2000      	movs	r0, #0
 80050a6:	f7fb fe07 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 80050aa:	2101      	movs	r1, #1
 80050ac:	20a4      	movs	r0, #164	; 0xa4
 80050ae:	f7fb fe03 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 80050b2:	2014      	movs	r0, #20
 80050b4:	f002 fd86 	bl	8007bc4 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 80050b8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80050bc:	2060      	movs	r0, #96	; 0x60
 80050be:	f7fb fdfb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 80050c2:	f240 2102 	movw	r1, #514	; 0x202
 80050c6:	2008      	movs	r0, #8
 80050c8:	f7fb fdf6 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 80050cc:	f44f 7105 	mov.w	r1, #532	; 0x214
 80050d0:	2030      	movs	r0, #48	; 0x30
 80050d2:	f7fb fdf1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 80050d6:	f243 7115 	movw	r1, #14101	; 0x3715
 80050da:	2031      	movs	r0, #49	; 0x31
 80050dc:	f7fb fdec 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 80050e0:	f240 6104 	movw	r1, #1540	; 0x604
 80050e4:	2032      	movs	r0, #50	; 0x32
 80050e6:	f7fb fde7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 80050ea:	f640 6116 	movw	r1, #3606	; 0xe16
 80050ee:	2033      	movs	r0, #51	; 0x33
 80050f0:	f7fb fde2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 80050f4:	f242 2111 	movw	r1, #8721	; 0x2211
 80050f8:	2034      	movs	r0, #52	; 0x34
 80050fa:	f7fb fddd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 80050fe:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8005102:	2035      	movs	r0, #53	; 0x35
 8005104:	f7fb fdd8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 8005108:	f248 5107 	movw	r1, #34055	; 0x8507
 800510c:	2036      	movs	r0, #54	; 0x36
 800510e:	f7fb fdd3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 8005112:	f241 4107 	movw	r1, #5127	; 0x1407
 8005116:	2037      	movs	r0, #55	; 0x37
 8005118:	f7fb fdce 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 800511c:	f241 4103 	movw	r1, #5123	; 0x1403
 8005120:	2038      	movs	r0, #56	; 0x38
 8005122:	f7fb fdc9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 8005126:	2120      	movs	r1, #32
 8005128:	2039      	movs	r0, #57	; 0x39
 800512a:	f7fb fdc5 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 800512e:	211a      	movs	r1, #26
 8005130:	2090      	movs	r0, #144	; 0x90
 8005132:	f7fb fdc1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8005136:	2100      	movs	r1, #0
 8005138:	2010      	movs	r0, #16
 800513a:	f7fb fdbd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 800513e:	2107      	movs	r1, #7
 8005140:	2011      	movs	r0, #17
 8005142:	f7fb fdb9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8005146:	2100      	movs	r1, #0
 8005148:	2012      	movs	r0, #18
 800514a:	f7fb fdb5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 800514e:	2100      	movs	r1, #0
 8005150:	2013      	movs	r0, #19
 8005152:	f7fb fdb1 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 8005156:	2014      	movs	r0, #20
 8005158:	f002 fd34 	bl	8007bc4 <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 800515c:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8005160:	2010      	movs	r0, #16
 8005162:	f7fb fda9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 8005166:	f240 1137 	movw	r1, #311	; 0x137
 800516a:	2011      	movs	r0, #17
 800516c:	f7fb fda4 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 8005170:	2014      	movs	r0, #20
 8005172:	f002 fd27 	bl	8007bc4 <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 8005176:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800517a:	2012      	movs	r0, #18
 800517c:	f7fb fd9c 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 8005180:	2014      	movs	r0, #20
 8005182:	f002 fd1f 	bl	8007bc4 <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 8005186:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800518a:	2013      	movs	r0, #19
 800518c:	f7fb fd94 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 8005190:	2180      	movs	r1, #128	; 0x80
 8005192:	202a      	movs	r0, #42	; 0x2a
 8005194:	f7fb fd90 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 8005198:	2148      	movs	r1, #72	; 0x48
 800519a:	2029      	movs	r0, #41	; 0x29
 800519c:	f7fb fd8c 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 80051a0:	2014      	movs	r0, #20
 80051a2:	f002 fd0f 	bl	8007bc4 <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 80051a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80051aa:	2001      	movs	r0, #1
 80051ac:	f7fb fd84 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 80051b0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80051b4:	2002      	movs	r0, #2
 80051b6:	f7fb fd7f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 80051ba:	f241 0138 	movw	r1, #4152	; 0x1038
 80051be:	2003      	movs	r0, #3
 80051c0:	f7fb fd7a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 80051c4:	f240 2102 	movw	r1, #514	; 0x202
 80051c8:	2008      	movs	r0, #8
 80051ca:	f7fb fd75 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 80051ce:	2100      	movs	r1, #0
 80051d0:	200a      	movs	r0, #10
 80051d2:	f7fb fd71 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 80051d6:	2100      	movs	r1, #0
 80051d8:	200c      	movs	r0, #12
 80051da:	f7fb fd6d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 80051de:	2100      	movs	r1, #0
 80051e0:	200d      	movs	r0, #13
 80051e2:	f7fb fd69 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 80051e6:	2130      	movs	r1, #48	; 0x30
 80051e8:	200e      	movs	r0, #14
 80051ea:	f7fb fd65 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 80051ee:	2100      	movs	r1, #0
 80051f0:	2050      	movs	r0, #80	; 0x50
 80051f2:	f7fb fd61 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 80051f6:	21ef      	movs	r1, #239	; 0xef
 80051f8:	2051      	movs	r0, #81	; 0x51
 80051fa:	f7fb fd5d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 80051fe:	2100      	movs	r1, #0
 8005200:	2052      	movs	r0, #82	; 0x52
 8005202:	f7fb fd59 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 8005206:	f240 113f 	movw	r1, #319	; 0x13f
 800520a:	2053      	movs	r0, #83	; 0x53
 800520c:	f7fb fd54 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 8005210:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005214:	2060      	movs	r0, #96	; 0x60
 8005216:	f7fb fd4f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 800521a:	2101      	movs	r1, #1
 800521c:	2061      	movs	r0, #97	; 0x61
 800521e:	f7fb fd4b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8005222:	2100      	movs	r1, #0
 8005224:	206a      	movs	r0, #106	; 0x6a
 8005226:	f7fb fd47 	bl	8000cb8 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 800522a:	2111      	movs	r1, #17
 800522c:	2090      	movs	r0, #144	; 0x90
 800522e:	f7fb fd43 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8005232:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005236:	2092      	movs	r0, #146	; 0x92
 8005238:	f7fb fd3e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 800523c:	f240 4102 	movw	r1, #1026	; 0x402
 8005240:	2093      	movs	r0, #147	; 0x93
 8005242:	f7fb fd39 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 8005246:	2102      	movs	r1, #2
 8005248:	2094      	movs	r0, #148	; 0x94
 800524a:	f7fb fd35 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 800524e:	2014      	movs	r0, #20
 8005250:	f002 fcb8 	bl	8007bc4 <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 8005254:	2101      	movs	r1, #1
 8005256:	2007      	movs	r0, #7
 8005258:	f7fb fd2e 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 800525c:	2014      	movs	r0, #20
 800525e:	f002 fcb1 	bl	8007bc4 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8005262:	2161      	movs	r1, #97	; 0x61
 8005264:	2007      	movs	r0, #7
 8005266:	f7fb fd27 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 800526a:	f240 1173 	movw	r1, #371	; 0x173
 800526e:	2007      	movs	r0, #7
 8005270:	f7fb fd22 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 8005274:	2100      	movs	r1, #0
 8005276:	2020      	movs	r0, #32
 8005278:	f7fb fd1e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 800527c:	2100      	movs	r1, #0
 800527e:	2021      	movs	r0, #33	; 0x21
 8005280:	f7fb fd1a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 8005284:	2122      	movs	r1, #34	; 0x22
 8005286:	2000      	movs	r0, #0
 8005288:	f7fb fd16 	bl	8000cb8 <LCD_WriteReg>
 800528c:	f000 beca 	b.w	8006024 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 8005290:	4b6b      	ldr	r3, [pc, #428]	; (8005440 <LCD_Init+0x3250>)
 8005292:	889b      	ldrh	r3, [r3, #4]
 8005294:	f24c 5205 	movw	r2, #50437	; 0xc505
 8005298:	4293      	cmp	r3, r2
 800529a:	f040 80d3 	bne.w	8005444 <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 800529e:	2100      	movs	r1, #0
 80052a0:	2000      	movs	r0, #0
 80052a2:	f7fb fd09 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80052a6:	2100      	movs	r1, #0
 80052a8:	2000      	movs	r0, #0
 80052aa:	f7fb fd05 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 80052ae:	2014      	movs	r0, #20
 80052b0:	f002 fc88 	bl	8007bc4 <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 80052b4:	2100      	movs	r1, #0
 80052b6:	2000      	movs	r0, #0
 80052b8:	f7fb fcfe 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80052bc:	2100      	movs	r1, #0
 80052be:	2000      	movs	r0, #0
 80052c0:	f7fb fcfa 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80052c4:	2100      	movs	r1, #0
 80052c6:	2000      	movs	r0, #0
 80052c8:	f7fb fcf6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80052cc:	2100      	movs	r1, #0
 80052ce:	2000      	movs	r0, #0
 80052d0:	f7fb fcf2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 80052d4:	2101      	movs	r1, #1
 80052d6:	20a4      	movs	r0, #164	; 0xa4
 80052d8:	f7fb fcee 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 80052dc:	2014      	movs	r0, #20
 80052de:	f002 fc71 	bl	8007bc4 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 80052e2:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80052e6:	2060      	movs	r0, #96	; 0x60
 80052e8:	f7fb fce6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 80052ec:	f640 0106 	movw	r1, #2054	; 0x806
 80052f0:	2008      	movs	r0, #8
 80052f2:	f7fb fce1 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 80052f6:	f240 7103 	movw	r1, #1795	; 0x703
 80052fa:	2030      	movs	r0, #48	; 0x30
 80052fc:	f7fb fcdc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 8005300:	2101      	movs	r1, #1
 8005302:	2031      	movs	r0, #49	; 0x31
 8005304:	f7fb fcd8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 8005308:	2104      	movs	r1, #4
 800530a:	2032      	movs	r0, #50	; 0x32
 800530c:	f7fb fcd4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 8005310:	f44f 7181 	mov.w	r1, #258	; 0x102
 8005314:	2033      	movs	r0, #51	; 0x33
 8005316:	f7fb fccf 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 800531a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800531e:	2034      	movs	r0, #52	; 0x34
 8005320:	f7fb fcca 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 8005324:	f240 1103 	movw	r1, #259	; 0x103
 8005328:	2035      	movs	r0, #53	; 0x35
 800532a:	f7fb fcc5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 800532e:	211f      	movs	r1, #31
 8005330:	2036      	movs	r0, #54	; 0x36
 8005332:	f7fb fcc1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 8005336:	f240 7103 	movw	r1, #1795	; 0x703
 800533a:	2037      	movs	r0, #55	; 0x37
 800533c:	f7fb fcbc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 8005340:	2101      	movs	r1, #1
 8005342:	2038      	movs	r0, #56	; 0x38
 8005344:	f7fb fcb8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 8005348:	2104      	movs	r1, #4
 800534a:	2039      	movs	r0, #57	; 0x39
 800534c:	f7fb fcb4 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 8005350:	2115      	movs	r1, #21
 8005352:	2090      	movs	r0, #144	; 0x90
 8005354:	f7fb fcb0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 8005358:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800535c:	2010      	movs	r0, #16
 800535e:	f7fb fcab 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 8005362:	f240 2147 	movw	r1, #583	; 0x247
 8005366:	2011      	movs	r0, #17
 8005368:	f7fb fca6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 800536c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8005370:	2012      	movs	r0, #18
 8005372:	f7fb fca1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 8005376:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 800537a:	2013      	movs	r0, #19
 800537c:	f7fb fc9c 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(120);
 8005380:	2078      	movs	r0, #120	; 0x78
 8005382:	f002 fc1f 	bl	8007bc4 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 8005386:	f44f 7180 	mov.w	r1, #256	; 0x100
 800538a:	2001      	movs	r0, #1
 800538c:	f7fb fc94 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8005390:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005394:	2002      	movs	r0, #2
 8005396:	f7fb fc8f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 800539a:	f241 0130 	movw	r1, #4144	; 0x1030
 800539e:	2003      	movs	r0, #3
 80053a0:	f7fb fc8a 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 80053a4:	2108      	movs	r1, #8
 80053a6:	200a      	movs	r0, #10
 80053a8:	f7fb fc86 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80053ac:	2100      	movs	r1, #0
 80053ae:	200c      	movs	r0, #12
 80053b0:	f7fb fc82 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 80053b4:	2120      	movs	r1, #32
 80053b6:	200e      	movs	r0, #14
 80053b8:	f7fb fc7e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 80053bc:	2100      	movs	r1, #0
 80053be:	200f      	movs	r0, #15
 80053c0:	f7fb fc7a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 80053c4:	2100      	movs	r1, #0
 80053c6:	2020      	movs	r0, #32
 80053c8:	f7fb fc76 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 80053cc:	2100      	movs	r1, #0
 80053ce:	2021      	movs	r0, #33	; 0x21
 80053d0:	f7fb fc72 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 80053d4:	213d      	movs	r1, #61	; 0x3d
 80053d6:	202a      	movs	r0, #42	; 0x2a
 80053d8:	f7fb fc6e 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(20);
 80053dc:	2014      	movs	r0, #20
 80053de:	f002 fbf1 	bl	8007bc4 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 80053e2:	212d      	movs	r1, #45	; 0x2d
 80053e4:	2029      	movs	r0, #41	; 0x29
 80053e6:	f7fb fc67 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 80053ea:	2100      	movs	r1, #0
 80053ec:	2050      	movs	r0, #80	; 0x50
 80053ee:	f7fb fc63 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 80053f2:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 80053f6:	2051      	movs	r0, #81	; 0x51
 80053f8:	f7fb fc5e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 80053fc:	2100      	movs	r1, #0
 80053fe:	2052      	movs	r0, #82	; 0x52
 8005400:	f7fb fc5a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8005404:	f240 113f 	movw	r1, #319	; 0x13f
 8005408:	2053      	movs	r0, #83	; 0x53
 800540a:	f7fb fc55 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 800540e:	2100      	movs	r1, #0
 8005410:	2061      	movs	r0, #97	; 0x61
 8005412:	f7fb fc51 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8005416:	2100      	movs	r1, #0
 8005418:	206a      	movs	r0, #106	; 0x6a
 800541a:	f7fb fc4d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 800541e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005422:	2092      	movs	r0, #146	; 0x92
 8005424:	f7fb fc48 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 8005428:	2105      	movs	r1, #5
 800542a:	2093      	movs	r0, #147	; 0x93
 800542c:	f7fb fc44 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 8005430:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005434:	2007      	movs	r0, #7
 8005436:	f7fb fc3f 	bl	8000cb8 <LCD_WriteReg>
 800543a:	f000 bdf3 	b.w	8006024 <LCD_Init+0x3e34>
 800543e:	bf00      	nop
 8005440:	20005a88 	.word	0x20005a88
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 8005444:	4bc2      	ldr	r3, [pc, #776]	; (8005750 <LCD_Init+0x3560>)
 8005446:	889b      	ldrh	r3, [r3, #4]
 8005448:	f648 1289 	movw	r2, #35209	; 0x8989
 800544c:	4293      	cmp	r3, r2
 800544e:	f040 80bc 	bne.w	80055ca <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 8005452:	2101      	movs	r1, #1
 8005454:	2000      	movs	r0, #0
 8005456:	f7fb fc2f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 800545a:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 800545e:	2003      	movs	r0, #3
 8005460:	f7fb fc2a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8005464:	2100      	movs	r1, #0
 8005466:	200c      	movs	r0, #12
 8005468:	f7fb fc26 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 800546c:	f640 010c 	movw	r1, #2060	; 0x80c
 8005470:	200d      	movs	r0, #13
 8005472:	f7fb fc21 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 8005476:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 800547a:	200e      	movs	r0, #14
 800547c:	f7fb fc1c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 8005480:	21b0      	movs	r1, #176	; 0xb0
 8005482:	201e      	movs	r0, #30
 8005484:	f7fb fc18 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 8005488:	f642 313f 	movw	r1, #11071	; 0x2b3f
 800548c:	2001      	movs	r0, #1
 800548e:	f7fb fc13 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 8005492:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005496:	2002      	movs	r0, #2
 8005498:	f7fb fc0e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 800549c:	2100      	movs	r1, #0
 800549e:	2010      	movs	r0, #16
 80054a0:	f7fb fc0a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 80054a4:	f246 0178 	movw	r1, #24696	; 0x6078
 80054a8:	2011      	movs	r0, #17
 80054aa:	f7fb fc05 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 80054ae:	2100      	movs	r1, #0
 80054b0:	2005      	movs	r0, #5
 80054b2:	f7fb fc01 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 80054b6:	2100      	movs	r1, #0
 80054b8:	2006      	movs	r0, #6
 80054ba:	f7fb fbfd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 80054be:	f64e 711c 	movw	r1, #61212	; 0xef1c
 80054c2:	2016      	movs	r0, #22
 80054c4:	f7fb fbf8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 80054c8:	2103      	movs	r1, #3
 80054ca:	2017      	movs	r0, #23
 80054cc:	f7fb fbf4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 80054d0:	f240 2133 	movw	r1, #563	; 0x233
 80054d4:	2007      	movs	r0, #7
 80054d6:	f7fb fbef 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 80054da:	2100      	movs	r1, #0
 80054dc:	200b      	movs	r0, #11
 80054de:	f7fb fbeb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 80054e2:	2100      	movs	r1, #0
 80054e4:	200f      	movs	r0, #15
 80054e6:	f7fb fbe7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 80054ea:	2100      	movs	r1, #0
 80054ec:	2041      	movs	r0, #65	; 0x41
 80054ee:	f7fb fbe3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 80054f2:	2100      	movs	r1, #0
 80054f4:	2042      	movs	r0, #66	; 0x42
 80054f6:	f7fb fbdf 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 80054fa:	2100      	movs	r1, #0
 80054fc:	2048      	movs	r0, #72	; 0x48
 80054fe:	f7fb fbdb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 8005502:	f240 113f 	movw	r1, #319	; 0x13f
 8005506:	2049      	movs	r0, #73	; 0x49
 8005508:	f7fb fbd6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 800550c:	2100      	movs	r1, #0
 800550e:	204a      	movs	r0, #74	; 0x4a
 8005510:	f7fb fbd2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 8005514:	2100      	movs	r1, #0
 8005516:	204b      	movs	r0, #75	; 0x4b
 8005518:	f7fb fbce 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 800551c:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8005520:	2044      	movs	r0, #68	; 0x44
 8005522:	f7fb fbc9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 8005526:	2100      	movs	r1, #0
 8005528:	2045      	movs	r0, #69	; 0x45
 800552a:	f7fb fbc5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 800552e:	f240 113f 	movw	r1, #319	; 0x13f
 8005532:	2046      	movs	r0, #70	; 0x46
 8005534:	f7fb fbc0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 8005538:	f240 7107 	movw	r1, #1799	; 0x707
 800553c:	2030      	movs	r0, #48	; 0x30
 800553e:	f7fb fbbb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 8005542:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005546:	2031      	movs	r0, #49	; 0x31
 8005548:	f7fb fbb6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 800554c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005550:	2032      	movs	r0, #50	; 0x32
 8005552:	f7fb fbb1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 8005556:	f240 5102 	movw	r1, #1282	; 0x502
 800555a:	2033      	movs	r0, #51	; 0x33
 800555c:	f7fb fbac 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 8005560:	f240 5107 	movw	r1, #1287	; 0x507
 8005564:	2034      	movs	r0, #52	; 0x34
 8005566:	f7fb fba7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 800556a:	f44f 7101 	mov.w	r1, #516	; 0x204
 800556e:	2035      	movs	r0, #53	; 0x35
 8005570:	f7fb fba2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 8005574:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005578:	2036      	movs	r0, #54	; 0x36
 800557a:	f7fb fb9d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 800557e:	f240 5102 	movw	r1, #1282	; 0x502
 8005582:	2037      	movs	r0, #55	; 0x37
 8005584:	f7fb fb98 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 8005588:	f240 3102 	movw	r1, #770	; 0x302
 800558c:	203a      	movs	r0, #58	; 0x3a
 800558e:	f7fb fb93 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 8005592:	f240 3102 	movw	r1, #770	; 0x302
 8005596:	203b      	movs	r0, #59	; 0x3b
 8005598:	f7fb fb8e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 800559c:	2100      	movs	r1, #0
 800559e:	2023      	movs	r0, #35	; 0x23
 80055a0:	f7fb fb8a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 80055a4:	2100      	movs	r1, #0
 80055a6:	2024      	movs	r0, #36	; 0x24
 80055a8:	f7fb fb86 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 80055ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055b0:	2025      	movs	r0, #37	; 0x25
 80055b2:	f7fb fb81 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 80055b6:	2100      	movs	r1, #0
 80055b8:	204f      	movs	r0, #79	; 0x4f
 80055ba:	f7fb fb7d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 80055be:	2100      	movs	r1, #0
 80055c0:	204e      	movs	r0, #78	; 0x4e
 80055c2:	f7fb fb79 	bl	8000cb8 <LCD_WriteReg>
 80055c6:	f000 bd2d 	b.w	8006024 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 80055ca:	4b61      	ldr	r3, [pc, #388]	; (8005750 <LCD_Init+0x3560>)
 80055cc:	889b      	ldrh	r3, [r3, #4]
 80055ce:	f244 5231 	movw	r2, #17713	; 0x4531
 80055d2:	4293      	cmp	r3, r2
 80055d4:	f040 80be 	bne.w	8005754 <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 80055d8:	2101      	movs	r1, #1
 80055da:	2000      	movs	r0, #0
 80055dc:	f7fb fb6c 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(10);
 80055e0:	200a      	movs	r0, #10
 80055e2:	f002 faef 	bl	8007bc4 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 80055e6:	f241 6128 	movw	r1, #5672	; 0x1628
 80055ea:	2010      	movs	r0, #16
 80055ec:	f7fb fb64 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 80055f0:	210e      	movs	r1, #14
 80055f2:	2012      	movs	r0, #18
 80055f4:	f7fb fb60 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 80055f8:	f640 2139 	movw	r1, #2617	; 0xa39
 80055fc:	2013      	movs	r0, #19
 80055fe:	f7fb fb5b 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(10);
 8005602:	200a      	movs	r0, #10
 8005604:	f002 fade 	bl	8007bc4 <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 8005608:	2140      	movs	r1, #64	; 0x40
 800560a:	2011      	movs	r0, #17
 800560c:	f7fb fb54 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 8005610:	2150      	movs	r1, #80	; 0x50
 8005612:	2015      	movs	r0, #21
 8005614:	f7fb fb50 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(10);
 8005618:	200a      	movs	r0, #10
 800561a:	f002 fad3 	bl	8007bc4 <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 800561e:	211e      	movs	r1, #30
 8005620:	2012      	movs	r0, #18
 8005622:	f7fb fb49 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(10);
 8005626:	200a      	movs	r0, #10
 8005628:	f002 facc 	bl	8007bc4 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 800562c:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 8005630:	2010      	movs	r0, #16
 8005632:	f7fb fb41 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 8005636:	f642 2139 	movw	r1, #10809	; 0x2a39
 800563a:	2013      	movs	r0, #19
 800563c:	f7fb fb3c 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(10);
 8005640:	200a      	movs	r0, #10
 8005642:	f002 fabf 	bl	8007bc4 <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 8005646:	f44f 7180 	mov.w	r1, #256	; 0x100
 800564a:	2001      	movs	r0, #1
 800564c:	f7fb fb34 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8005650:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005654:	2002      	movs	r0, #2
 8005656:	f7fb fb2f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 800565a:	f241 0138 	movw	r1, #4152	; 0x1038
 800565e:	2003      	movs	r0, #3
 8005660:	f7fb fb2a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 8005664:	f240 2102 	movw	r1, #514	; 0x202
 8005668:	2008      	movs	r0, #8
 800566a:	f7fb fb25 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 800566e:	2108      	movs	r1, #8
 8005670:	200a      	movs	r0, #10
 8005672:	f7fb fb21 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 8005676:	2100      	movs	r1, #0
 8005678:	2030      	movs	r0, #48	; 0x30
 800567a:	f7fb fb1d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 800567e:	f240 4102 	movw	r1, #1026	; 0x402
 8005682:	2031      	movs	r0, #49	; 0x31
 8005684:	f7fb fb18 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 8005688:	f44f 7183 	mov.w	r1, #262	; 0x106
 800568c:	2032      	movs	r0, #50	; 0x32
 800568e:	f7fb fb13 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 8005692:	f240 5103 	movw	r1, #1283	; 0x503
 8005696:	2033      	movs	r0, #51	; 0x33
 8005698:	f7fb fb0e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 800569c:	f44f 7182 	mov.w	r1, #260	; 0x104
 80056a0:	2034      	movs	r0, #52	; 0x34
 80056a2:	f7fb fb09 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 80056a6:	f240 3101 	movw	r1, #769	; 0x301
 80056aa:	2035      	movs	r0, #53	; 0x35
 80056ac:	f7fb fb04 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 80056b0:	f240 7107 	movw	r1, #1799	; 0x707
 80056b4:	2036      	movs	r0, #54	; 0x36
 80056b6:	f7fb faff 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 80056ba:	f240 3105 	movw	r1, #773	; 0x305
 80056be:	2037      	movs	r0, #55	; 0x37
 80056c0:	f7fb fafa 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 80056c4:	f44f 7102 	mov.w	r1, #520	; 0x208
 80056c8:	2038      	movs	r0, #56	; 0x38
 80056ca:	f7fb faf5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 80056ce:	f640 710b 	movw	r1, #3851	; 0xf0b
 80056d2:	2039      	movs	r0, #57	; 0x39
 80056d4:	f7fb faf0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 80056d8:	2102      	movs	r1, #2
 80056da:	2041      	movs	r0, #65	; 0x41
 80056dc:	f7fb faec 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 80056e0:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80056e4:	2060      	movs	r0, #96	; 0x60
 80056e6:	f7fb fae7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 80056ea:	2101      	movs	r1, #1
 80056ec:	2061      	movs	r0, #97	; 0x61
 80056ee:	f7fb fae3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 80056f2:	f44f 7104 	mov.w	r1, #528	; 0x210
 80056f6:	2090      	movs	r0, #144	; 0x90
 80056f8:	f7fb fade 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 80056fc:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005700:	2092      	movs	r0, #146	; 0x92
 8005702:	f7fb fad9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 8005706:	2104      	movs	r1, #4
 8005708:	2093      	movs	r0, #147	; 0x93
 800570a:	f7fb fad5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 800570e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005712:	20a0      	movs	r0, #160	; 0xa0
 8005714:	f7fb fad0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8005718:	2101      	movs	r1, #1
 800571a:	2007      	movs	r0, #7
 800571c:	f7fb facc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8005720:	2121      	movs	r1, #33	; 0x21
 8005722:	2007      	movs	r0, #7
 8005724:	f7fb fac8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8005728:	2123      	movs	r1, #35	; 0x23
 800572a:	2007      	movs	r0, #7
 800572c:	f7fb fac4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8005730:	2133      	movs	r1, #51	; 0x33
 8005732:	2007      	movs	r0, #7
 8005734:	f7fb fac0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8005738:	f240 1133 	movw	r1, #307	; 0x133
 800573c:	2007      	movs	r0, #7
 800573e:	f7fb fabb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 8005742:	2100      	movs	r1, #0
 8005744:	20a0      	movs	r0, #160	; 0xa0
 8005746:	f7fb fab7 	bl	8000cb8 <LCD_WriteReg>
 800574a:	f000 bc6b 	b.w	8006024 <LCD_Init+0x3e34>
 800574e:	bf00      	nop
 8005750:	20005a88 	.word	0x20005a88
	} else if (lcddev.id == 0x4535) {
 8005754:	4b5b      	ldr	r3, [pc, #364]	; (80058c4 <LCD_Init+0x36d4>)
 8005756:	889b      	ldrh	r3, [r3, #4]
 8005758:	f244 5235 	movw	r2, #17717	; 0x4535
 800575c:	4293      	cmp	r3, r2
 800575e:	f040 80b3 	bne.w	80058c8 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 8005762:	2130      	movs	r1, #48	; 0x30
 8005764:	2015      	movs	r0, #21
 8005766:	f7fb faa7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 800576a:	2110      	movs	r1, #16
 800576c:	209a      	movs	r0, #154	; 0x9a
 800576e:	f7fb faa3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 8005772:	2120      	movs	r1, #32
 8005774:	2011      	movs	r0, #17
 8005776:	f7fb fa9f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 800577a:	f243 4128 	movw	r1, #13352	; 0x3428
 800577e:	2010      	movs	r0, #16
 8005780:	f7fb fa9a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 8005784:	2102      	movs	r1, #2
 8005786:	2012      	movs	r0, #18
 8005788:	f7fb fa96 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 800578c:	f241 0138 	movw	r1, #4152	; 0x1038
 8005790:	2013      	movs	r0, #19
 8005792:	f7fb fa91 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(40);
 8005796:	2028      	movs	r0, #40	; 0x28
 8005798:	f002 fa14 	bl	8007bc4 <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 800579c:	2112      	movs	r1, #18
 800579e:	2012      	movs	r0, #18
 80057a0:	f7fb fa8a 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(40);
 80057a4:	2028      	movs	r0, #40	; 0x28
 80057a6:	f002 fa0d 	bl	8007bc4 <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 80057aa:	f243 4120 	movw	r1, #13344	; 0x3420
 80057ae:	2010      	movs	r0, #16
 80057b0:	f7fb fa82 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 80057b4:	f243 0138 	movw	r1, #12344	; 0x3038
 80057b8:	2013      	movs	r0, #19
 80057ba:	f7fb fa7d 	bl	8000cb8 <LCD_WriteReg>
		HAL_Delay(70);
 80057be:	2046      	movs	r0, #70	; 0x46
 80057c0:	f002 fa00 	bl	8007bc4 <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 80057c4:	2100      	movs	r1, #0
 80057c6:	2030      	movs	r0, #48	; 0x30
 80057c8:	f7fb fa76 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 80057cc:	f240 4102 	movw	r1, #1026	; 0x402
 80057d0:	2031      	movs	r0, #49	; 0x31
 80057d2:	f7fb fa71 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 80057d6:	f240 3107 	movw	r1, #775	; 0x307
 80057da:	2032      	movs	r0, #50	; 0x32
 80057dc:	f7fb fa6c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 80057e0:	f44f 7141 	mov.w	r1, #772	; 0x304
 80057e4:	2033      	movs	r0, #51	; 0x33
 80057e6:	f7fb fa67 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 80057ea:	2104      	movs	r1, #4
 80057ec:	2034      	movs	r0, #52	; 0x34
 80057ee:	f7fb fa63 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 80057f2:	f240 4101 	movw	r1, #1025	; 0x401
 80057f6:	2035      	movs	r0, #53	; 0x35
 80057f8:	f7fb fa5e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 80057fc:	f240 7107 	movw	r1, #1799	; 0x707
 8005800:	2036      	movs	r0, #54	; 0x36
 8005802:	f7fb fa59 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8005806:	f240 3105 	movw	r1, #773	; 0x305
 800580a:	2037      	movs	r0, #55	; 0x37
 800580c:	f7fb fa54 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 8005810:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8005814:	2038      	movs	r0, #56	; 0x38
 8005816:	f7fb fa4f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 800581a:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800581e:	2039      	movs	r0, #57	; 0x39
 8005820:	f7fb fa4a 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 8005824:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005828:	2001      	movs	r0, #1
 800582a:	f7fb fa45 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 800582e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005832:	2002      	movs	r0, #2
 8005834:	f7fb fa40 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 8005838:	f241 0130 	movw	r1, #4144	; 0x1030
 800583c:	2003      	movs	r0, #3
 800583e:	f7fb fa3b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 8005842:	f640 0108 	movw	r1, #2056	; 0x808
 8005846:	2008      	movs	r0, #8
 8005848:	f7fb fa36 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 800584c:	2108      	movs	r1, #8
 800584e:	200a      	movs	r0, #10
 8005850:	f7fb fa32 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8005854:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005858:	2060      	movs	r0, #96	; 0x60
 800585a:	f7fb fa2d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 800585e:	2101      	movs	r1, #1
 8005860:	2061      	movs	r0, #97	; 0x61
 8005862:	f7fb fa29 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 8005866:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800586a:	2090      	movs	r0, #144	; 0x90
 800586c:	f7fb fa24 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 8005870:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005874:	2092      	movs	r0, #146	; 0x92
 8005876:	f7fb fa1f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 800587a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800587e:	2093      	movs	r0, #147	; 0x93
 8005880:	f7fb fa1a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 8005884:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005888:	20a0      	movs	r0, #160	; 0xa0
 800588a:	f7fb fa15 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 800588e:	2110      	movs	r1, #16
 8005890:	20a3      	movs	r0, #163	; 0xa3
 8005892:	f7fb fa11 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8005896:	2101      	movs	r1, #1
 8005898:	2007      	movs	r0, #7
 800589a:	f7fb fa0d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 800589e:	2121      	movs	r1, #33	; 0x21
 80058a0:	2007      	movs	r0, #7
 80058a2:	f7fb fa09 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 80058a6:	2123      	movs	r1, #35	; 0x23
 80058a8:	2007      	movs	r0, #7
 80058aa:	f7fb fa05 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 80058ae:	2133      	movs	r1, #51	; 0x33
 80058b0:	2007      	movs	r0, #7
 80058b2:	f7fb fa01 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 80058b6:	f240 1133 	movw	r1, #307	; 0x133
 80058ba:	2007      	movs	r0, #7
 80058bc:	f7fb f9fc 	bl	8000cb8 <LCD_WriteReg>
 80058c0:	e3b0      	b.n	8006024 <LCD_Init+0x3e34>
 80058c2:	bf00      	nop
 80058c4:	20005a88 	.word	0x20005a88
	} else if (lcddev.id == 0X1963) {
 80058c8:	4ba8      	ldr	r3, [pc, #672]	; (8005b6c <LCD_Init+0x397c>)
 80058ca:	889b      	ldrh	r3, [r3, #4]
 80058cc:	f641 1263 	movw	r2, #6499	; 0x1963
 80058d0:	4293      	cmp	r3, r2
 80058d2:	f040 83a7 	bne.w	8006024 <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 80058d6:	20e2      	movs	r0, #226	; 0xe2
 80058d8:	f7fb f962 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 80058dc:	4ba4      	ldr	r3, [pc, #656]	; (8005b70 <LCD_Init+0x3980>)
 80058de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058e2:	611a      	str	r2, [r3, #16]
 80058e4:	4ba2      	ldr	r3, [pc, #648]	; (8005b70 <LCD_Init+0x3980>)
 80058e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058ea:	615a      	str	r2, [r3, #20]
 80058ec:	4ba1      	ldr	r3, [pc, #644]	; (8005b74 <LCD_Init+0x3984>)
 80058ee:	221d      	movs	r2, #29
 80058f0:	60da      	str	r2, [r3, #12]
 80058f2:	4b9f      	ldr	r3, [pc, #636]	; (8005b70 <LCD_Init+0x3980>)
 80058f4:	2280      	movs	r2, #128	; 0x80
 80058f6:	615a      	str	r2, [r3, #20]
 80058f8:	4b9d      	ldr	r3, [pc, #628]	; (8005b70 <LCD_Init+0x3980>)
 80058fa:	2280      	movs	r2, #128	; 0x80
 80058fc:	611a      	str	r2, [r3, #16]
 80058fe:	4b9c      	ldr	r3, [pc, #624]	; (8005b70 <LCD_Init+0x3980>)
 8005900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005904:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 8005906:	4b9a      	ldr	r3, [pc, #616]	; (8005b70 <LCD_Init+0x3980>)
 8005908:	f44f 7280 	mov.w	r2, #256	; 0x100
 800590c:	611a      	str	r2, [r3, #16]
 800590e:	4b98      	ldr	r3, [pc, #608]	; (8005b70 <LCD_Init+0x3980>)
 8005910:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005914:	615a      	str	r2, [r3, #20]
 8005916:	4b97      	ldr	r3, [pc, #604]	; (8005b74 <LCD_Init+0x3984>)
 8005918:	2202      	movs	r2, #2
 800591a:	60da      	str	r2, [r3, #12]
 800591c:	4b94      	ldr	r3, [pc, #592]	; (8005b70 <LCD_Init+0x3980>)
 800591e:	2280      	movs	r2, #128	; 0x80
 8005920:	615a      	str	r2, [r3, #20]
 8005922:	4b93      	ldr	r3, [pc, #588]	; (8005b70 <LCD_Init+0x3980>)
 8005924:	2280      	movs	r2, #128	; 0x80
 8005926:	611a      	str	r2, [r3, #16]
 8005928:	4b91      	ldr	r3, [pc, #580]	; (8005b70 <LCD_Init+0x3980>)
 800592a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800592e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 8005930:	4b8f      	ldr	r3, [pc, #572]	; (8005b70 <LCD_Init+0x3980>)
 8005932:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005936:	611a      	str	r2, [r3, #16]
 8005938:	4b8d      	ldr	r3, [pc, #564]	; (8005b70 <LCD_Init+0x3980>)
 800593a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800593e:	615a      	str	r2, [r3, #20]
 8005940:	4b8c      	ldr	r3, [pc, #560]	; (8005b74 <LCD_Init+0x3984>)
 8005942:	2204      	movs	r2, #4
 8005944:	60da      	str	r2, [r3, #12]
 8005946:	4b8a      	ldr	r3, [pc, #552]	; (8005b70 <LCD_Init+0x3980>)
 8005948:	2280      	movs	r2, #128	; 0x80
 800594a:	615a      	str	r2, [r3, #20]
 800594c:	4b88      	ldr	r3, [pc, #544]	; (8005b70 <LCD_Init+0x3980>)
 800594e:	2280      	movs	r2, #128	; 0x80
 8005950:	611a      	str	r2, [r3, #16]
 8005952:	4b87      	ldr	r3, [pc, #540]	; (8005b70 <LCD_Init+0x3980>)
 8005954:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005958:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 800595a:	2001      	movs	r0, #1
 800595c:	f002 f932 	bl	8007bc4 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 8005960:	20e0      	movs	r0, #224	; 0xe0
 8005962:	f7fb f91d 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 8005966:	4b82      	ldr	r3, [pc, #520]	; (8005b70 <LCD_Init+0x3980>)
 8005968:	f44f 7280 	mov.w	r2, #256	; 0x100
 800596c:	611a      	str	r2, [r3, #16]
 800596e:	4b80      	ldr	r3, [pc, #512]	; (8005b70 <LCD_Init+0x3980>)
 8005970:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005974:	615a      	str	r2, [r3, #20]
 8005976:	4b7f      	ldr	r3, [pc, #508]	; (8005b74 <LCD_Init+0x3984>)
 8005978:	2201      	movs	r2, #1
 800597a:	60da      	str	r2, [r3, #12]
 800597c:	4b7c      	ldr	r3, [pc, #496]	; (8005b70 <LCD_Init+0x3980>)
 800597e:	2280      	movs	r2, #128	; 0x80
 8005980:	615a      	str	r2, [r3, #20]
 8005982:	4b7b      	ldr	r3, [pc, #492]	; (8005b70 <LCD_Init+0x3980>)
 8005984:	2280      	movs	r2, #128	; 0x80
 8005986:	611a      	str	r2, [r3, #16]
 8005988:	4b79      	ldr	r3, [pc, #484]	; (8005b70 <LCD_Init+0x3980>)
 800598a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800598e:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 8005990:	200a      	movs	r0, #10
 8005992:	f002 f917 	bl	8007bc4 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 8005996:	20e0      	movs	r0, #224	; 0xe0
 8005998:	f7fb f902 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 800599c:	4b74      	ldr	r3, [pc, #464]	; (8005b70 <LCD_Init+0x3980>)
 800599e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059a2:	611a      	str	r2, [r3, #16]
 80059a4:	4b72      	ldr	r3, [pc, #456]	; (8005b70 <LCD_Init+0x3980>)
 80059a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059aa:	615a      	str	r2, [r3, #20]
 80059ac:	4b71      	ldr	r3, [pc, #452]	; (8005b74 <LCD_Init+0x3984>)
 80059ae:	2203      	movs	r2, #3
 80059b0:	60da      	str	r2, [r3, #12]
 80059b2:	4b6f      	ldr	r3, [pc, #444]	; (8005b70 <LCD_Init+0x3980>)
 80059b4:	2280      	movs	r2, #128	; 0x80
 80059b6:	615a      	str	r2, [r3, #20]
 80059b8:	4b6d      	ldr	r3, [pc, #436]	; (8005b70 <LCD_Init+0x3980>)
 80059ba:	2280      	movs	r2, #128	; 0x80
 80059bc:	611a      	str	r2, [r3, #16]
 80059be:	4b6c      	ldr	r3, [pc, #432]	; (8005b70 <LCD_Init+0x3980>)
 80059c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059c4:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 80059c6:	200c      	movs	r0, #12
 80059c8:	f002 f8fc 	bl	8007bc4 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 80059cc:	2001      	movs	r0, #1
 80059ce:	f7fb f8e7 	bl	8000ba0 <LCD_WR_REG>
		HAL_Delay(10);
 80059d2:	200a      	movs	r0, #10
 80059d4:	f002 f8f6 	bl	8007bc4 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 80059d8:	20e6      	movs	r0, #230	; 0xe6
 80059da:	f7fb f8e1 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 80059de:	4b64      	ldr	r3, [pc, #400]	; (8005b70 <LCD_Init+0x3980>)
 80059e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059e4:	611a      	str	r2, [r3, #16]
 80059e6:	4b62      	ldr	r3, [pc, #392]	; (8005b70 <LCD_Init+0x3980>)
 80059e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059ec:	615a      	str	r2, [r3, #20]
 80059ee:	4b61      	ldr	r3, [pc, #388]	; (8005b74 <LCD_Init+0x3984>)
 80059f0:	222f      	movs	r2, #47	; 0x2f
 80059f2:	60da      	str	r2, [r3, #12]
 80059f4:	4b5e      	ldr	r3, [pc, #376]	; (8005b70 <LCD_Init+0x3980>)
 80059f6:	2280      	movs	r2, #128	; 0x80
 80059f8:	615a      	str	r2, [r3, #20]
 80059fa:	4b5d      	ldr	r3, [pc, #372]	; (8005b70 <LCD_Init+0x3980>)
 80059fc:	2280      	movs	r2, #128	; 0x80
 80059fe:	611a      	str	r2, [r3, #16]
 8005a00:	4b5b      	ldr	r3, [pc, #364]	; (8005b70 <LCD_Init+0x3980>)
 8005a02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a06:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8005a08:	4b59      	ldr	r3, [pc, #356]	; (8005b70 <LCD_Init+0x3980>)
 8005a0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a0e:	611a      	str	r2, [r3, #16]
 8005a10:	4b57      	ldr	r3, [pc, #348]	; (8005b70 <LCD_Init+0x3980>)
 8005a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a16:	615a      	str	r2, [r3, #20]
 8005a18:	4b56      	ldr	r3, [pc, #344]	; (8005b74 <LCD_Init+0x3984>)
 8005a1a:	22ff      	movs	r2, #255	; 0xff
 8005a1c:	60da      	str	r2, [r3, #12]
 8005a1e:	4b54      	ldr	r3, [pc, #336]	; (8005b70 <LCD_Init+0x3980>)
 8005a20:	2280      	movs	r2, #128	; 0x80
 8005a22:	615a      	str	r2, [r3, #20]
 8005a24:	4b52      	ldr	r3, [pc, #328]	; (8005b70 <LCD_Init+0x3980>)
 8005a26:	2280      	movs	r2, #128	; 0x80
 8005a28:	611a      	str	r2, [r3, #16]
 8005a2a:	4b51      	ldr	r3, [pc, #324]	; (8005b70 <LCD_Init+0x3980>)
 8005a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a30:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8005a32:	4b4f      	ldr	r3, [pc, #316]	; (8005b70 <LCD_Init+0x3980>)
 8005a34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a38:	611a      	str	r2, [r3, #16]
 8005a3a:	4b4d      	ldr	r3, [pc, #308]	; (8005b70 <LCD_Init+0x3980>)
 8005a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a40:	615a      	str	r2, [r3, #20]
 8005a42:	4b4c      	ldr	r3, [pc, #304]	; (8005b74 <LCD_Init+0x3984>)
 8005a44:	22ff      	movs	r2, #255	; 0xff
 8005a46:	60da      	str	r2, [r3, #12]
 8005a48:	4b49      	ldr	r3, [pc, #292]	; (8005b70 <LCD_Init+0x3980>)
 8005a4a:	2280      	movs	r2, #128	; 0x80
 8005a4c:	615a      	str	r2, [r3, #20]
 8005a4e:	4b48      	ldr	r3, [pc, #288]	; (8005b70 <LCD_Init+0x3980>)
 8005a50:	2280      	movs	r2, #128	; 0x80
 8005a52:	611a      	str	r2, [r3, #16]
 8005a54:	4b46      	ldr	r3, [pc, #280]	; (8005b70 <LCD_Init+0x3980>)
 8005a56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a5a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 8005a5c:	20b0      	movs	r0, #176	; 0xb0
 8005a5e:	f7fb f89f 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 8005a62:	4b43      	ldr	r3, [pc, #268]	; (8005b70 <LCD_Init+0x3980>)
 8005a64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a68:	611a      	str	r2, [r3, #16]
 8005a6a:	4b41      	ldr	r3, [pc, #260]	; (8005b70 <LCD_Init+0x3980>)
 8005a6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a70:	615a      	str	r2, [r3, #20]
 8005a72:	4b40      	ldr	r3, [pc, #256]	; (8005b74 <LCD_Init+0x3984>)
 8005a74:	2220      	movs	r2, #32
 8005a76:	60da      	str	r2, [r3, #12]
 8005a78:	4b3d      	ldr	r3, [pc, #244]	; (8005b70 <LCD_Init+0x3980>)
 8005a7a:	2280      	movs	r2, #128	; 0x80
 8005a7c:	615a      	str	r2, [r3, #20]
 8005a7e:	4b3c      	ldr	r3, [pc, #240]	; (8005b70 <LCD_Init+0x3980>)
 8005a80:	2280      	movs	r2, #128	; 0x80
 8005a82:	611a      	str	r2, [r3, #16]
 8005a84:	4b3a      	ldr	r3, [pc, #232]	; (8005b70 <LCD_Init+0x3980>)
 8005a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a8a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 8005a8c:	4b38      	ldr	r3, [pc, #224]	; (8005b70 <LCD_Init+0x3980>)
 8005a8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a92:	611a      	str	r2, [r3, #16]
 8005a94:	4b36      	ldr	r3, [pc, #216]	; (8005b70 <LCD_Init+0x3980>)
 8005a96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a9a:	615a      	str	r2, [r3, #20]
 8005a9c:	4b35      	ldr	r3, [pc, #212]	; (8005b74 <LCD_Init+0x3984>)
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	60da      	str	r2, [r3, #12]
 8005aa2:	4b33      	ldr	r3, [pc, #204]	; (8005b70 <LCD_Init+0x3980>)
 8005aa4:	2280      	movs	r2, #128	; 0x80
 8005aa6:	615a      	str	r2, [r3, #20]
 8005aa8:	4b31      	ldr	r3, [pc, #196]	; (8005b70 <LCD_Init+0x3980>)
 8005aaa:	2280      	movs	r2, #128	; 0x80
 8005aac:	611a      	str	r2, [r3, #16]
 8005aae:	4b30      	ldr	r3, [pc, #192]	; (8005b70 <LCD_Init+0x3980>)
 8005ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ab4:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 8005ab6:	4b2e      	ldr	r3, [pc, #184]	; (8005b70 <LCD_Init+0x3980>)
 8005ab8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005abc:	611a      	str	r2, [r3, #16]
 8005abe:	4b2c      	ldr	r3, [pc, #176]	; (8005b70 <LCD_Init+0x3980>)
 8005ac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ac4:	615a      	str	r2, [r3, #20]
 8005ac6:	4b2b      	ldr	r3, [pc, #172]	; (8005b74 <LCD_Init+0x3984>)
 8005ac8:	2203      	movs	r2, #3
 8005aca:	60da      	str	r2, [r3, #12]
 8005acc:	4b28      	ldr	r3, [pc, #160]	; (8005b70 <LCD_Init+0x3980>)
 8005ace:	2280      	movs	r2, #128	; 0x80
 8005ad0:	615a      	str	r2, [r3, #20]
 8005ad2:	4b27      	ldr	r3, [pc, #156]	; (8005b70 <LCD_Init+0x3980>)
 8005ad4:	2280      	movs	r2, #128	; 0x80
 8005ad6:	611a      	str	r2, [r3, #16]
 8005ad8:	4b25      	ldr	r3, [pc, #148]	; (8005b70 <LCD_Init+0x3980>)
 8005ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ade:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8005ae0:	4b23      	ldr	r3, [pc, #140]	; (8005b70 <LCD_Init+0x3980>)
 8005ae2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ae6:	611a      	str	r2, [r3, #16]
 8005ae8:	4b21      	ldr	r3, [pc, #132]	; (8005b70 <LCD_Init+0x3980>)
 8005aea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aee:	615a      	str	r2, [r3, #20]
 8005af0:	4b20      	ldr	r3, [pc, #128]	; (8005b74 <LCD_Init+0x3984>)
 8005af2:	f240 321f 	movw	r2, #799	; 0x31f
 8005af6:	60da      	str	r2, [r3, #12]
 8005af8:	4b1d      	ldr	r3, [pc, #116]	; (8005b70 <LCD_Init+0x3980>)
 8005afa:	2280      	movs	r2, #128	; 0x80
 8005afc:	615a      	str	r2, [r3, #20]
 8005afe:	4b1c      	ldr	r3, [pc, #112]	; (8005b70 <LCD_Init+0x3980>)
 8005b00:	2280      	movs	r2, #128	; 0x80
 8005b02:	611a      	str	r2, [r3, #16]
 8005b04:	4b1a      	ldr	r3, [pc, #104]	; (8005b70 <LCD_Init+0x3980>)
 8005b06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b0a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 8005b0c:	4b18      	ldr	r3, [pc, #96]	; (8005b70 <LCD_Init+0x3980>)
 8005b0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b12:	611a      	str	r2, [r3, #16]
 8005b14:	4b16      	ldr	r3, [pc, #88]	; (8005b70 <LCD_Init+0x3980>)
 8005b16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b1a:	615a      	str	r2, [r3, #20]
 8005b1c:	4b15      	ldr	r3, [pc, #84]	; (8005b74 <LCD_Init+0x3984>)
 8005b1e:	2201      	movs	r2, #1
 8005b20:	60da      	str	r2, [r3, #12]
 8005b22:	4b13      	ldr	r3, [pc, #76]	; (8005b70 <LCD_Init+0x3980>)
 8005b24:	2280      	movs	r2, #128	; 0x80
 8005b26:	615a      	str	r2, [r3, #20]
 8005b28:	4b11      	ldr	r3, [pc, #68]	; (8005b70 <LCD_Init+0x3980>)
 8005b2a:	2280      	movs	r2, #128	; 0x80
 8005b2c:	611a      	str	r2, [r3, #16]
 8005b2e:	4b10      	ldr	r3, [pc, #64]	; (8005b70 <LCD_Init+0x3980>)
 8005b30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b34:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8005b36:	4b0e      	ldr	r3, [pc, #56]	; (8005b70 <LCD_Init+0x3980>)
 8005b38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b3c:	611a      	str	r2, [r3, #16]
 8005b3e:	4b0c      	ldr	r3, [pc, #48]	; (8005b70 <LCD_Init+0x3980>)
 8005b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b44:	615a      	str	r2, [r3, #20]
 8005b46:	4b0b      	ldr	r3, [pc, #44]	; (8005b74 <LCD_Init+0x3984>)
 8005b48:	f240 12df 	movw	r2, #479	; 0x1df
 8005b4c:	60da      	str	r2, [r3, #12]
 8005b4e:	4b08      	ldr	r3, [pc, #32]	; (8005b70 <LCD_Init+0x3980>)
 8005b50:	2280      	movs	r2, #128	; 0x80
 8005b52:	615a      	str	r2, [r3, #20]
 8005b54:	4b06      	ldr	r3, [pc, #24]	; (8005b70 <LCD_Init+0x3980>)
 8005b56:	2280      	movs	r2, #128	; 0x80
 8005b58:	611a      	str	r2, [r3, #16]
 8005b5a:	4b05      	ldr	r3, [pc, #20]	; (8005b70 <LCD_Init+0x3980>)
 8005b5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b60:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 8005b62:	4b03      	ldr	r3, [pc, #12]	; (8005b70 <LCD_Init+0x3980>)
 8005b64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b68:	e006      	b.n	8005b78 <LCD_Init+0x3988>
 8005b6a:	bf00      	nop
 8005b6c:	20005a88 	.word	0x20005a88
 8005b70:	40011000 	.word	0x40011000
 8005b74:	40010c00 	.word	0x40010c00
 8005b78:	611a      	str	r2, [r3, #16]
 8005b7a:	4ba3      	ldr	r3, [pc, #652]	; (8005e08 <LCD_Init+0x3c18>)
 8005b7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b80:	615a      	str	r2, [r3, #20]
 8005b82:	4ba2      	ldr	r3, [pc, #648]	; (8005e0c <LCD_Init+0x3c1c>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	60da      	str	r2, [r3, #12]
 8005b88:	4b9f      	ldr	r3, [pc, #636]	; (8005e08 <LCD_Init+0x3c18>)
 8005b8a:	2280      	movs	r2, #128	; 0x80
 8005b8c:	615a      	str	r2, [r3, #20]
 8005b8e:	4b9e      	ldr	r3, [pc, #632]	; (8005e08 <LCD_Init+0x3c18>)
 8005b90:	2280      	movs	r2, #128	; 0x80
 8005b92:	611a      	str	r2, [r3, #16]
 8005b94:	4b9c      	ldr	r3, [pc, #624]	; (8005e08 <LCD_Init+0x3c18>)
 8005b96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b9a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 8005b9c:	20b4      	movs	r0, #180	; 0xb4
 8005b9e:	f7fa ffff 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 8005ba2:	4b99      	ldr	r3, [pc, #612]	; (8005e08 <LCD_Init+0x3c18>)
 8005ba4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ba8:	611a      	str	r2, [r3, #16]
 8005baa:	4b97      	ldr	r3, [pc, #604]	; (8005e08 <LCD_Init+0x3c18>)
 8005bac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bb0:	615a      	str	r2, [r3, #20]
 8005bb2:	4b96      	ldr	r3, [pc, #600]	; (8005e0c <LCD_Init+0x3c1c>)
 8005bb4:	2204      	movs	r2, #4
 8005bb6:	60da      	str	r2, [r3, #12]
 8005bb8:	4b93      	ldr	r3, [pc, #588]	; (8005e08 <LCD_Init+0x3c18>)
 8005bba:	2280      	movs	r2, #128	; 0x80
 8005bbc:	615a      	str	r2, [r3, #20]
 8005bbe:	4b92      	ldr	r3, [pc, #584]	; (8005e08 <LCD_Init+0x3c18>)
 8005bc0:	2280      	movs	r2, #128	; 0x80
 8005bc2:	611a      	str	r2, [r3, #16]
 8005bc4:	4b90      	ldr	r3, [pc, #576]	; (8005e08 <LCD_Init+0x3c18>)
 8005bc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bca:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 8005bcc:	4b8e      	ldr	r3, [pc, #568]	; (8005e08 <LCD_Init+0x3c18>)
 8005bce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bd2:	611a      	str	r2, [r3, #16]
 8005bd4:	4b8c      	ldr	r3, [pc, #560]	; (8005e08 <LCD_Init+0x3c18>)
 8005bd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bda:	615a      	str	r2, [r3, #20]
 8005bdc:	4b8b      	ldr	r3, [pc, #556]	; (8005e0c <LCD_Init+0x3c1c>)
 8005bde:	f240 421f 	movw	r2, #1055	; 0x41f
 8005be2:	60da      	str	r2, [r3, #12]
 8005be4:	4b88      	ldr	r3, [pc, #544]	; (8005e08 <LCD_Init+0x3c18>)
 8005be6:	2280      	movs	r2, #128	; 0x80
 8005be8:	615a      	str	r2, [r3, #20]
 8005bea:	4b87      	ldr	r3, [pc, #540]	; (8005e08 <LCD_Init+0x3c18>)
 8005bec:	2280      	movs	r2, #128	; 0x80
 8005bee:	611a      	str	r2, [r3, #16]
 8005bf0:	4b85      	ldr	r3, [pc, #532]	; (8005e08 <LCD_Init+0x3c18>)
 8005bf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bf6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 8005bf8:	4b83      	ldr	r3, [pc, #524]	; (8005e08 <LCD_Init+0x3c18>)
 8005bfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bfe:	611a      	str	r2, [r3, #16]
 8005c00:	4b81      	ldr	r3, [pc, #516]	; (8005e08 <LCD_Init+0x3c18>)
 8005c02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c06:	615a      	str	r2, [r3, #20]
 8005c08:	4b80      	ldr	r3, [pc, #512]	; (8005e0c <LCD_Init+0x3c1c>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	60da      	str	r2, [r3, #12]
 8005c0e:	4b7e      	ldr	r3, [pc, #504]	; (8005e08 <LCD_Init+0x3c18>)
 8005c10:	2280      	movs	r2, #128	; 0x80
 8005c12:	615a      	str	r2, [r3, #20]
 8005c14:	4b7c      	ldr	r3, [pc, #496]	; (8005e08 <LCD_Init+0x3c18>)
 8005c16:	2280      	movs	r2, #128	; 0x80
 8005c18:	611a      	str	r2, [r3, #16]
 8005c1a:	4b7b      	ldr	r3, [pc, #492]	; (8005e08 <LCD_Init+0x3c18>)
 8005c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c20:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 8005c22:	4b79      	ldr	r3, [pc, #484]	; (8005e08 <LCD_Init+0x3c18>)
 8005c24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c28:	611a      	str	r2, [r3, #16]
 8005c2a:	4b77      	ldr	r3, [pc, #476]	; (8005e08 <LCD_Init+0x3c18>)
 8005c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c30:	615a      	str	r2, [r3, #20]
 8005c32:	4b76      	ldr	r3, [pc, #472]	; (8005e0c <LCD_Init+0x3c1c>)
 8005c34:	222e      	movs	r2, #46	; 0x2e
 8005c36:	60da      	str	r2, [r3, #12]
 8005c38:	4b73      	ldr	r3, [pc, #460]	; (8005e08 <LCD_Init+0x3c18>)
 8005c3a:	2280      	movs	r2, #128	; 0x80
 8005c3c:	615a      	str	r2, [r3, #20]
 8005c3e:	4b72      	ldr	r3, [pc, #456]	; (8005e08 <LCD_Init+0x3c18>)
 8005c40:	2280      	movs	r2, #128	; 0x80
 8005c42:	611a      	str	r2, [r3, #16]
 8005c44:	4b70      	ldr	r3, [pc, #448]	; (8005e08 <LCD_Init+0x3c18>)
 8005c46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c4a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8005c4c:	4b6e      	ldr	r3, [pc, #440]	; (8005e08 <LCD_Init+0x3c18>)
 8005c4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c52:	611a      	str	r2, [r3, #16]
 8005c54:	4b6c      	ldr	r3, [pc, #432]	; (8005e08 <LCD_Init+0x3c18>)
 8005c56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c5a:	615a      	str	r2, [r3, #20]
 8005c5c:	4b6b      	ldr	r3, [pc, #428]	; (8005e0c <LCD_Init+0x3c1c>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	60da      	str	r2, [r3, #12]
 8005c62:	4b69      	ldr	r3, [pc, #420]	; (8005e08 <LCD_Init+0x3c18>)
 8005c64:	2280      	movs	r2, #128	; 0x80
 8005c66:	615a      	str	r2, [r3, #20]
 8005c68:	4b67      	ldr	r3, [pc, #412]	; (8005e08 <LCD_Init+0x3c18>)
 8005c6a:	2280      	movs	r2, #128	; 0x80
 8005c6c:	611a      	str	r2, [r3, #16]
 8005c6e:	4b66      	ldr	r3, [pc, #408]	; (8005e08 <LCD_Init+0x3c18>)
 8005c70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c74:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005c76:	4b64      	ldr	r3, [pc, #400]	; (8005e08 <LCD_Init+0x3c18>)
 8005c78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c7c:	611a      	str	r2, [r3, #16]
 8005c7e:	4b62      	ldr	r3, [pc, #392]	; (8005e08 <LCD_Init+0x3c18>)
 8005c80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c84:	615a      	str	r2, [r3, #20]
 8005c86:	4b61      	ldr	r3, [pc, #388]	; (8005e0c <LCD_Init+0x3c1c>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	60da      	str	r2, [r3, #12]
 8005c8c:	4b5e      	ldr	r3, [pc, #376]	; (8005e08 <LCD_Init+0x3c18>)
 8005c8e:	2280      	movs	r2, #128	; 0x80
 8005c90:	615a      	str	r2, [r3, #20]
 8005c92:	4b5d      	ldr	r3, [pc, #372]	; (8005e08 <LCD_Init+0x3c18>)
 8005c94:	2280      	movs	r2, #128	; 0x80
 8005c96:	611a      	str	r2, [r3, #16]
 8005c98:	4b5b      	ldr	r3, [pc, #364]	; (8005e08 <LCD_Init+0x3c18>)
 8005c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c9e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005ca0:	4b59      	ldr	r3, [pc, #356]	; (8005e08 <LCD_Init+0x3c18>)
 8005ca2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ca6:	611a      	str	r2, [r3, #16]
 8005ca8:	4b57      	ldr	r3, [pc, #348]	; (8005e08 <LCD_Init+0x3c18>)
 8005caa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cae:	615a      	str	r2, [r3, #20]
 8005cb0:	4b56      	ldr	r3, [pc, #344]	; (8005e0c <LCD_Init+0x3c1c>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	60da      	str	r2, [r3, #12]
 8005cb6:	4b54      	ldr	r3, [pc, #336]	; (8005e08 <LCD_Init+0x3c18>)
 8005cb8:	2280      	movs	r2, #128	; 0x80
 8005cba:	615a      	str	r2, [r3, #20]
 8005cbc:	4b52      	ldr	r3, [pc, #328]	; (8005e08 <LCD_Init+0x3c18>)
 8005cbe:	2280      	movs	r2, #128	; 0x80
 8005cc0:	611a      	str	r2, [r3, #16]
 8005cc2:	4b51      	ldr	r3, [pc, #324]	; (8005e08 <LCD_Init+0x3c18>)
 8005cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cc8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005cca:	4b4f      	ldr	r3, [pc, #316]	; (8005e08 <LCD_Init+0x3c18>)
 8005ccc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cd0:	611a      	str	r2, [r3, #16]
 8005cd2:	4b4d      	ldr	r3, [pc, #308]	; (8005e08 <LCD_Init+0x3c18>)
 8005cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cd8:	615a      	str	r2, [r3, #20]
 8005cda:	4b4c      	ldr	r3, [pc, #304]	; (8005e0c <LCD_Init+0x3c1c>)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	60da      	str	r2, [r3, #12]
 8005ce0:	4b49      	ldr	r3, [pc, #292]	; (8005e08 <LCD_Init+0x3c18>)
 8005ce2:	2280      	movs	r2, #128	; 0x80
 8005ce4:	615a      	str	r2, [r3, #20]
 8005ce6:	4b48      	ldr	r3, [pc, #288]	; (8005e08 <LCD_Init+0x3c18>)
 8005ce8:	2280      	movs	r2, #128	; 0x80
 8005cea:	611a      	str	r2, [r3, #16]
 8005cec:	4b46      	ldr	r3, [pc, #280]	; (8005e08 <LCD_Init+0x3c18>)
 8005cee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cf2:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 8005cf4:	20b6      	movs	r0, #182	; 0xb6
 8005cf6:	f7fa ff53 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8005cfa:	4b43      	ldr	r3, [pc, #268]	; (8005e08 <LCD_Init+0x3c18>)
 8005cfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d00:	611a      	str	r2, [r3, #16]
 8005d02:	4b41      	ldr	r3, [pc, #260]	; (8005e08 <LCD_Init+0x3c18>)
 8005d04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d08:	615a      	str	r2, [r3, #20]
 8005d0a:	4b40      	ldr	r3, [pc, #256]	; (8005e0c <LCD_Init+0x3c1c>)
 8005d0c:	2202      	movs	r2, #2
 8005d0e:	60da      	str	r2, [r3, #12]
 8005d10:	4b3d      	ldr	r3, [pc, #244]	; (8005e08 <LCD_Init+0x3c18>)
 8005d12:	2280      	movs	r2, #128	; 0x80
 8005d14:	615a      	str	r2, [r3, #20]
 8005d16:	4b3c      	ldr	r3, [pc, #240]	; (8005e08 <LCD_Init+0x3c18>)
 8005d18:	2280      	movs	r2, #128	; 0x80
 8005d1a:	611a      	str	r2, [r3, #16]
 8005d1c:	4b3a      	ldr	r3, [pc, #232]	; (8005e08 <LCD_Init+0x3c18>)
 8005d1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d22:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 8005d24:	4b38      	ldr	r3, [pc, #224]	; (8005e08 <LCD_Init+0x3c18>)
 8005d26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d2a:	611a      	str	r2, [r3, #16]
 8005d2c:	4b36      	ldr	r3, [pc, #216]	; (8005e08 <LCD_Init+0x3c18>)
 8005d2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d32:	615a      	str	r2, [r3, #20]
 8005d34:	4b35      	ldr	r3, [pc, #212]	; (8005e0c <LCD_Init+0x3c1c>)
 8005d36:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8005d3a:	60da      	str	r2, [r3, #12]
 8005d3c:	4b32      	ldr	r3, [pc, #200]	; (8005e08 <LCD_Init+0x3c18>)
 8005d3e:	2280      	movs	r2, #128	; 0x80
 8005d40:	615a      	str	r2, [r3, #20]
 8005d42:	4b31      	ldr	r3, [pc, #196]	; (8005e08 <LCD_Init+0x3c18>)
 8005d44:	2280      	movs	r2, #128	; 0x80
 8005d46:	611a      	str	r2, [r3, #16]
 8005d48:	4b2f      	ldr	r3, [pc, #188]	; (8005e08 <LCD_Init+0x3c18>)
 8005d4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d4e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8005d50:	4b2d      	ldr	r3, [pc, #180]	; (8005e08 <LCD_Init+0x3c18>)
 8005d52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d56:	611a      	str	r2, [r3, #16]
 8005d58:	4b2b      	ldr	r3, [pc, #172]	; (8005e08 <LCD_Init+0x3c18>)
 8005d5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d5e:	615a      	str	r2, [r3, #20]
 8005d60:	4b2a      	ldr	r3, [pc, #168]	; (8005e0c <LCD_Init+0x3c1c>)
 8005d62:	2200      	movs	r2, #0
 8005d64:	60da      	str	r2, [r3, #12]
 8005d66:	4b28      	ldr	r3, [pc, #160]	; (8005e08 <LCD_Init+0x3c18>)
 8005d68:	2280      	movs	r2, #128	; 0x80
 8005d6a:	615a      	str	r2, [r3, #20]
 8005d6c:	4b26      	ldr	r3, [pc, #152]	; (8005e08 <LCD_Init+0x3c18>)
 8005d6e:	2280      	movs	r2, #128	; 0x80
 8005d70:	611a      	str	r2, [r3, #16]
 8005d72:	4b25      	ldr	r3, [pc, #148]	; (8005e08 <LCD_Init+0x3c18>)
 8005d74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d78:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 8005d7a:	4b23      	ldr	r3, [pc, #140]	; (8005e08 <LCD_Init+0x3c18>)
 8005d7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d80:	611a      	str	r2, [r3, #16]
 8005d82:	4b21      	ldr	r3, [pc, #132]	; (8005e08 <LCD_Init+0x3c18>)
 8005d84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d88:	615a      	str	r2, [r3, #20]
 8005d8a:	4b20      	ldr	r3, [pc, #128]	; (8005e0c <LCD_Init+0x3c1c>)
 8005d8c:	2217      	movs	r2, #23
 8005d8e:	60da      	str	r2, [r3, #12]
 8005d90:	4b1d      	ldr	r3, [pc, #116]	; (8005e08 <LCD_Init+0x3c18>)
 8005d92:	2280      	movs	r2, #128	; 0x80
 8005d94:	615a      	str	r2, [r3, #20]
 8005d96:	4b1c      	ldr	r3, [pc, #112]	; (8005e08 <LCD_Init+0x3c18>)
 8005d98:	2280      	movs	r2, #128	; 0x80
 8005d9a:	611a      	str	r2, [r3, #16]
 8005d9c:	4b1a      	ldr	r3, [pc, #104]	; (8005e08 <LCD_Init+0x3c18>)
 8005d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005da2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 8005da4:	4b18      	ldr	r3, [pc, #96]	; (8005e08 <LCD_Init+0x3c18>)
 8005da6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005daa:	611a      	str	r2, [r3, #16]
 8005dac:	4b16      	ldr	r3, [pc, #88]	; (8005e08 <LCD_Init+0x3c18>)
 8005dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005db2:	615a      	str	r2, [r3, #20]
 8005db4:	4b15      	ldr	r3, [pc, #84]	; (8005e0c <LCD_Init+0x3c1c>)
 8005db6:	2215      	movs	r2, #21
 8005db8:	60da      	str	r2, [r3, #12]
 8005dba:	4b13      	ldr	r3, [pc, #76]	; (8005e08 <LCD_Init+0x3c18>)
 8005dbc:	2280      	movs	r2, #128	; 0x80
 8005dbe:	615a      	str	r2, [r3, #20]
 8005dc0:	4b11      	ldr	r3, [pc, #68]	; (8005e08 <LCD_Init+0x3c18>)
 8005dc2:	2280      	movs	r2, #128	; 0x80
 8005dc4:	611a      	str	r2, [r3, #16]
 8005dc6:	4b10      	ldr	r3, [pc, #64]	; (8005e08 <LCD_Init+0x3c18>)
 8005dc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dcc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005dce:	4b0e      	ldr	r3, [pc, #56]	; (8005e08 <LCD_Init+0x3c18>)
 8005dd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005dd4:	611a      	str	r2, [r3, #16]
 8005dd6:	4b0c      	ldr	r3, [pc, #48]	; (8005e08 <LCD_Init+0x3c18>)
 8005dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ddc:	615a      	str	r2, [r3, #20]
 8005dde:	4b0b      	ldr	r3, [pc, #44]	; (8005e0c <LCD_Init+0x3c1c>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	60da      	str	r2, [r3, #12]
 8005de4:	4b08      	ldr	r3, [pc, #32]	; (8005e08 <LCD_Init+0x3c18>)
 8005de6:	2280      	movs	r2, #128	; 0x80
 8005de8:	615a      	str	r2, [r3, #20]
 8005dea:	4b07      	ldr	r3, [pc, #28]	; (8005e08 <LCD_Init+0x3c18>)
 8005dec:	2280      	movs	r2, #128	; 0x80
 8005dee:	611a      	str	r2, [r3, #16]
 8005df0:	4b05      	ldr	r3, [pc, #20]	; (8005e08 <LCD_Init+0x3c18>)
 8005df2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005df6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8005df8:	4b03      	ldr	r3, [pc, #12]	; (8005e08 <LCD_Init+0x3c18>)
 8005dfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005dfe:	611a      	str	r2, [r3, #16]
 8005e00:	4b01      	ldr	r3, [pc, #4]	; (8005e08 <LCD_Init+0x3c18>)
 8005e02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e06:	e003      	b.n	8005e10 <LCD_Init+0x3c20>
 8005e08:	40011000 	.word	0x40011000
 8005e0c:	40010c00 	.word	0x40010c00
 8005e10:	615a      	str	r2, [r3, #20]
 8005e12:	4b8b      	ldr	r3, [pc, #556]	; (8006040 <LCD_Init+0x3e50>)
 8005e14:	2200      	movs	r2, #0
 8005e16:	60da      	str	r2, [r3, #12]
 8005e18:	4b8a      	ldr	r3, [pc, #552]	; (8006044 <LCD_Init+0x3e54>)
 8005e1a:	2280      	movs	r2, #128	; 0x80
 8005e1c:	615a      	str	r2, [r3, #20]
 8005e1e:	4b89      	ldr	r3, [pc, #548]	; (8006044 <LCD_Init+0x3e54>)
 8005e20:	2280      	movs	r2, #128	; 0x80
 8005e22:	611a      	str	r2, [r3, #16]
 8005e24:	4b87      	ldr	r3, [pc, #540]	; (8006044 <LCD_Init+0x3e54>)
 8005e26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e2a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 8005e2c:	20f0      	movs	r0, #240	; 0xf0
 8005e2e:	f7fa feb7 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 8005e32:	4b84      	ldr	r3, [pc, #528]	; (8006044 <LCD_Init+0x3e54>)
 8005e34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e38:	611a      	str	r2, [r3, #16]
 8005e3a:	4b82      	ldr	r3, [pc, #520]	; (8006044 <LCD_Init+0x3e54>)
 8005e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e40:	615a      	str	r2, [r3, #20]
 8005e42:	4b7f      	ldr	r3, [pc, #508]	; (8006040 <LCD_Init+0x3e50>)
 8005e44:	2203      	movs	r2, #3
 8005e46:	60da      	str	r2, [r3, #12]
 8005e48:	4b7e      	ldr	r3, [pc, #504]	; (8006044 <LCD_Init+0x3e54>)
 8005e4a:	2280      	movs	r2, #128	; 0x80
 8005e4c:	615a      	str	r2, [r3, #20]
 8005e4e:	4b7d      	ldr	r3, [pc, #500]	; (8006044 <LCD_Init+0x3e54>)
 8005e50:	2280      	movs	r2, #128	; 0x80
 8005e52:	611a      	str	r2, [r3, #16]
 8005e54:	4b7b      	ldr	r3, [pc, #492]	; (8006044 <LCD_Init+0x3e54>)
 8005e56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e5a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 8005e5c:	2029      	movs	r0, #41	; 0x29
 8005e5e:	f7fa fe9f 	bl	8000ba0 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8005e62:	20d0      	movs	r0, #208	; 0xd0
 8005e64:	f7fa fe9c 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8005e68:	4b76      	ldr	r3, [pc, #472]	; (8006044 <LCD_Init+0x3e54>)
 8005e6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e6e:	611a      	str	r2, [r3, #16]
 8005e70:	4b74      	ldr	r3, [pc, #464]	; (8006044 <LCD_Init+0x3e54>)
 8005e72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e76:	615a      	str	r2, [r3, #20]
 8005e78:	4b71      	ldr	r3, [pc, #452]	; (8006040 <LCD_Init+0x3e50>)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	60da      	str	r2, [r3, #12]
 8005e7e:	4b71      	ldr	r3, [pc, #452]	; (8006044 <LCD_Init+0x3e54>)
 8005e80:	2280      	movs	r2, #128	; 0x80
 8005e82:	615a      	str	r2, [r3, #20]
 8005e84:	4b6f      	ldr	r3, [pc, #444]	; (8006044 <LCD_Init+0x3e54>)
 8005e86:	2280      	movs	r2, #128	; 0x80
 8005e88:	611a      	str	r2, [r3, #16]
 8005e8a:	4b6e      	ldr	r3, [pc, #440]	; (8006044 <LCD_Init+0x3e54>)
 8005e8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e90:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 8005e92:	20be      	movs	r0, #190	; 0xbe
 8005e94:	f7fa fe84 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8005e98:	4b6a      	ldr	r3, [pc, #424]	; (8006044 <LCD_Init+0x3e54>)
 8005e9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e9e:	611a      	str	r2, [r3, #16]
 8005ea0:	4b68      	ldr	r3, [pc, #416]	; (8006044 <LCD_Init+0x3e54>)
 8005ea2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ea6:	615a      	str	r2, [r3, #20]
 8005ea8:	4b65      	ldr	r3, [pc, #404]	; (8006040 <LCD_Init+0x3e50>)
 8005eaa:	2205      	movs	r2, #5
 8005eac:	60da      	str	r2, [r3, #12]
 8005eae:	4b65      	ldr	r3, [pc, #404]	; (8006044 <LCD_Init+0x3e54>)
 8005eb0:	2280      	movs	r2, #128	; 0x80
 8005eb2:	615a      	str	r2, [r3, #20]
 8005eb4:	4b63      	ldr	r3, [pc, #396]	; (8006044 <LCD_Init+0x3e54>)
 8005eb6:	2280      	movs	r2, #128	; 0x80
 8005eb8:	611a      	str	r2, [r3, #16]
 8005eba:	4b62      	ldr	r3, [pc, #392]	; (8006044 <LCD_Init+0x3e54>)
 8005ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ec0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8005ec2:	4b60      	ldr	r3, [pc, #384]	; (8006044 <LCD_Init+0x3e54>)
 8005ec4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ec8:	611a      	str	r2, [r3, #16]
 8005eca:	4b5e      	ldr	r3, [pc, #376]	; (8006044 <LCD_Init+0x3e54>)
 8005ecc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ed0:	615a      	str	r2, [r3, #20]
 8005ed2:	4b5b      	ldr	r3, [pc, #364]	; (8006040 <LCD_Init+0x3e50>)
 8005ed4:	22fe      	movs	r2, #254	; 0xfe
 8005ed6:	60da      	str	r2, [r3, #12]
 8005ed8:	4b5a      	ldr	r3, [pc, #360]	; (8006044 <LCD_Init+0x3e54>)
 8005eda:	2280      	movs	r2, #128	; 0x80
 8005edc:	615a      	str	r2, [r3, #20]
 8005ede:	4b59      	ldr	r3, [pc, #356]	; (8006044 <LCD_Init+0x3e54>)
 8005ee0:	2280      	movs	r2, #128	; 0x80
 8005ee2:	611a      	str	r2, [r3, #16]
 8005ee4:	4b57      	ldr	r3, [pc, #348]	; (8006044 <LCD_Init+0x3e54>)
 8005ee6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eea:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 8005eec:	4b55      	ldr	r3, [pc, #340]	; (8006044 <LCD_Init+0x3e54>)
 8005eee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ef2:	611a      	str	r2, [r3, #16]
 8005ef4:	4b53      	ldr	r3, [pc, #332]	; (8006044 <LCD_Init+0x3e54>)
 8005ef6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005efa:	615a      	str	r2, [r3, #20]
 8005efc:	4b50      	ldr	r3, [pc, #320]	; (8006040 <LCD_Init+0x3e50>)
 8005efe:	2201      	movs	r2, #1
 8005f00:	60da      	str	r2, [r3, #12]
 8005f02:	4b50      	ldr	r3, [pc, #320]	; (8006044 <LCD_Init+0x3e54>)
 8005f04:	2280      	movs	r2, #128	; 0x80
 8005f06:	615a      	str	r2, [r3, #20]
 8005f08:	4b4e      	ldr	r3, [pc, #312]	; (8006044 <LCD_Init+0x3e54>)
 8005f0a:	2280      	movs	r2, #128	; 0x80
 8005f0c:	611a      	str	r2, [r3, #16]
 8005f0e:	4b4d      	ldr	r3, [pc, #308]	; (8006044 <LCD_Init+0x3e54>)
 8005f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f14:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 8005f16:	4b4b      	ldr	r3, [pc, #300]	; (8006044 <LCD_Init+0x3e54>)
 8005f18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f1c:	611a      	str	r2, [r3, #16]
 8005f1e:	4b49      	ldr	r3, [pc, #292]	; (8006044 <LCD_Init+0x3e54>)
 8005f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f24:	615a      	str	r2, [r3, #20]
 8005f26:	4b46      	ldr	r3, [pc, #280]	; (8006040 <LCD_Init+0x3e50>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	60da      	str	r2, [r3, #12]
 8005f2c:	4b45      	ldr	r3, [pc, #276]	; (8006044 <LCD_Init+0x3e54>)
 8005f2e:	2280      	movs	r2, #128	; 0x80
 8005f30:	615a      	str	r2, [r3, #20]
 8005f32:	4b44      	ldr	r3, [pc, #272]	; (8006044 <LCD_Init+0x3e54>)
 8005f34:	2280      	movs	r2, #128	; 0x80
 8005f36:	611a      	str	r2, [r3, #16]
 8005f38:	4b42      	ldr	r3, [pc, #264]	; (8006044 <LCD_Init+0x3e54>)
 8005f3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f3e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8005f40:	4b40      	ldr	r3, [pc, #256]	; (8006044 <LCD_Init+0x3e54>)
 8005f42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f46:	611a      	str	r2, [r3, #16]
 8005f48:	4b3e      	ldr	r3, [pc, #248]	; (8006044 <LCD_Init+0x3e54>)
 8005f4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f4e:	615a      	str	r2, [r3, #20]
 8005f50:	4b3b      	ldr	r3, [pc, #236]	; (8006040 <LCD_Init+0x3e50>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	60da      	str	r2, [r3, #12]
 8005f56:	4b3b      	ldr	r3, [pc, #236]	; (8006044 <LCD_Init+0x3e54>)
 8005f58:	2280      	movs	r2, #128	; 0x80
 8005f5a:	615a      	str	r2, [r3, #20]
 8005f5c:	4b39      	ldr	r3, [pc, #228]	; (8006044 <LCD_Init+0x3e54>)
 8005f5e:	2280      	movs	r2, #128	; 0x80
 8005f60:	611a      	str	r2, [r3, #16]
 8005f62:	4b38      	ldr	r3, [pc, #224]	; (8006044 <LCD_Init+0x3e54>)
 8005f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f68:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 8005f6a:	4b36      	ldr	r3, [pc, #216]	; (8006044 <LCD_Init+0x3e54>)
 8005f6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f70:	611a      	str	r2, [r3, #16]
 8005f72:	4b34      	ldr	r3, [pc, #208]	; (8006044 <LCD_Init+0x3e54>)
 8005f74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f78:	615a      	str	r2, [r3, #20]
 8005f7a:	4b31      	ldr	r3, [pc, #196]	; (8006040 <LCD_Init+0x3e50>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	60da      	str	r2, [r3, #12]
 8005f80:	4b30      	ldr	r3, [pc, #192]	; (8006044 <LCD_Init+0x3e54>)
 8005f82:	2280      	movs	r2, #128	; 0x80
 8005f84:	615a      	str	r2, [r3, #20]
 8005f86:	4b2f      	ldr	r3, [pc, #188]	; (8006044 <LCD_Init+0x3e54>)
 8005f88:	2280      	movs	r2, #128	; 0x80
 8005f8a:	611a      	str	r2, [r3, #16]
 8005f8c:	4b2d      	ldr	r3, [pc, #180]	; (8006044 <LCD_Init+0x3e54>)
 8005f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f92:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8005f94:	20b8      	movs	r0, #184	; 0xb8
 8005f96:	f7fa fe03 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8005f9a:	4b2a      	ldr	r3, [pc, #168]	; (8006044 <LCD_Init+0x3e54>)
 8005f9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fa0:	611a      	str	r2, [r3, #16]
 8005fa2:	4b28      	ldr	r3, [pc, #160]	; (8006044 <LCD_Init+0x3e54>)
 8005fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fa8:	615a      	str	r2, [r3, #20]
 8005faa:	4b25      	ldr	r3, [pc, #148]	; (8006040 <LCD_Init+0x3e50>)
 8005fac:	2203      	movs	r2, #3
 8005fae:	60da      	str	r2, [r3, #12]
 8005fb0:	4b24      	ldr	r3, [pc, #144]	; (8006044 <LCD_Init+0x3e54>)
 8005fb2:	2280      	movs	r2, #128	; 0x80
 8005fb4:	615a      	str	r2, [r3, #20]
 8005fb6:	4b23      	ldr	r3, [pc, #140]	; (8006044 <LCD_Init+0x3e54>)
 8005fb8:	2280      	movs	r2, #128	; 0x80
 8005fba:	611a      	str	r2, [r3, #16]
 8005fbc:	4b21      	ldr	r3, [pc, #132]	; (8006044 <LCD_Init+0x3e54>)
 8005fbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fc2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 8005fc4:	4b1f      	ldr	r3, [pc, #124]	; (8006044 <LCD_Init+0x3e54>)
 8005fc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fca:	611a      	str	r2, [r3, #16]
 8005fcc:	4b1d      	ldr	r3, [pc, #116]	; (8006044 <LCD_Init+0x3e54>)
 8005fce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fd2:	615a      	str	r2, [r3, #20]
 8005fd4:	4b1a      	ldr	r3, [pc, #104]	; (8006040 <LCD_Init+0x3e50>)
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	60da      	str	r2, [r3, #12]
 8005fda:	4b1a      	ldr	r3, [pc, #104]	; (8006044 <LCD_Init+0x3e54>)
 8005fdc:	2280      	movs	r2, #128	; 0x80
 8005fde:	615a      	str	r2, [r3, #20]
 8005fe0:	4b18      	ldr	r3, [pc, #96]	; (8006044 <LCD_Init+0x3e54>)
 8005fe2:	2280      	movs	r2, #128	; 0x80
 8005fe4:	611a      	str	r2, [r3, #16]
 8005fe6:	4b17      	ldr	r3, [pc, #92]	; (8006044 <LCD_Init+0x3e54>)
 8005fe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fec:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 8005fee:	20ba      	movs	r0, #186	; 0xba
 8005ff0:	f7fa fdd6 	bl	8000ba0 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8005ff4:	4b13      	ldr	r3, [pc, #76]	; (8006044 <LCD_Init+0x3e54>)
 8005ff6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ffa:	611a      	str	r2, [r3, #16]
 8005ffc:	4b11      	ldr	r3, [pc, #68]	; (8006044 <LCD_Init+0x3e54>)
 8005ffe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006002:	615a      	str	r2, [r3, #20]
 8006004:	4b0e      	ldr	r3, [pc, #56]	; (8006040 <LCD_Init+0x3e50>)
 8006006:	2201      	movs	r2, #1
 8006008:	60da      	str	r2, [r3, #12]
 800600a:	4b0e      	ldr	r3, [pc, #56]	; (8006044 <LCD_Init+0x3e54>)
 800600c:	2280      	movs	r2, #128	; 0x80
 800600e:	615a      	str	r2, [r3, #20]
 8006010:	4b0c      	ldr	r3, [pc, #48]	; (8006044 <LCD_Init+0x3e54>)
 8006012:	2280      	movs	r2, #128	; 0x80
 8006014:	611a      	str	r2, [r3, #16]
 8006016:	4b0b      	ldr	r3, [pc, #44]	; (8006044 <LCD_Init+0x3e54>)
 8006018:	f44f 7200 	mov.w	r2, #512	; 0x200
 800601c:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 800601e:	2064      	movs	r0, #100	; 0x64
 8006020:	f7fb ff36 	bl	8001e90 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 8006024:	2000      	movs	r0, #0
 8006026:	f7fb ffd7 	bl	8001fd8 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 800602a:	4b07      	ldr	r3, [pc, #28]	; (8006048 <LCD_Init+0x3e58>)
 800602c:	2201      	movs	r2, #1
 800602e:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8006030:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006034:	f000 f80a 	bl	800604c <LCD_Clear>
}
 8006038:	bf00      	nop
 800603a:	3718      	adds	r7, #24
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}
 8006040:	40010c00 	.word	0x40010c00
 8006044:	40011000 	.word	0x40011000
 8006048:	422201a8 	.word	0x422201a8

0800604c <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	4603      	mov	r3, r0
 8006054:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 8006056:	2300      	movs	r3, #0
 8006058:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 800605a:	4b2a      	ldr	r3, [pc, #168]	; (8006104 <LCD_Clear+0xb8>)
 800605c:	881b      	ldrh	r3, [r3, #0]
 800605e:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 8006060:	4b28      	ldr	r3, [pc, #160]	; (8006104 <LCD_Clear+0xb8>)
 8006062:	885b      	ldrh	r3, [r3, #2]
 8006064:	461a      	mov	r2, r3
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	fb02 f303 	mul.w	r3, r2, r3
 800606c:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 800606e:	4b25      	ldr	r3, [pc, #148]	; (8006104 <LCD_Clear+0xb8>)
 8006070:	889b      	ldrh	r3, [r3, #4]
 8006072:	f646 0204 	movw	r2, #26628	; 0x6804
 8006076:	4293      	cmp	r3, r2
 8006078:	d11a      	bne.n	80060b0 <LCD_Clear+0x64>
 800607a:	4b22      	ldr	r3, [pc, #136]	; (8006104 <LCD_Clear+0xb8>)
 800607c:	799b      	ldrb	r3, [r3, #6]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d116      	bne.n	80060b0 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 8006082:	4b20      	ldr	r3, [pc, #128]	; (8006104 <LCD_Clear+0xb8>)
 8006084:	2200      	movs	r2, #0
 8006086:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8006088:	4b1e      	ldr	r3, [pc, #120]	; (8006104 <LCD_Clear+0xb8>)
 800608a:	222a      	movs	r2, #42	; 0x2a
 800608c:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 800608e:	4b1d      	ldr	r3, [pc, #116]	; (8006104 <LCD_Clear+0xb8>)
 8006090:	222b      	movs	r2, #43	; 0x2b
 8006092:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 8006094:	2100      	movs	r1, #0
 8006096:	2000      	movs	r0, #0
 8006098:	f7fa fe54 	bl	8000d44 <LCD_SetCursor>
		lcddev.dir = 1;
 800609c:	4b19      	ldr	r3, [pc, #100]	; (8006104 <LCD_Clear+0xb8>)
 800609e:	2201      	movs	r2, #1
 80060a0:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 80060a2:	4b18      	ldr	r3, [pc, #96]	; (8006104 <LCD_Clear+0xb8>)
 80060a4:	222b      	movs	r2, #43	; 0x2b
 80060a6:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 80060a8:	4b16      	ldr	r3, [pc, #88]	; (8006104 <LCD_Clear+0xb8>)
 80060aa:	222a      	movs	r2, #42	; 0x2a
 80060ac:	819a      	strh	r2, [r3, #12]
 80060ae:	e003      	b.n	80060b8 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 80060b0:	2100      	movs	r1, #0
 80060b2:	2000      	movs	r0, #0
 80060b4:	f7fa fe46 	bl	8000d44 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 80060b8:	f7fa fe38 	bl	8000d2c <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 80060bc:	2300      	movs	r3, #0
 80060be:	60fb      	str	r3, [r7, #12]
 80060c0:	e017      	b.n	80060f2 <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 80060c2:	4b11      	ldr	r3, [pc, #68]	; (8006108 <LCD_Clear+0xbc>)
 80060c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060c8:	611a      	str	r2, [r3, #16]
 80060ca:	4b0f      	ldr	r3, [pc, #60]	; (8006108 <LCD_Clear+0xbc>)
 80060cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060d0:	615a      	str	r2, [r3, #20]
 80060d2:	4a0e      	ldr	r2, [pc, #56]	; (800610c <LCD_Clear+0xc0>)
 80060d4:	88fb      	ldrh	r3, [r7, #6]
 80060d6:	60d3      	str	r3, [r2, #12]
 80060d8:	4b0b      	ldr	r3, [pc, #44]	; (8006108 <LCD_Clear+0xbc>)
 80060da:	2280      	movs	r2, #128	; 0x80
 80060dc:	615a      	str	r2, [r3, #20]
 80060de:	4b0a      	ldr	r3, [pc, #40]	; (8006108 <LCD_Clear+0xbc>)
 80060e0:	2280      	movs	r2, #128	; 0x80
 80060e2:	611a      	str	r2, [r3, #16]
 80060e4:	4b08      	ldr	r3, [pc, #32]	; (8006108 <LCD_Clear+0xbc>)
 80060e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060ea:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	3301      	adds	r3, #1
 80060f0:	60fb      	str	r3, [r7, #12]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d3e3      	bcc.n	80060c2 <LCD_Clear+0x76>
}
 80060fa:	bf00      	nop
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	20005a88 	.word	0x20005a88
 8006108:	40011000 	.word	0x40011000
 800610c:	40010c00 	.word	0x40010c00

08006110 <LCD_DrawLine>:
	}
}
// Draw a line
//x1,y1: coordinate of starting point
//x2,y2: coordinate of terminal point
void LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8006110:	b590      	push	{r4, r7, lr}
 8006112:	b08d      	sub	sp, #52	; 0x34
 8006114:	af00      	add	r7, sp, #0
 8006116:	4604      	mov	r4, r0
 8006118:	4608      	mov	r0, r1
 800611a:	4611      	mov	r1, r2
 800611c:	461a      	mov	r2, r3
 800611e:	4623      	mov	r3, r4
 8006120:	80fb      	strh	r3, [r7, #6]
 8006122:	4603      	mov	r3, r0
 8006124:	80bb      	strh	r3, [r7, #4]
 8006126:	460b      	mov	r3, r1
 8006128:	807b      	strh	r3, [r7, #2]
 800612a:	4613      	mov	r3, r2
 800612c:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr = 0, yerr = 0, delta_x, delta_y, distance;
 800612e:	2300      	movs	r3, #0
 8006130:	62bb      	str	r3, [r7, #40]	; 0x28
 8006132:	2300      	movs	r3, #0
 8006134:	627b      	str	r3, [r7, #36]	; 0x24
	int incx, incy, uRow, uCol;
	delta_x = x2 - x1; //计算坐标增量
 8006136:	887a      	ldrh	r2, [r7, #2]
 8006138:	88fb      	ldrh	r3, [r7, #6]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	623b      	str	r3, [r7, #32]
	delta_y = y2 - y1;
 800613e:	883a      	ldrh	r2, [r7, #0]
 8006140:	88bb      	ldrh	r3, [r7, #4]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	61fb      	str	r3, [r7, #28]
	uRow = x1;
 8006146:	88fb      	ldrh	r3, [r7, #6]
 8006148:	60fb      	str	r3, [r7, #12]
	uCol = y1;
 800614a:	88bb      	ldrh	r3, [r7, #4]
 800614c:	60bb      	str	r3, [r7, #8]
	if (delta_x > 0)
 800614e:	6a3b      	ldr	r3, [r7, #32]
 8006150:	2b00      	cmp	r3, #0
 8006152:	dd02      	ble.n	800615a <LCD_DrawLine+0x4a>
		incx = 1; //设置单步方向
 8006154:	2301      	movs	r3, #1
 8006156:	617b      	str	r3, [r7, #20]
 8006158:	e00b      	b.n	8006172 <LCD_DrawLine+0x62>
	else if (delta_x == 0)
 800615a:	6a3b      	ldr	r3, [r7, #32]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d102      	bne.n	8006166 <LCD_DrawLine+0x56>
		incx = 0; //垂直线
 8006160:	2300      	movs	r3, #0
 8006162:	617b      	str	r3, [r7, #20]
 8006164:	e005      	b.n	8006172 <LCD_DrawLine+0x62>
	else {
		incx = -1;
 8006166:	f04f 33ff 	mov.w	r3, #4294967295
 800616a:	617b      	str	r3, [r7, #20]
		delta_x = -delta_x;
 800616c:	6a3b      	ldr	r3, [r7, #32]
 800616e:	425b      	negs	r3, r3
 8006170:	623b      	str	r3, [r7, #32]
	}
	if (delta_y > 0)
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	2b00      	cmp	r3, #0
 8006176:	dd02      	ble.n	800617e <LCD_DrawLine+0x6e>
		incy = 1;
 8006178:	2301      	movs	r3, #1
 800617a:	613b      	str	r3, [r7, #16]
 800617c:	e00b      	b.n	8006196 <LCD_DrawLine+0x86>
	else if (delta_y == 0)
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d102      	bne.n	800618a <LCD_DrawLine+0x7a>
		incy = 0; //水平线
 8006184:	2300      	movs	r3, #0
 8006186:	613b      	str	r3, [r7, #16]
 8006188:	e005      	b.n	8006196 <LCD_DrawLine+0x86>
	else {
		incy = -1;
 800618a:	f04f 33ff 	mov.w	r3, #4294967295
 800618e:	613b      	str	r3, [r7, #16]
		delta_y = -delta_y;
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	425b      	negs	r3, r3
 8006194:	61fb      	str	r3, [r7, #28]
	}
	if (delta_x > delta_y)
 8006196:	6a3a      	ldr	r2, [r7, #32]
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	429a      	cmp	r2, r3
 800619c:	dd02      	ble.n	80061a4 <LCD_DrawLine+0x94>
		distance = delta_x; //选取基本增量坐标轴
 800619e:	6a3b      	ldr	r3, [r7, #32]
 80061a0:	61bb      	str	r3, [r7, #24]
 80061a2:	e001      	b.n	80061a8 <LCD_DrawLine+0x98>
	else
		distance = delta_y;
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	61bb      	str	r3, [r7, #24]
	for (t = 0; t <= distance + 1; t++) //画线输出
 80061a8:	2300      	movs	r3, #0
 80061aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80061ac:	e02a      	b.n	8006204 <LCD_DrawLine+0xf4>
			{
		LCD_DrawPoint(uRow, uCol); //画点
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	b292      	uxth	r2, r2
 80061b6:	4611      	mov	r1, r2
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7fb fba1 	bl	8001900 <LCD_DrawPoint>
		xerr += delta_x;
 80061be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061c0:	6a3b      	ldr	r3, [r7, #32]
 80061c2:	4413      	add	r3, r2
 80061c4:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr += delta_y;
 80061c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	4413      	add	r3, r2
 80061cc:	627b      	str	r3, [r7, #36]	; 0x24
		if (xerr > distance) {
 80061ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	429a      	cmp	r2, r3
 80061d4:	dd07      	ble.n	80061e6 <LCD_DrawLine+0xd6>
			xerr -= distance;
 80061d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow += incx;
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	4413      	add	r3, r2
 80061e4:	60fb      	str	r3, [r7, #12]
		}
		if (yerr > distance) {
 80061e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	dd07      	ble.n	80061fe <LCD_DrawLine+0xee>
			yerr -= distance;
 80061ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	627b      	str	r3, [r7, #36]	; 0x24
			uCol += incy;
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	4413      	add	r3, r2
 80061fc:	60bb      	str	r3, [r7, #8]
	for (t = 0; t <= distance + 1; t++) //画线输出
 80061fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006200:	3301      	adds	r3, #1
 8006202:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006204:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	3301      	adds	r3, #1
 800620a:	429a      	cmp	r2, r3
 800620c:	ddcf      	ble.n	80061ae <LCD_DrawLine+0x9e>
		}
	}
}
 800620e:	bf00      	nop
 8006210:	3734      	adds	r7, #52	; 0x34
 8006212:	46bd      	mov	sp, r7
 8006214:	bd90      	pop	{r4, r7, pc}

08006216 <LCD_DrawRectangle>:
//Draw a rectangle
//(x1,y1),(x2,y2): coordinates of the upper left point and bottom right point of a rectangle
void LCD_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8006216:	b590      	push	{r4, r7, lr}
 8006218:	b083      	sub	sp, #12
 800621a:	af00      	add	r7, sp, #0
 800621c:	4604      	mov	r4, r0
 800621e:	4608      	mov	r0, r1
 8006220:	4611      	mov	r1, r2
 8006222:	461a      	mov	r2, r3
 8006224:	4623      	mov	r3, r4
 8006226:	80fb      	strh	r3, [r7, #6]
 8006228:	4603      	mov	r3, r0
 800622a:	80bb      	strh	r3, [r7, #4]
 800622c:	460b      	mov	r3, r1
 800622e:	807b      	strh	r3, [r7, #2]
 8006230:	4613      	mov	r3, r2
 8006232:	803b      	strh	r3, [r7, #0]
	LCD_DrawLine(x1, y1, x2, y1);
 8006234:	88bb      	ldrh	r3, [r7, #4]
 8006236:	887a      	ldrh	r2, [r7, #2]
 8006238:	88b9      	ldrh	r1, [r7, #4]
 800623a:	88f8      	ldrh	r0, [r7, #6]
 800623c:	f7ff ff68 	bl	8006110 <LCD_DrawLine>
	LCD_DrawLine(x1, y1, x1, y2);
 8006240:	883b      	ldrh	r3, [r7, #0]
 8006242:	88fa      	ldrh	r2, [r7, #6]
 8006244:	88b9      	ldrh	r1, [r7, #4]
 8006246:	88f8      	ldrh	r0, [r7, #6]
 8006248:	f7ff ff62 	bl	8006110 <LCD_DrawLine>
	LCD_DrawLine(x1, y2, x2, y2);
 800624c:	883b      	ldrh	r3, [r7, #0]
 800624e:	887a      	ldrh	r2, [r7, #2]
 8006250:	8839      	ldrh	r1, [r7, #0]
 8006252:	88f8      	ldrh	r0, [r7, #6]
 8006254:	f7ff ff5c 	bl	8006110 <LCD_DrawLine>
	LCD_DrawLine(x2, y1, x2, y2);
 8006258:	883b      	ldrh	r3, [r7, #0]
 800625a:	887a      	ldrh	r2, [r7, #2]
 800625c:	88b9      	ldrh	r1, [r7, #4]
 800625e:	8878      	ldrh	r0, [r7, #2]
 8006260:	f7ff ff56 	bl	8006110 <LCD_DrawLine>
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	bd90      	pop	{r4, r7, pc}

0800626c <LCD_ShowChar>:
// num: char to be displayed
// size: font size 12/16/24
// mode: display characters on the displayed content and do not wipe away the displayed content(1)
//       display characters on the displayed content and wipe away the displayed content(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
		uint8_t mode) {
 800626c:	b590      	push	{r4, r7, lr}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	4604      	mov	r4, r0
 8006274:	4608      	mov	r0, r1
 8006276:	4611      	mov	r1, r2
 8006278:	461a      	mov	r2, r3
 800627a:	4623      	mov	r3, r4
 800627c:	80fb      	strh	r3, [r7, #6]
 800627e:	4603      	mov	r3, r0
 8006280:	80bb      	strh	r3, [r7, #4]
 8006282:	460b      	mov	r3, r1
 8006284:	70fb      	strb	r3, [r7, #3]
 8006286:	4613      	mov	r3, r2
 8006288:	70bb      	strb	r3, [r7, #2]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 800628a:	88bb      	ldrh	r3, [r7, #4]
 800628c:	817b      	strh	r3, [r7, #10]
	uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);	//得到字体一个字符对应点阵集所占的字节数
 800628e:	78bb      	ldrb	r3, [r7, #2]
 8006290:	08db      	lsrs	r3, r3, #3
 8006292:	b2db      	uxtb	r3, r3
 8006294:	461a      	mov	r2, r3
 8006296:	78bb      	ldrb	r3, [r7, #2]
 8006298:	f003 0307 	and.w	r3, r3, #7
 800629c:	b2db      	uxtb	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	bf14      	ite	ne
 80062a2:	2301      	movne	r3, #1
 80062a4:	2300      	moveq	r3, #0
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	4413      	add	r3, r2
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	78ba      	ldrb	r2, [r7, #2]
 80062ae:	0852      	lsrs	r2, r2, #1
 80062b0:	b2d2      	uxtb	r2, r2
 80062b2:	fb02 f303 	mul.w	r3, r2, r3
 80062b6:	727b      	strb	r3, [r7, #9]
	num = num - ' ';		//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 80062b8:	78fb      	ldrb	r3, [r7, #3]
 80062ba:	3b20      	subs	r3, #32
 80062bc:	70fb      	strb	r3, [r7, #3]
	for (t = 0; t < csize; t++) {
 80062be:	2300      	movs	r3, #0
 80062c0:	737b      	strb	r3, [r7, #13]
 80062c2:	e069      	b.n	8006398 <LCD_ShowChar+0x12c>
		if (size == 12)
 80062c4:	78bb      	ldrb	r3, [r7, #2]
 80062c6:	2b0c      	cmp	r3, #12
 80062c8:	d10b      	bne.n	80062e2 <LCD_ShowChar+0x76>
			temp = asc2_1206[num][t]; 	 	//调用1206字体
 80062ca:	78fa      	ldrb	r2, [r7, #3]
 80062cc:	7b79      	ldrb	r1, [r7, #13]
 80062ce:	4838      	ldr	r0, [pc, #224]	; (80063b0 <LCD_ShowChar+0x144>)
 80062d0:	4613      	mov	r3, r2
 80062d2:	005b      	lsls	r3, r3, #1
 80062d4:	4413      	add	r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	4403      	add	r3, r0
 80062da:	440b      	add	r3, r1
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	73fb      	strb	r3, [r7, #15]
 80062e0:	e019      	b.n	8006316 <LCD_ShowChar+0xaa>
		else if (size == 16)
 80062e2:	78bb      	ldrb	r3, [r7, #2]
 80062e4:	2b10      	cmp	r3, #16
 80062e6:	d108      	bne.n	80062fa <LCD_ShowChar+0x8e>
			temp = asc2_1608[num][t];	//调用1608字体
 80062e8:	78fa      	ldrb	r2, [r7, #3]
 80062ea:	7b7b      	ldrb	r3, [r7, #13]
 80062ec:	4931      	ldr	r1, [pc, #196]	; (80063b4 <LCD_ShowChar+0x148>)
 80062ee:	0112      	lsls	r2, r2, #4
 80062f0:	440a      	add	r2, r1
 80062f2:	4413      	add	r3, r2
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	73fb      	strb	r3, [r7, #15]
 80062f8:	e00d      	b.n	8006316 <LCD_ShowChar+0xaa>
		else if (size == 24)
 80062fa:	78bb      	ldrb	r3, [r7, #2]
 80062fc:	2b18      	cmp	r3, #24
 80062fe:	d150      	bne.n	80063a2 <LCD_ShowChar+0x136>
			temp = asc2_2412[num][t];	//调用2412字体
 8006300:	78fa      	ldrb	r2, [r7, #3]
 8006302:	7b79      	ldrb	r1, [r7, #13]
 8006304:	482c      	ldr	r0, [pc, #176]	; (80063b8 <LCD_ShowChar+0x14c>)
 8006306:	4613      	mov	r3, r2
 8006308:	00db      	lsls	r3, r3, #3
 800630a:	4413      	add	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4403      	add	r3, r0
 8006310:	440b      	add	r3, r1
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	73fb      	strb	r3, [r7, #15]
		else
			return;								//没有的字库
		for (t1 = 0; t1 < 8; t1++) {
 8006316:	2300      	movs	r3, #0
 8006318:	73bb      	strb	r3, [r7, #14]
 800631a:	e035      	b.n	8006388 <LCD_ShowChar+0x11c>
			if (temp & 0x80)
 800631c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006320:	2b00      	cmp	r3, #0
 8006322:	da07      	bge.n	8006334 <LCD_ShowChar+0xc8>
				LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 8006324:	4b25      	ldr	r3, [pc, #148]	; (80063bc <LCD_ShowChar+0x150>)
 8006326:	881a      	ldrh	r2, [r3, #0]
 8006328:	88b9      	ldrh	r1, [r7, #4]
 800632a:	88fb      	ldrh	r3, [r7, #6]
 800632c:	4618      	mov	r0, r3
 800632e:	f7fb fb17 	bl	8001960 <LCD_Fast_DrawPoint>
 8006332:	e00a      	b.n	800634a <LCD_ShowChar+0xde>
			else if (mode == 0)
 8006334:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d106      	bne.n	800634a <LCD_ShowChar+0xde>
				LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 800633c:	4b20      	ldr	r3, [pc, #128]	; (80063c0 <LCD_ShowChar+0x154>)
 800633e:	881a      	ldrh	r2, [r3, #0]
 8006340:	88b9      	ldrh	r1, [r7, #4]
 8006342:	88fb      	ldrh	r3, [r7, #6]
 8006344:	4618      	mov	r0, r3
 8006346:	f7fb fb0b 	bl	8001960 <LCD_Fast_DrawPoint>
			temp <<= 1;
 800634a:	7bfb      	ldrb	r3, [r7, #15]
 800634c:	005b      	lsls	r3, r3, #1
 800634e:	73fb      	strb	r3, [r7, #15]
			y++;
 8006350:	88bb      	ldrh	r3, [r7, #4]
 8006352:	3301      	adds	r3, #1
 8006354:	80bb      	strh	r3, [r7, #4]
			if (y >= lcddev.height)
 8006356:	4b1b      	ldr	r3, [pc, #108]	; (80063c4 <LCD_ShowChar+0x158>)
 8006358:	885b      	ldrh	r3, [r3, #2]
 800635a:	88ba      	ldrh	r2, [r7, #4]
 800635c:	429a      	cmp	r2, r3
 800635e:	d222      	bcs.n	80063a6 <LCD_ShowChar+0x13a>
				return;		//超区域了
			if ((y - y0) == size) {
 8006360:	88ba      	ldrh	r2, [r7, #4]
 8006362:	897b      	ldrh	r3, [r7, #10]
 8006364:	1ad2      	subs	r2, r2, r3
 8006366:	78bb      	ldrb	r3, [r7, #2]
 8006368:	429a      	cmp	r2, r3
 800636a:	d10a      	bne.n	8006382 <LCD_ShowChar+0x116>
				y = y0;
 800636c:	897b      	ldrh	r3, [r7, #10]
 800636e:	80bb      	strh	r3, [r7, #4]
				x++;
 8006370:	88fb      	ldrh	r3, [r7, #6]
 8006372:	3301      	adds	r3, #1
 8006374:	80fb      	strh	r3, [r7, #6]
				if (x >= lcddev.width)
 8006376:	4b13      	ldr	r3, [pc, #76]	; (80063c4 <LCD_ShowChar+0x158>)
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	88fa      	ldrh	r2, [r7, #6]
 800637c:	429a      	cmp	r2, r3
 800637e:	d307      	bcc.n	8006390 <LCD_ShowChar+0x124>
					return;	//超区域了
 8006380:	e012      	b.n	80063a8 <LCD_ShowChar+0x13c>
		for (t1 = 0; t1 < 8; t1++) {
 8006382:	7bbb      	ldrb	r3, [r7, #14]
 8006384:	3301      	adds	r3, #1
 8006386:	73bb      	strb	r3, [r7, #14]
 8006388:	7bbb      	ldrb	r3, [r7, #14]
 800638a:	2b07      	cmp	r3, #7
 800638c:	d9c6      	bls.n	800631c <LCD_ShowChar+0xb0>
 800638e:	e000      	b.n	8006392 <LCD_ShowChar+0x126>
				break;
 8006390:	bf00      	nop
	for (t = 0; t < csize; t++) {
 8006392:	7b7b      	ldrb	r3, [r7, #13]
 8006394:	3301      	adds	r3, #1
 8006396:	737b      	strb	r3, [r7, #13]
 8006398:	7b7a      	ldrb	r2, [r7, #13]
 800639a:	7a7b      	ldrb	r3, [r7, #9]
 800639c:	429a      	cmp	r2, r3
 800639e:	d391      	bcc.n	80062c4 <LCD_ShowChar+0x58>
 80063a0:	e002      	b.n	80063a8 <LCD_ShowChar+0x13c>
			return;								//没有的字库
 80063a2:	bf00      	nop
 80063a4:	e000      	b.n	80063a8 <LCD_ShowChar+0x13c>
				return;		//超区域了
 80063a6:	bf00      	nop
			}
		}
	}
}
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd90      	pop	{r4, r7, pc}
 80063ae:	bf00      	nop
 80063b0:	0800bdf0 	.word	0x0800bdf0
 80063b4:	0800c264 	.word	0x0800c264
 80063b8:	0800c854 	.word	0x0800c854
 80063bc:	20000268 	.word	0x20000268
 80063c0:	20000000 	.word	0x20000000
 80063c4:	20005a88 	.word	0x20005a88

080063c8 <LCD_ShowString>:
// x,y: starting coordinate
// width, height: display area size
// size: font size // x,y: starting coordinate
// *p: string
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint8_t size, uint8_t *p) {
 80063c8:	b590      	push	{r4, r7, lr}
 80063ca:	b087      	sub	sp, #28
 80063cc:	af02      	add	r7, sp, #8
 80063ce:	4604      	mov	r4, r0
 80063d0:	4608      	mov	r0, r1
 80063d2:	4611      	mov	r1, r2
 80063d4:	461a      	mov	r2, r3
 80063d6:	4623      	mov	r3, r4
 80063d8:	80fb      	strh	r3, [r7, #6]
 80063da:	4603      	mov	r3, r0
 80063dc:	80bb      	strh	r3, [r7, #4]
 80063de:	460b      	mov	r3, r1
 80063e0:	807b      	strh	r3, [r7, #2]
 80063e2:	4613      	mov	r3, r2
 80063e4:	803b      	strh	r3, [r7, #0]
	uint8_t x0 = x;
 80063e6:	88fb      	ldrh	r3, [r7, #6]
 80063e8:	73fb      	strb	r3, [r7, #15]
	width += x;
 80063ea:	887a      	ldrh	r2, [r7, #2]
 80063ec:	88fb      	ldrh	r3, [r7, #6]
 80063ee:	4413      	add	r3, r2
 80063f0:	807b      	strh	r3, [r7, #2]
	height += y;
 80063f2:	883a      	ldrh	r2, [r7, #0]
 80063f4:	88bb      	ldrh	r3, [r7, #4]
 80063f6:	4413      	add	r3, r2
 80063f8:	803b      	strh	r3, [r7, #0]
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 80063fa:	e025      	b.n	8006448 <LCD_ShowString+0x80>
	{
		if (x >= width) {
 80063fc:	88fa      	ldrh	r2, [r7, #6]
 80063fe:	887b      	ldrh	r3, [r7, #2]
 8006400:	429a      	cmp	r2, r3
 8006402:	d307      	bcc.n	8006414 <LCD_ShowString+0x4c>
			x = x0;
 8006404:	7bfb      	ldrb	r3, [r7, #15]
 8006406:	80fb      	strh	r3, [r7, #6]
			y += size;
 8006408:	f897 3020 	ldrb.w	r3, [r7, #32]
 800640c:	b29a      	uxth	r2, r3
 800640e:	88bb      	ldrh	r3, [r7, #4]
 8006410:	4413      	add	r3, r2
 8006412:	80bb      	strh	r3, [r7, #4]
		}
		if (y >= height)
 8006414:	88ba      	ldrh	r2, [r7, #4]
 8006416:	883b      	ldrh	r3, [r7, #0]
 8006418:	429a      	cmp	r2, r3
 800641a:	d21e      	bcs.n	800645a <LCD_ShowString+0x92>
			break;	//退出
		LCD_ShowChar(x, y, *p, size, 0);
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	781a      	ldrb	r2, [r3, #0]
 8006420:	f897 4020 	ldrb.w	r4, [r7, #32]
 8006424:	88b9      	ldrh	r1, [r7, #4]
 8006426:	88f8      	ldrh	r0, [r7, #6]
 8006428:	2300      	movs	r3, #0
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	4623      	mov	r3, r4
 800642e:	f7ff ff1d 	bl	800626c <LCD_ShowChar>
		x += size / 2;
 8006432:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006436:	085b      	lsrs	r3, r3, #1
 8006438:	b2db      	uxtb	r3, r3
 800643a:	b29a      	uxth	r2, r3
 800643c:	88fb      	ldrh	r3, [r7, #6]
 800643e:	4413      	add	r3, r2
 8006440:	80fb      	strh	r3, [r7, #6]
		p++;
 8006442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006444:	3301      	adds	r3, #1
 8006446:	627b      	str	r3, [r7, #36]	; 0x24
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 8006448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	2b7e      	cmp	r3, #126	; 0x7e
 800644e:	d805      	bhi.n	800645c <LCD_ShowString+0x94>
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	2b1f      	cmp	r3, #31
 8006456:	d8d1      	bhi.n	80063fc <LCD_ShowString+0x34>
	}
}
 8006458:	e000      	b.n	800645c <LCD_ShowString+0x94>
			break;	//退出
 800645a:	bf00      	nop
}
 800645c:	bf00      	nop
 800645e:	3714      	adds	r7, #20
 8006460:	46bd      	mov	sp, r7
 8006462:	bd90      	pop	{r4, r7, pc}

08006464 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b09e      	sub	sp, #120	; 0x78
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
	// 1 电脑
	if(huart->Instance==USART1)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a9b      	ldr	r2, [pc, #620]	; (80066e0 <HAL_UART_RxCpltCallback+0x27c>)
 8006472:	4293      	cmp	r3, r2
 8006474:	f040 830b 	bne.w	8006a8e <HAL_UART_RxCpltCallback+0x62a>
	{
		//HAL_UART_Transmit(&huart2, "DO", 2, 0xffff);
		static unsigned char uRx_Data[1024] = {0};
		static unsigned char uLength = 0;
		if(rcv_buffer_user[0] == '\r')
 8006478:	4b9a      	ldr	r3, [pc, #616]	; (80066e4 <HAL_UART_RxCpltCallback+0x280>)
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	2b0d      	cmp	r3, #13
 800647e:	f040 82f9 	bne.w	8006a74 <HAL_UART_RxCpltCallback+0x610>
		{
			uRx_Data[uLength] = rcv_buffer_user[0];
 8006482:	4b99      	ldr	r3, [pc, #612]	; (80066e8 <HAL_UART_RxCpltCallback+0x284>)
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	461a      	mov	r2, r3
 8006488:	4b96      	ldr	r3, [pc, #600]	; (80066e4 <HAL_UART_RxCpltCallback+0x280>)
 800648a:	7819      	ldrb	r1, [r3, #0]
 800648c:	4b97      	ldr	r3, [pc, #604]	; (80066ec <HAL_UART_RxCpltCallback+0x288>)
 800648e:	5499      	strb	r1, [r3, r2]
			uRx_Data[uLength+1] = '\n';
 8006490:	4b95      	ldr	r3, [pc, #596]	; (80066e8 <HAL_UART_RxCpltCallback+0x284>)
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	3301      	adds	r3, #1
 8006496:	4a95      	ldr	r2, [pc, #596]	; (80066ec <HAL_UART_RxCpltCallback+0x288>)
 8006498:	210a      	movs	r1, #10
 800649a:	54d1      	strb	r1, [r2, r3]
			uRx_Data[uLength+2] = '\n';
 800649c:	4b92      	ldr	r3, [pc, #584]	; (80066e8 <HAL_UART_RxCpltCallback+0x284>)
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	3302      	adds	r3, #2
 80064a2:	4a92      	ldr	r2, [pc, #584]	; (80066ec <HAL_UART_RxCpltCallback+0x288>)
 80064a4:	210a      	movs	r1, #10
 80064a6:	54d1      	strb	r1, [r2, r3]
			for (int i=0;i<uLength;i++)
 80064a8:	2300      	movs	r3, #0
 80064aa:	677b      	str	r3, [r7, #116]	; 0x74
 80064ac:	e00b      	b.n	80064c6 <HAL_UART_RxCpltCallback+0x62>
			{
				outd[i]=uRx_Data[i];
 80064ae:	4a8f      	ldr	r2, [pc, #572]	; (80066ec <HAL_UART_RxCpltCallback+0x288>)
 80064b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064b2:	4413      	add	r3, r2
 80064b4:	7819      	ldrb	r1, [r3, #0]
 80064b6:	4a8e      	ldr	r2, [pc, #568]	; (80066f0 <HAL_UART_RxCpltCallback+0x28c>)
 80064b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064ba:	4413      	add	r3, r2
 80064bc:	460a      	mov	r2, r1
 80064be:	701a      	strb	r2, [r3, #0]
			for (int i=0;i<uLength;i++)
 80064c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064c2:	3301      	adds	r3, #1
 80064c4:	677b      	str	r3, [r7, #116]	; 0x74
 80064c6:	4b88      	ldr	r3, [pc, #544]	; (80066e8 <HAL_UART_RxCpltCallback+0x284>)
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	461a      	mov	r2, r3
 80064cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064ce:	4293      	cmp	r3, r2
 80064d0:	dbed      	blt.n	80064ae <HAL_UART_RxCpltCallback+0x4a>
			}
			for (int i=uLength;i<1024;i++)
 80064d2:	4b85      	ldr	r3, [pc, #532]	; (80066e8 <HAL_UART_RxCpltCallback+0x284>)
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	673b      	str	r3, [r7, #112]	; 0x70
 80064d8:	e007      	b.n	80064ea <HAL_UART_RxCpltCallback+0x86>
			{
				outd[i]=0;
 80064da:	4a85      	ldr	r2, [pc, #532]	; (80066f0 <HAL_UART_RxCpltCallback+0x28c>)
 80064dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064de:	4413      	add	r3, r2
 80064e0:	2200      	movs	r2, #0
 80064e2:	701a      	strb	r2, [r3, #0]
			for (int i=uLength;i<1024;i++)
 80064e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064e6:	3301      	adds	r3, #1
 80064e8:	673b      	str	r3, [r7, #112]	; 0x70
 80064ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064f0:	dbf3      	blt.n	80064da <HAL_UART_RxCpltCallback+0x76>
			}
			outl = uLength;
 80064f2:	4b7d      	ldr	r3, [pc, #500]	; (80066e8 <HAL_UART_RxCpltCallback+0x284>)
 80064f4:	781a      	ldrb	r2, [r3, #0]
 80064f6:	4b7f      	ldr	r3, [pc, #508]	; (80066f4 <HAL_UART_RxCpltCallback+0x290>)
 80064f8:	701a      	strb	r2, [r3, #0]
			//uLength = 0;
			int q = outl / 13;
 80064fa:	4b7e      	ldr	r3, [pc, #504]	; (80066f4 <HAL_UART_RxCpltCallback+0x290>)
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	4a7e      	ldr	r2, [pc, #504]	; (80066f8 <HAL_UART_RxCpltCallback+0x294>)
 8006500:	fba2 2303 	umull	r2, r3, r2, r3
 8006504:	089b      	lsrs	r3, r3, #2
 8006506:	b2db      	uxtb	r3, r3
 8006508:	66fb      	str	r3, [r7, #108]	; 0x6c
				if(outl % 13 != 0)
 800650a:	4b7a      	ldr	r3, [pc, #488]	; (80066f4 <HAL_UART_RxCpltCallback+0x290>)
 800650c:	7819      	ldrb	r1, [r3, #0]
 800650e:	4b7a      	ldr	r3, [pc, #488]	; (80066f8 <HAL_UART_RxCpltCallback+0x294>)
 8006510:	fba3 2301 	umull	r2, r3, r3, r1
 8006514:	089a      	lsrs	r2, r3, #2
 8006516:	4613      	mov	r3, r2
 8006518:	005b      	lsls	r3, r3, #1
 800651a:	4413      	add	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	1acb      	subs	r3, r1, r3
 8006522:	b2db      	uxtb	r3, r3
 8006524:	2b00      	cmp	r3, #0
 8006526:	d002      	beq.n	800652e <HAL_UART_RxCpltCallback+0xca>
				{
					q = q + 1;
 8006528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800652a:	3301      	adds	r3, #1
 800652c:	66fb      	str	r3, [r7, #108]	; 0x6c
				}
				if(icnt+q<13)
 800652e:	4b73      	ldr	r3, [pc, #460]	; (80066fc <HAL_UART_RxCpltCallback+0x298>)
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006534:	4413      	add	r3, r2
 8006536:	2b0c      	cmp	r3, #12
 8006538:	f300 8128 	bgt.w	800678c <HAL_UART_RxCpltCallback+0x328>
				{
					if(q==1)
 800653c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800653e:	2b01      	cmp	r3, #1
 8006540:	d132      	bne.n	80065a8 <HAL_UART_RxCpltCallback+0x144>
					{
						for(int k=0;k<28-outl;k++)
 8006542:	2300      	movs	r3, #0
 8006544:	66bb      	str	r3, [r7, #104]	; 0x68
 8006546:	e00b      	b.n	8006560 <HAL_UART_RxCpltCallback+0xfc>
						{
							l[icnt][k]=' ';
 8006548:	4b6c      	ldr	r3, [pc, #432]	; (80066fc <HAL_UART_RxCpltCallback+0x298>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a6c      	ldr	r2, [pc, #432]	; (8006700 <HAL_UART_RxCpltCallback+0x29c>)
 800654e:	029b      	lsls	r3, r3, #10
 8006550:	441a      	add	r2, r3
 8006552:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006554:	4413      	add	r3, r2
 8006556:	2220      	movs	r2, #32
 8006558:	701a      	strb	r2, [r3, #0]
						for(int k=0;k<28-outl;k++)
 800655a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800655c:	3301      	adds	r3, #1
 800655e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006560:	4b64      	ldr	r3, [pc, #400]	; (80066f4 <HAL_UART_RxCpltCallback+0x290>)
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	f1c3 031c 	rsb	r3, r3, #28
 8006568:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800656a:	429a      	cmp	r2, r3
 800656c:	dbec      	blt.n	8006548 <HAL_UART_RxCpltCallback+0xe4>
						}
						for(int k=28-outl;k<28;k++)
 800656e:	4b61      	ldr	r3, [pc, #388]	; (80066f4 <HAL_UART_RxCpltCallback+0x290>)
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	f1c3 031c 	rsb	r3, r3, #28
 8006576:	667b      	str	r3, [r7, #100]	; 0x64
 8006578:	e012      	b.n	80065a0 <HAL_UART_RxCpltCallback+0x13c>
						{
							l[icnt][k]=(char) outd[k-28+outl];
 800657a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800657c:	3b1c      	subs	r3, #28
 800657e:	4a5d      	ldr	r2, [pc, #372]	; (80066f4 <HAL_UART_RxCpltCallback+0x290>)
 8006580:	7812      	ldrb	r2, [r2, #0]
 8006582:	441a      	add	r2, r3
 8006584:	4b5d      	ldr	r3, [pc, #372]	; (80066fc <HAL_UART_RxCpltCallback+0x298>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4959      	ldr	r1, [pc, #356]	; (80066f0 <HAL_UART_RxCpltCallback+0x28c>)
 800658a:	5c89      	ldrb	r1, [r1, r2]
 800658c:	4a5c      	ldr	r2, [pc, #368]	; (8006700 <HAL_UART_RxCpltCallback+0x29c>)
 800658e:	029b      	lsls	r3, r3, #10
 8006590:	441a      	add	r2, r3
 8006592:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006594:	4413      	add	r3, r2
 8006596:	460a      	mov	r2, r1
 8006598:	701a      	strb	r2, [r3, #0]
						for(int k=28-outl;k<28;k++)
 800659a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800659c:	3301      	adds	r3, #1
 800659e:	667b      	str	r3, [r7, #100]	; 0x64
 80065a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065a2:	2b1b      	cmp	r3, #27
 80065a4:	dde9      	ble.n	800657a <HAL_UART_RxCpltCallback+0x116>
 80065a6:	e0ea      	b.n	800677e <HAL_UART_RxCpltCallback+0x31a>
						}
					}
					else
					{
						for (int j=0;j<q;j++)
 80065a8:	2300      	movs	r3, #0
 80065aa:	663b      	str	r3, [r7, #96]	; 0x60
 80065ac:	e0e2      	b.n	8006774 <HAL_UART_RxCpltCallback+0x310>
						{
							l[icnt+j][0]=' ';
 80065ae:	4b53      	ldr	r3, [pc, #332]	; (80066fc <HAL_UART_RxCpltCallback+0x298>)
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065b4:	4413      	add	r3, r2
 80065b6:	4a52      	ldr	r2, [pc, #328]	; (8006700 <HAL_UART_RxCpltCallback+0x29c>)
 80065b8:	029b      	lsls	r3, r3, #10
 80065ba:	4413      	add	r3, r2
 80065bc:	2220      	movs	r2, #32
 80065be:	701a      	strb	r2, [r3, #0]
							l[icnt+j][1]=' ';
 80065c0:	4b4e      	ldr	r3, [pc, #312]	; (80066fc <HAL_UART_RxCpltCallback+0x298>)
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065c6:	4413      	add	r3, r2
 80065c8:	4a4d      	ldr	r2, [pc, #308]	; (8006700 <HAL_UART_RxCpltCallback+0x29c>)
 80065ca:	029b      	lsls	r3, r3, #10
 80065cc:	4413      	add	r3, r2
 80065ce:	3301      	adds	r3, #1
 80065d0:	2220      	movs	r2, #32
 80065d2:	701a      	strb	r2, [r3, #0]
							l[icnt+j][2]=' ';
 80065d4:	4b49      	ldr	r3, [pc, #292]	; (80066fc <HAL_UART_RxCpltCallback+0x298>)
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065da:	4413      	add	r3, r2
 80065dc:	4a48      	ldr	r2, [pc, #288]	; (8006700 <HAL_UART_RxCpltCallback+0x29c>)
 80065de:	029b      	lsls	r3, r3, #10
 80065e0:	4413      	add	r3, r2
 80065e2:	3302      	adds	r3, #2
 80065e4:	2220      	movs	r2, #32
 80065e6:	701a      	strb	r2, [r3, #0]
							l[icnt+j][3]=' ';
 80065e8:	4b44      	ldr	r3, [pc, #272]	; (80066fc <HAL_UART_RxCpltCallback+0x298>)
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065ee:	4413      	add	r3, r2
 80065f0:	4a43      	ldr	r2, [pc, #268]	; (8006700 <HAL_UART_RxCpltCallback+0x29c>)
 80065f2:	029b      	lsls	r3, r3, #10
 80065f4:	4413      	add	r3, r2
 80065f6:	3303      	adds	r3, #3
 80065f8:	2220      	movs	r2, #32
 80065fa:	701a      	strb	r2, [r3, #0]
							l[icnt+j][4]=' ';
 80065fc:	4b3f      	ldr	r3, [pc, #252]	; (80066fc <HAL_UART_RxCpltCallback+0x298>)
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006602:	4413      	add	r3, r2
 8006604:	4a3e      	ldr	r2, [pc, #248]	; (8006700 <HAL_UART_RxCpltCallback+0x29c>)
 8006606:	029b      	lsls	r3, r3, #10
 8006608:	4413      	add	r3, r2
 800660a:	3304      	adds	r3, #4
 800660c:	2220      	movs	r2, #32
 800660e:	701a      	strb	r2, [r3, #0]
							l[icnt+j][5]=' ';
 8006610:	4b3a      	ldr	r3, [pc, #232]	; (80066fc <HAL_UART_RxCpltCallback+0x298>)
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006616:	4413      	add	r3, r2
 8006618:	4a39      	ldr	r2, [pc, #228]	; (8006700 <HAL_UART_RxCpltCallback+0x29c>)
 800661a:	029b      	lsls	r3, r3, #10
 800661c:	4413      	add	r3, r2
 800661e:	3305      	adds	r3, #5
 8006620:	2220      	movs	r2, #32
 8006622:	701a      	strb	r2, [r3, #0]
							l[icnt+j][6]=' ';
 8006624:	4b35      	ldr	r3, [pc, #212]	; (80066fc <HAL_UART_RxCpltCallback+0x298>)
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800662a:	4413      	add	r3, r2
 800662c:	4a34      	ldr	r2, [pc, #208]	; (8006700 <HAL_UART_RxCpltCallback+0x29c>)
 800662e:	029b      	lsls	r3, r3, #10
 8006630:	4413      	add	r3, r2
 8006632:	3306      	adds	r3, #6
 8006634:	2220      	movs	r2, #32
 8006636:	701a      	strb	r2, [r3, #0]
							l[icnt+j][7]=' ';
 8006638:	4b30      	ldr	r3, [pc, #192]	; (80066fc <HAL_UART_RxCpltCallback+0x298>)
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800663e:	4413      	add	r3, r2
 8006640:	4a2f      	ldr	r2, [pc, #188]	; (8006700 <HAL_UART_RxCpltCallback+0x29c>)
 8006642:	029b      	lsls	r3, r3, #10
 8006644:	4413      	add	r3, r2
 8006646:	3307      	adds	r3, #7
 8006648:	2220      	movs	r2, #32
 800664a:	701a      	strb	r2, [r3, #0]
							l[icnt+j][8]=' ';
 800664c:	4b2b      	ldr	r3, [pc, #172]	; (80066fc <HAL_UART_RxCpltCallback+0x298>)
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006652:	4413      	add	r3, r2
 8006654:	4a2a      	ldr	r2, [pc, #168]	; (8006700 <HAL_UART_RxCpltCallback+0x29c>)
 8006656:	029b      	lsls	r3, r3, #10
 8006658:	4413      	add	r3, r2
 800665a:	3308      	adds	r3, #8
 800665c:	2220      	movs	r2, #32
 800665e:	701a      	strb	r2, [r3, #0]
							l[icnt+j][9]=' ';
 8006660:	4b26      	ldr	r3, [pc, #152]	; (80066fc <HAL_UART_RxCpltCallback+0x298>)
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006666:	4413      	add	r3, r2
 8006668:	4a25      	ldr	r2, [pc, #148]	; (8006700 <HAL_UART_RxCpltCallback+0x29c>)
 800666a:	029b      	lsls	r3, r3, #10
 800666c:	4413      	add	r3, r2
 800666e:	3309      	adds	r3, #9
 8006670:	2220      	movs	r2, #32
 8006672:	701a      	strb	r2, [r3, #0]
							l[icnt+j][10]=' ';
 8006674:	4b21      	ldr	r3, [pc, #132]	; (80066fc <HAL_UART_RxCpltCallback+0x298>)
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800667a:	4413      	add	r3, r2
 800667c:	4a20      	ldr	r2, [pc, #128]	; (8006700 <HAL_UART_RxCpltCallback+0x29c>)
 800667e:	029b      	lsls	r3, r3, #10
 8006680:	4413      	add	r3, r2
 8006682:	330a      	adds	r3, #10
 8006684:	2220      	movs	r2, #32
 8006686:	701a      	strb	r2, [r3, #0]
							l[icnt+j][11]=' ';
 8006688:	4b1c      	ldr	r3, [pc, #112]	; (80066fc <HAL_UART_RxCpltCallback+0x298>)
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800668e:	4413      	add	r3, r2
 8006690:	4a1b      	ldr	r2, [pc, #108]	; (8006700 <HAL_UART_RxCpltCallback+0x29c>)
 8006692:	029b      	lsls	r3, r3, #10
 8006694:	4413      	add	r3, r2
 8006696:	330b      	adds	r3, #11
 8006698:	2220      	movs	r2, #32
 800669a:	701a      	strb	r2, [r3, #0]
							l[icnt+j][12]=' ';
 800669c:	4b17      	ldr	r3, [pc, #92]	; (80066fc <HAL_UART_RxCpltCallback+0x298>)
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066a2:	4413      	add	r3, r2
 80066a4:	4a16      	ldr	r2, [pc, #88]	; (8006700 <HAL_UART_RxCpltCallback+0x29c>)
 80066a6:	029b      	lsls	r3, r3, #10
 80066a8:	4413      	add	r3, r2
 80066aa:	330c      	adds	r3, #12
 80066ac:	2220      	movs	r2, #32
 80066ae:	701a      	strb	r2, [r3, #0]
							l[icnt+j][13]=' ';
 80066b0:	4b12      	ldr	r3, [pc, #72]	; (80066fc <HAL_UART_RxCpltCallback+0x298>)
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066b6:	4413      	add	r3, r2
 80066b8:	4a11      	ldr	r2, [pc, #68]	; (8006700 <HAL_UART_RxCpltCallback+0x29c>)
 80066ba:	029b      	lsls	r3, r3, #10
 80066bc:	4413      	add	r3, r2
 80066be:	330d      	adds	r3, #13
 80066c0:	2220      	movs	r2, #32
 80066c2:	701a      	strb	r2, [r3, #0]
							l[icnt+j][14]=' ';
 80066c4:	4b0d      	ldr	r3, [pc, #52]	; (80066fc <HAL_UART_RxCpltCallback+0x298>)
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066ca:	4413      	add	r3, r2
 80066cc:	4a0c      	ldr	r2, [pc, #48]	; (8006700 <HAL_UART_RxCpltCallback+0x29c>)
 80066ce:	029b      	lsls	r3, r3, #10
 80066d0:	4413      	add	r3, r2
 80066d2:	330e      	adds	r3, #14
 80066d4:	2220      	movs	r2, #32
 80066d6:	701a      	strb	r2, [r3, #0]

							for (int k=0;k<13;k++)
 80066d8:	2300      	movs	r3, #0
 80066da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066dc:	e044      	b.n	8006768 <HAL_UART_RxCpltCallback+0x304>
 80066de:	bf00      	nop
 80066e0:	40013800 	.word	0x40013800
 80066e4:	20004a74 	.word	0x20004a74
 80066e8:	20005274 	.word	0x20005274
 80066ec:	20005278 	.word	0x20005278
 80066f0:	20003e6c 	.word	0x20003e6c
 80066f4:	20005b28 	.word	0x20005b28
 80066f8:	4ec4ec4f 	.word	0x4ec4ec4f
 80066fc:	2000466c 	.word	0x2000466c
 8006700:	20000e6c 	.word	0x20000e6c
							{
								if(j*13+k<outl)
 8006704:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006706:	4613      	mov	r3, r2
 8006708:	005b      	lsls	r3, r3, #1
 800670a:	4413      	add	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	441a      	add	r2, r3
 8006710:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006712:	4413      	add	r3, r2
 8006714:	4aa4      	ldr	r2, [pc, #656]	; (80069a8 <HAL_UART_RxCpltCallback+0x544>)
 8006716:	7812      	ldrb	r2, [r2, #0]
 8006718:	4293      	cmp	r3, r2
 800671a:	da16      	bge.n	800674a <HAL_UART_RxCpltCallback+0x2e6>
								{
									l[icnt+j][k+15]=(char) outd[j*13+k];
 800671c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800671e:	4613      	mov	r3, r2
 8006720:	005b      	lsls	r3, r3, #1
 8006722:	4413      	add	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	441a      	add	r2, r3
 8006728:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800672a:	18d1      	adds	r1, r2, r3
 800672c:	4b9f      	ldr	r3, [pc, #636]	; (80069ac <HAL_UART_RxCpltCallback+0x548>)
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006732:	441a      	add	r2, r3
 8006734:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006736:	330f      	adds	r3, #15
 8006738:	489d      	ldr	r0, [pc, #628]	; (80069b0 <HAL_UART_RxCpltCallback+0x54c>)
 800673a:	5c40      	ldrb	r0, [r0, r1]
 800673c:	499d      	ldr	r1, [pc, #628]	; (80069b4 <HAL_UART_RxCpltCallback+0x550>)
 800673e:	0292      	lsls	r2, r2, #10
 8006740:	440a      	add	r2, r1
 8006742:	4413      	add	r3, r2
 8006744:	4602      	mov	r2, r0
 8006746:	701a      	strb	r2, [r3, #0]
 8006748:	e00b      	b.n	8006762 <HAL_UART_RxCpltCallback+0x2fe>
								}
								else
								{
									l[icnt+j][k+15]=' ';
 800674a:	4b98      	ldr	r3, [pc, #608]	; (80069ac <HAL_UART_RxCpltCallback+0x548>)
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006750:	441a      	add	r2, r3
 8006752:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006754:	330f      	adds	r3, #15
 8006756:	4997      	ldr	r1, [pc, #604]	; (80069b4 <HAL_UART_RxCpltCallback+0x550>)
 8006758:	0292      	lsls	r2, r2, #10
 800675a:	440a      	add	r2, r1
 800675c:	4413      	add	r3, r2
 800675e:	2220      	movs	r2, #32
 8006760:	701a      	strb	r2, [r3, #0]
							for (int k=0;k<13;k++)
 8006762:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006764:	3301      	adds	r3, #1
 8006766:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006768:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800676a:	2b0c      	cmp	r3, #12
 800676c:	ddca      	ble.n	8006704 <HAL_UART_RxCpltCallback+0x2a0>
						for (int j=0;j<q;j++)
 800676e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006770:	3301      	adds	r3, #1
 8006772:	663b      	str	r3, [r7, #96]	; 0x60
 8006774:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006778:	429a      	cmp	r2, r3
 800677a:	f6ff af18 	blt.w	80065ae <HAL_UART_RxCpltCallback+0x14a>
								}
							}
						}
					}
					icnt+=q;
 800677e:	4b8b      	ldr	r3, [pc, #556]	; (80069ac <HAL_UART_RxCpltCallback+0x548>)
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006784:	4413      	add	r3, r2
 8006786:	4a89      	ldr	r2, [pc, #548]	; (80069ac <HAL_UART_RxCpltCallback+0x548>)
 8006788:	6013      	str	r3, [r2, #0]
 800678a:	e157      	b.n	8006a3c <HAL_UART_RxCpltCallback+0x5d8>
				}
				else
				{
					int re=icnt+q-12;
 800678c:	4b87      	ldr	r3, [pc, #540]	; (80069ac <HAL_UART_RxCpltCallback+0x548>)
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006792:	4413      	add	r3, r2
 8006794:	3b0c      	subs	r3, #12
 8006796:	613b      	str	r3, [r7, #16]
					for(int j=0;j<12-re;j++)
 8006798:	2300      	movs	r3, #0
 800679a:	65bb      	str	r3, [r7, #88]	; 0x58
 800679c:	e01c      	b.n	80067d8 <HAL_UART_RxCpltCallback+0x374>
					{
						for(int k=0;k<28;k++)
 800679e:	2300      	movs	r3, #0
 80067a0:	657b      	str	r3, [r7, #84]	; 0x54
 80067a2:	e013      	b.n	80067cc <HAL_UART_RxCpltCallback+0x368>
						{
							l[j][k]=l[j+re][k];
 80067a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	4413      	add	r3, r2
 80067aa:	4a82      	ldr	r2, [pc, #520]	; (80069b4 <HAL_UART_RxCpltCallback+0x550>)
 80067ac:	029b      	lsls	r3, r3, #10
 80067ae:	441a      	add	r2, r3
 80067b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067b2:	4413      	add	r3, r2
 80067b4:	7819      	ldrb	r1, [r3, #0]
 80067b6:	4a7f      	ldr	r2, [pc, #508]	; (80069b4 <HAL_UART_RxCpltCallback+0x550>)
 80067b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067ba:	029b      	lsls	r3, r3, #10
 80067bc:	441a      	add	r2, r3
 80067be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067c0:	4413      	add	r3, r2
 80067c2:	460a      	mov	r2, r1
 80067c4:	701a      	strb	r2, [r3, #0]
						for(int k=0;k<28;k++)
 80067c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067c8:	3301      	adds	r3, #1
 80067ca:	657b      	str	r3, [r7, #84]	; 0x54
 80067cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067ce:	2b1b      	cmp	r3, #27
 80067d0:	dde8      	ble.n	80067a4 <HAL_UART_RxCpltCallback+0x340>
					for(int j=0;j<12-re;j++)
 80067d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067d4:	3301      	adds	r3, #1
 80067d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	f1c3 030c 	rsb	r3, r3, #12
 80067de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067e0:	429a      	cmp	r2, r3
 80067e2:	dbdc      	blt.n	800679e <HAL_UART_RxCpltCallback+0x33a>
						}
					}
					if(q==1)
 80067e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d134      	bne.n	8006854 <HAL_UART_RxCpltCallback+0x3f0>
					{
						for(int k=0;k<28-outl;k++)
 80067ea:	2300      	movs	r3, #0
 80067ec:	653b      	str	r3, [r7, #80]	; 0x50
 80067ee:	e00c      	b.n	800680a <HAL_UART_RxCpltCallback+0x3a6>
						{
							l[12-q][k]=' ';
 80067f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067f2:	f1c3 030c 	rsb	r3, r3, #12
 80067f6:	4a6f      	ldr	r2, [pc, #444]	; (80069b4 <HAL_UART_RxCpltCallback+0x550>)
 80067f8:	029b      	lsls	r3, r3, #10
 80067fa:	441a      	add	r2, r3
 80067fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067fe:	4413      	add	r3, r2
 8006800:	2220      	movs	r2, #32
 8006802:	701a      	strb	r2, [r3, #0]
						for(int k=0;k<28-outl;k++)
 8006804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006806:	3301      	adds	r3, #1
 8006808:	653b      	str	r3, [r7, #80]	; 0x50
 800680a:	4b67      	ldr	r3, [pc, #412]	; (80069a8 <HAL_UART_RxCpltCallback+0x544>)
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	f1c3 031c 	rsb	r3, r3, #28
 8006812:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006814:	429a      	cmp	r2, r3
 8006816:	dbeb      	blt.n	80067f0 <HAL_UART_RxCpltCallback+0x38c>
						}
						for(int k=28-outl;k<28;k++)
 8006818:	4b63      	ldr	r3, [pc, #396]	; (80069a8 <HAL_UART_RxCpltCallback+0x544>)
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	f1c3 031c 	rsb	r3, r3, #28
 8006820:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006822:	e013      	b.n	800684c <HAL_UART_RxCpltCallback+0x3e8>
						{
							l[12-q][k]=(char) outd[k-28+outl];
 8006824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006826:	3b1c      	subs	r3, #28
 8006828:	4a5f      	ldr	r2, [pc, #380]	; (80069a8 <HAL_UART_RxCpltCallback+0x544>)
 800682a:	7812      	ldrb	r2, [r2, #0]
 800682c:	441a      	add	r2, r3
 800682e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006830:	f1c3 030c 	rsb	r3, r3, #12
 8006834:	495e      	ldr	r1, [pc, #376]	; (80069b0 <HAL_UART_RxCpltCallback+0x54c>)
 8006836:	5c89      	ldrb	r1, [r1, r2]
 8006838:	4a5e      	ldr	r2, [pc, #376]	; (80069b4 <HAL_UART_RxCpltCallback+0x550>)
 800683a:	029b      	lsls	r3, r3, #10
 800683c:	441a      	add	r2, r3
 800683e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006840:	4413      	add	r3, r2
 8006842:	460a      	mov	r2, r1
 8006844:	701a      	strb	r2, [r3, #0]
						for(int k=28-outl;k<28;k++)
 8006846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006848:	3301      	adds	r3, #1
 800684a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800684c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800684e:	2b1b      	cmp	r3, #27
 8006850:	dde8      	ble.n	8006824 <HAL_UART_RxCpltCallback+0x3c0>
 8006852:	e0f0      	b.n	8006a36 <HAL_UART_RxCpltCallback+0x5d2>
						//HAL_UART_Transmit(&huart1, outd2, strlen(outd2), 0xffff);
					}
					else
					{

						for(int j=0;j<q;j++)
 8006854:	2300      	movs	r3, #0
 8006856:	64bb      	str	r3, [r7, #72]	; 0x48
 8006858:	e0e8      	b.n	8006a2c <HAL_UART_RxCpltCallback+0x5c8>
						{
							l[j+12-q][0]=' ';
 800685a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800685c:	f103 020c 	add.w	r2, r3, #12
 8006860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	4a53      	ldr	r2, [pc, #332]	; (80069b4 <HAL_UART_RxCpltCallback+0x550>)
 8006866:	029b      	lsls	r3, r3, #10
 8006868:	4413      	add	r3, r2
 800686a:	2220      	movs	r2, #32
 800686c:	701a      	strb	r2, [r3, #0]
							l[j+12-q][1]=' ';
 800686e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006870:	f103 020c 	add.w	r2, r3, #12
 8006874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	4a4e      	ldr	r2, [pc, #312]	; (80069b4 <HAL_UART_RxCpltCallback+0x550>)
 800687a:	029b      	lsls	r3, r3, #10
 800687c:	4413      	add	r3, r2
 800687e:	3301      	adds	r3, #1
 8006880:	2220      	movs	r2, #32
 8006882:	701a      	strb	r2, [r3, #0]
							l[j+12-q][2]=' ';
 8006884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006886:	f103 020c 	add.w	r2, r3, #12
 800688a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	4a49      	ldr	r2, [pc, #292]	; (80069b4 <HAL_UART_RxCpltCallback+0x550>)
 8006890:	029b      	lsls	r3, r3, #10
 8006892:	4413      	add	r3, r2
 8006894:	3302      	adds	r3, #2
 8006896:	2220      	movs	r2, #32
 8006898:	701a      	strb	r2, [r3, #0]
							l[j+12-q][3]=' ';
 800689a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800689c:	f103 020c 	add.w	r2, r3, #12
 80068a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	4a43      	ldr	r2, [pc, #268]	; (80069b4 <HAL_UART_RxCpltCallback+0x550>)
 80068a6:	029b      	lsls	r3, r3, #10
 80068a8:	4413      	add	r3, r2
 80068aa:	3303      	adds	r3, #3
 80068ac:	2220      	movs	r2, #32
 80068ae:	701a      	strb	r2, [r3, #0]
							l[j+12-q][4]=' ';
 80068b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068b2:	f103 020c 	add.w	r2, r3, #12
 80068b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	4a3e      	ldr	r2, [pc, #248]	; (80069b4 <HAL_UART_RxCpltCallback+0x550>)
 80068bc:	029b      	lsls	r3, r3, #10
 80068be:	4413      	add	r3, r2
 80068c0:	3304      	adds	r3, #4
 80068c2:	2220      	movs	r2, #32
 80068c4:	701a      	strb	r2, [r3, #0]
							l[j+12-q][5]=' ';
 80068c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068c8:	f103 020c 	add.w	r2, r3, #12
 80068cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	4a38      	ldr	r2, [pc, #224]	; (80069b4 <HAL_UART_RxCpltCallback+0x550>)
 80068d2:	029b      	lsls	r3, r3, #10
 80068d4:	4413      	add	r3, r2
 80068d6:	3305      	adds	r3, #5
 80068d8:	2220      	movs	r2, #32
 80068da:	701a      	strb	r2, [r3, #0]
							l[j+12-q][6]=' ';
 80068dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068de:	f103 020c 	add.w	r2, r3, #12
 80068e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	4a33      	ldr	r2, [pc, #204]	; (80069b4 <HAL_UART_RxCpltCallback+0x550>)
 80068e8:	029b      	lsls	r3, r3, #10
 80068ea:	4413      	add	r3, r2
 80068ec:	3306      	adds	r3, #6
 80068ee:	2220      	movs	r2, #32
 80068f0:	701a      	strb	r2, [r3, #0]
							l[j+12-q][7]=' ';
 80068f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068f4:	f103 020c 	add.w	r2, r3, #12
 80068f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	4a2d      	ldr	r2, [pc, #180]	; (80069b4 <HAL_UART_RxCpltCallback+0x550>)
 80068fe:	029b      	lsls	r3, r3, #10
 8006900:	4413      	add	r3, r2
 8006902:	3307      	adds	r3, #7
 8006904:	2220      	movs	r2, #32
 8006906:	701a      	strb	r2, [r3, #0]
							l[j+12-q][8]=' ';
 8006908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800690a:	f103 020c 	add.w	r2, r3, #12
 800690e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	4a28      	ldr	r2, [pc, #160]	; (80069b4 <HAL_UART_RxCpltCallback+0x550>)
 8006914:	029b      	lsls	r3, r3, #10
 8006916:	4413      	add	r3, r2
 8006918:	3308      	adds	r3, #8
 800691a:	2220      	movs	r2, #32
 800691c:	701a      	strb	r2, [r3, #0]
							l[j+12-q][9]=' ';
 800691e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006920:	f103 020c 	add.w	r2, r3, #12
 8006924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	4a22      	ldr	r2, [pc, #136]	; (80069b4 <HAL_UART_RxCpltCallback+0x550>)
 800692a:	029b      	lsls	r3, r3, #10
 800692c:	4413      	add	r3, r2
 800692e:	3309      	adds	r3, #9
 8006930:	2220      	movs	r2, #32
 8006932:	701a      	strb	r2, [r3, #0]
							l[j+12-q][10]=' ';
 8006934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006936:	f103 020c 	add.w	r2, r3, #12
 800693a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	4a1d      	ldr	r2, [pc, #116]	; (80069b4 <HAL_UART_RxCpltCallback+0x550>)
 8006940:	029b      	lsls	r3, r3, #10
 8006942:	4413      	add	r3, r2
 8006944:	330a      	adds	r3, #10
 8006946:	2220      	movs	r2, #32
 8006948:	701a      	strb	r2, [r3, #0]
							l[j+12-q][11]=' ';
 800694a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800694c:	f103 020c 	add.w	r2, r3, #12
 8006950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	4a17      	ldr	r2, [pc, #92]	; (80069b4 <HAL_UART_RxCpltCallback+0x550>)
 8006956:	029b      	lsls	r3, r3, #10
 8006958:	4413      	add	r3, r2
 800695a:	330b      	adds	r3, #11
 800695c:	2220      	movs	r2, #32
 800695e:	701a      	strb	r2, [r3, #0]
							l[j+12-q][12]=' ';
 8006960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006962:	f103 020c 	add.w	r2, r3, #12
 8006966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	4a12      	ldr	r2, [pc, #72]	; (80069b4 <HAL_UART_RxCpltCallback+0x550>)
 800696c:	029b      	lsls	r3, r3, #10
 800696e:	4413      	add	r3, r2
 8006970:	330c      	adds	r3, #12
 8006972:	2220      	movs	r2, #32
 8006974:	701a      	strb	r2, [r3, #0]
							l[j+12-q][13]=' ';
 8006976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006978:	f103 020c 	add.w	r2, r3, #12
 800697c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	4a0c      	ldr	r2, [pc, #48]	; (80069b4 <HAL_UART_RxCpltCallback+0x550>)
 8006982:	029b      	lsls	r3, r3, #10
 8006984:	4413      	add	r3, r2
 8006986:	330d      	adds	r3, #13
 8006988:	2220      	movs	r2, #32
 800698a:	701a      	strb	r2, [r3, #0]
							l[j+12-q][14]=' ';
 800698c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800698e:	f103 020c 	add.w	r2, r3, #12
 8006992:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	4a07      	ldr	r2, [pc, #28]	; (80069b4 <HAL_UART_RxCpltCallback+0x550>)
 8006998:	029b      	lsls	r3, r3, #10
 800699a:	4413      	add	r3, r2
 800699c:	330e      	adds	r3, #14
 800699e:	2220      	movs	r2, #32
 80069a0:	701a      	strb	r2, [r3, #0]
							 for(int k=0;k<13;k++)
 80069a2:	2300      	movs	r3, #0
 80069a4:	647b      	str	r3, [r7, #68]	; 0x44
 80069a6:	e03b      	b.n	8006a20 <HAL_UART_RxCpltCallback+0x5bc>
 80069a8:	20005b28 	.word	0x20005b28
 80069ac:	2000466c 	.word	0x2000466c
 80069b0:	20003e6c 	.word	0x20003e6c
 80069b4:	20000e6c 	.word	0x20000e6c
							 {
								 if(j*13+k<outl)
 80069b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069ba:	4613      	mov	r3, r2
 80069bc:	005b      	lsls	r3, r3, #1
 80069be:	4413      	add	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	441a      	add	r2, r3
 80069c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069c6:	4413      	add	r3, r2
 80069c8:	4aa2      	ldr	r2, [pc, #648]	; (8006c54 <HAL_UART_RxCpltCallback+0x7f0>)
 80069ca:	7812      	ldrb	r2, [r2, #0]
 80069cc:	4293      	cmp	r3, r2
 80069ce:	da17      	bge.n	8006a00 <HAL_UART_RxCpltCallback+0x59c>
								 {
									 l[j+12-q][k+15]=outd[j*13+k];
 80069d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069d2:	4613      	mov	r3, r2
 80069d4:	005b      	lsls	r3, r3, #1
 80069d6:	4413      	add	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	441a      	add	r2, r3
 80069dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069de:	18d1      	adds	r1, r2, r3
 80069e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069e2:	f103 020c 	add.w	r2, r3, #12
 80069e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069e8:	1ad2      	subs	r2, r2, r3
 80069ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069ec:	330f      	adds	r3, #15
 80069ee:	489a      	ldr	r0, [pc, #616]	; (8006c58 <HAL_UART_RxCpltCallback+0x7f4>)
 80069f0:	5c40      	ldrb	r0, [r0, r1]
 80069f2:	499a      	ldr	r1, [pc, #616]	; (8006c5c <HAL_UART_RxCpltCallback+0x7f8>)
 80069f4:	0292      	lsls	r2, r2, #10
 80069f6:	440a      	add	r2, r1
 80069f8:	4413      	add	r3, r2
 80069fa:	4602      	mov	r2, r0
 80069fc:	701a      	strb	r2, [r3, #0]
 80069fe:	e00c      	b.n	8006a1a <HAL_UART_RxCpltCallback+0x5b6>
								 }
								 else
								 {
									 l[j+12-q][k+15]=' ';
 8006a00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a02:	f103 020c 	add.w	r2, r3, #12
 8006a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a08:	1ad2      	subs	r2, r2, r3
 8006a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a0c:	330f      	adds	r3, #15
 8006a0e:	4993      	ldr	r1, [pc, #588]	; (8006c5c <HAL_UART_RxCpltCallback+0x7f8>)
 8006a10:	0292      	lsls	r2, r2, #10
 8006a12:	440a      	add	r2, r1
 8006a14:	4413      	add	r3, r2
 8006a16:	2220      	movs	r2, #32
 8006a18:	701a      	strb	r2, [r3, #0]
							 for(int k=0;k<13;k++)
 8006a1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	647b      	str	r3, [r7, #68]	; 0x44
 8006a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a22:	2b0c      	cmp	r3, #12
 8006a24:	ddc8      	ble.n	80069b8 <HAL_UART_RxCpltCallback+0x554>
						for(int j=0;j<q;j++)
 8006a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a28:	3301      	adds	r3, #1
 8006a2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a30:	429a      	cmp	r2, r3
 8006a32:	f6ff af12 	blt.w	800685a <HAL_UART_RxCpltCallback+0x3f6>
								 }
							 }
						}
					}
					icnt=12;
 8006a36:	4b8a      	ldr	r3, [pc, #552]	; (8006c60 <HAL_UART_RxCpltCallback+0x7fc>)
 8006a38:	220c      	movs	r2, #12
 8006a3a:	601a      	str	r2, [r3, #0]
				}
				snum[snumLength]=q;
 8006a3c:	4b89      	ldr	r3, [pc, #548]	; (8006c64 <HAL_UART_RxCpltCallback+0x800>)
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	461a      	mov	r2, r3
 8006a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a44:	b2d9      	uxtb	r1, r3
 8006a46:	4b88      	ldr	r3, [pc, #544]	; (8006c68 <HAL_UART_RxCpltCallback+0x804>)
 8006a48:	5499      	strb	r1, [r3, r2]
				snumLength++;
 8006a4a:	4b86      	ldr	r3, [pc, #536]	; (8006c64 <HAL_UART_RxCpltCallback+0x800>)
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	3301      	adds	r3, #1
 8006a50:	b2da      	uxtb	r2, r3
 8006a52:	4b84      	ldr	r3, [pc, #528]	; (8006c64 <HAL_UART_RxCpltCallback+0x800>)
 8006a54:	701a      	strb	r2, [r3, #0]
			// 电脑
//			HAL_UART_Transmit(&huart1, uRx_Data, uLength, 0xffff);
			// 蓝牙
			HAL_UART_Transmit(&huart2, uRx_Data, uLength + 3, 0xffff);
 8006a56:	4b85      	ldr	r3, [pc, #532]	; (8006c6c <HAL_UART_RxCpltCallback+0x808>)
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	3303      	adds	r3, #3
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a64:	4982      	ldr	r1, [pc, #520]	; (8006c70 <HAL_UART_RxCpltCallback+0x80c>)
 8006a66:	4883      	ldr	r0, [pc, #524]	; (8006c74 <HAL_UART_RxCpltCallback+0x810>)
 8006a68:	f002 fd41 	bl	80094ee <HAL_UART_Transmit>
			uLength=0;
 8006a6c:	4b7f      	ldr	r3, [pc, #508]	; (8006c6c <HAL_UART_RxCpltCallback+0x808>)
 8006a6e:	2200      	movs	r2, #0
 8006a70:	701a      	strb	r2, [r3, #0]
 8006a72:	e00c      	b.n	8006a8e <HAL_UART_RxCpltCallback+0x62a>

			//re=0;
		}
		else
		{
			uRx_Data[uLength] = rcv_buffer_user[0];
 8006a74:	4b7d      	ldr	r3, [pc, #500]	; (8006c6c <HAL_UART_RxCpltCallback+0x808>)
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	461a      	mov	r2, r3
 8006a7a:	4b7f      	ldr	r3, [pc, #508]	; (8006c78 <HAL_UART_RxCpltCallback+0x814>)
 8006a7c:	7819      	ldrb	r1, [r3, #0]
 8006a7e:	4b7c      	ldr	r3, [pc, #496]	; (8006c70 <HAL_UART_RxCpltCallback+0x80c>)
 8006a80:	5499      	strb	r1, [r3, r2]
			uLength++;
 8006a82:	4b7a      	ldr	r3, [pc, #488]	; (8006c6c <HAL_UART_RxCpltCallback+0x808>)
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	3301      	adds	r3, #1
 8006a88:	b2da      	uxtb	r2, r3
 8006a8a:	4b78      	ldr	r3, [pc, #480]	; (8006c6c <HAL_UART_RxCpltCallback+0x808>)
 8006a8c:	701a      	strb	r2, [r3, #0]
		}
	}
	// 2 蓝牙
	if(huart->Instance==USART2)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a7a      	ldr	r2, [pc, #488]	; (8006c7c <HAL_UART_RxCpltCallback+0x818>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	f040 8197 	bne.w	8006dc8 <HAL_UART_RxCpltCallback+0x964>
		static unsigned char uLength2 = 0;
		/*if(re==0){
		write_to_array_right();
		re=1;
		}*/
		if(rcv_buffer_bluetooth[0] == '\r')
 8006a9a:	4b79      	ldr	r3, [pc, #484]	; (8006c80 <HAL_UART_RxCpltCallback+0x81c>)
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	2b0d      	cmp	r3, #13
 8006aa0:	f040 8185 	bne.w	8006dae <HAL_UART_RxCpltCallback+0x94a>
		{
			uRx_Data2[uLength2] = rcv_buffer_bluetooth[0];
 8006aa4:	4b77      	ldr	r3, [pc, #476]	; (8006c84 <HAL_UART_RxCpltCallback+0x820>)
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	4b75      	ldr	r3, [pc, #468]	; (8006c80 <HAL_UART_RxCpltCallback+0x81c>)
 8006aac:	7819      	ldrb	r1, [r3, #0]
 8006aae:	4b76      	ldr	r3, [pc, #472]	; (8006c88 <HAL_UART_RxCpltCallback+0x824>)
 8006ab0:	5499      	strb	r1, [r3, r2]
			// 电脑
			if(strlen(uRx_Data2[0])==0){
 8006ab2:	4b75      	ldr	r3, [pc, #468]	; (8006c88 <HAL_UART_RxCpltCallback+0x824>)
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d11a      	bne.n	8006af2 <HAL_UART_RxCpltCallback+0x68e>
				for (int i=0;i<uLength2;i++){
 8006abc:	2300      	movs	r3, #0
 8006abe:	643b      	str	r3, [r7, #64]	; 0x40
 8006ac0:	e00b      	b.n	8006ada <HAL_UART_RxCpltCallback+0x676>
					uRx_Data2[i]=uRx_Data2[i+1];
 8006ac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	4a70      	ldr	r2, [pc, #448]	; (8006c88 <HAL_UART_RxCpltCallback+0x824>)
 8006ac8:	5cd1      	ldrb	r1, [r2, r3]
 8006aca:	4a6f      	ldr	r2, [pc, #444]	; (8006c88 <HAL_UART_RxCpltCallback+0x824>)
 8006acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ace:	4413      	add	r3, r2
 8006ad0:	460a      	mov	r2, r1
 8006ad2:	701a      	strb	r2, [r3, #0]
				for (int i=0;i<uLength2;i++){
 8006ad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	643b      	str	r3, [r7, #64]	; 0x40
 8006ada:	4b6a      	ldr	r3, [pc, #424]	; (8006c84 <HAL_UART_RxCpltCallback+0x820>)
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	461a      	mov	r2, r3
 8006ae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	dbed      	blt.n	8006ac2 <HAL_UART_RxCpltCallback+0x65e>
				}
				uLength2--;
 8006ae6:	4b67      	ldr	r3, [pc, #412]	; (8006c84 <HAL_UART_RxCpltCallback+0x820>)
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	3b01      	subs	r3, #1
 8006aec:	b2da      	uxtb	r2, r3
 8006aee:	4b65      	ldr	r3, [pc, #404]	; (8006c84 <HAL_UART_RxCpltCallback+0x820>)
 8006af0:	701a      	strb	r2, [r3, #0]
			}


			for (int i=0;i<uLength2;i++)
 8006af2:	2300      	movs	r3, #0
 8006af4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006af6:	e00b      	b.n	8006b10 <HAL_UART_RxCpltCallback+0x6ac>
			{
				outd2[i] = uRx_Data2[i];
 8006af8:	4a63      	ldr	r2, [pc, #396]	; (8006c88 <HAL_UART_RxCpltCallback+0x824>)
 8006afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006afc:	4413      	add	r3, r2
 8006afe:	7819      	ldrb	r1, [r3, #0]
 8006b00:	4a62      	ldr	r2, [pc, #392]	; (8006c8c <HAL_UART_RxCpltCallback+0x828>)
 8006b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b04:	4413      	add	r3, r2
 8006b06:	460a      	mov	r2, r1
 8006b08:	701a      	strb	r2, [r3, #0]
			for (int i=0;i<uLength2;i++)
 8006b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b10:	4b5c      	ldr	r3, [pc, #368]	; (8006c84 <HAL_UART_RxCpltCallback+0x820>)
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	461a      	mov	r2, r3
 8006b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	dbed      	blt.n	8006af8 <HAL_UART_RxCpltCallback+0x694>
			}
			for (int i=uLength2;i<1024;i++)
 8006b1c:	4b59      	ldr	r3, [pc, #356]	; (8006c84 <HAL_UART_RxCpltCallback+0x820>)
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b22:	e007      	b.n	8006b34 <HAL_UART_RxCpltCallback+0x6d0>
			{
				outd2[i] = 0;
 8006b24:	4a59      	ldr	r2, [pc, #356]	; (8006c8c <HAL_UART_RxCpltCallback+0x828>)
 8006b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b28:	4413      	add	r3, r2
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	701a      	strb	r2, [r3, #0]
			for (int i=uLength2;i<1024;i++)
 8006b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b30:	3301      	adds	r3, #1
 8006b32:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b3a:	dbf3      	blt.n	8006b24 <HAL_UART_RxCpltCallback+0x6c0>
			}
			outl2=uLength2;
 8006b3c:	4b51      	ldr	r3, [pc, #324]	; (8006c84 <HAL_UART_RxCpltCallback+0x820>)
 8006b3e:	781a      	ldrb	r2, [r3, #0]
 8006b40:	4b53      	ldr	r3, [pc, #332]	; (8006c90 <HAL_UART_RxCpltCallback+0x82c>)
 8006b42:	701a      	strb	r2, [r3, #0]
			//HAL_UART_Transmit(&huart1, outd2, uLength2 + 1, 0xffff);
			int q = outl2 / 13;
 8006b44:	4b52      	ldr	r3, [pc, #328]	; (8006c90 <HAL_UART_RxCpltCallback+0x82c>)
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	4a52      	ldr	r2, [pc, #328]	; (8006c94 <HAL_UART_RxCpltCallback+0x830>)
 8006b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b4e:	089b      	lsrs	r3, r3, #2
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	637b      	str	r3, [r7, #52]	; 0x34
				if(outl2 % 13 != 0){
 8006b54:	4b4e      	ldr	r3, [pc, #312]	; (8006c90 <HAL_UART_RxCpltCallback+0x82c>)
 8006b56:	7819      	ldrb	r1, [r3, #0]
 8006b58:	4b4e      	ldr	r3, [pc, #312]	; (8006c94 <HAL_UART_RxCpltCallback+0x830>)
 8006b5a:	fba3 2301 	umull	r2, r3, r3, r1
 8006b5e:	089a      	lsrs	r2, r3, #2
 8006b60:	4613      	mov	r3, r2
 8006b62:	005b      	lsls	r3, r3, #1
 8006b64:	4413      	add	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	4413      	add	r3, r2
 8006b6a:	1acb      	subs	r3, r1, r3
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d002      	beq.n	8006b78 <HAL_UART_RxCpltCallback+0x714>
					q=q+1;
 8006b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b74:	3301      	adds	r3, #1
 8006b76:	637b      	str	r3, [r7, #52]	; 0x34
				}
				if(icnt+q<13)
 8006b78:	4b39      	ldr	r3, [pc, #228]	; (8006c60 <HAL_UART_RxCpltCallback+0x7fc>)
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b7e:	4413      	add	r3, r2
 8006b80:	2b0c      	cmp	r3, #12
 8006b82:	dc5a      	bgt.n	8006c3a <HAL_UART_RxCpltCallback+0x7d6>
				{
					for (int j=0;j<q;j++)
 8006b84:	2300      	movs	r3, #0
 8006b86:	633b      	str	r3, [r7, #48]	; 0x30
 8006b88:	e04c      	b.n	8006c24 <HAL_UART_RxCpltCallback+0x7c0>
					{
						for (int k=0;k<13;k++)
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b8e:	e02f      	b.n	8006bf0 <HAL_UART_RxCpltCallback+0x78c>
						{
							if(j*13 + k < outl2)
 8006b90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b92:	4613      	mov	r3, r2
 8006b94:	005b      	lsls	r3, r3, #1
 8006b96:	4413      	add	r3, r2
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	441a      	add	r2, r3
 8006b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9e:	4413      	add	r3, r2
 8006ba0:	4a3b      	ldr	r2, [pc, #236]	; (8006c90 <HAL_UART_RxCpltCallback+0x82c>)
 8006ba2:	7812      	ldrb	r2, [r2, #0]
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	da15      	bge.n	8006bd4 <HAL_UART_RxCpltCallback+0x770>
							{
								l[icnt+j][k]=(char) outd2[j*13+k];
 8006ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006baa:	4613      	mov	r3, r2
 8006bac:	005b      	lsls	r3, r3, #1
 8006bae:	4413      	add	r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	441a      	add	r2, r3
 8006bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb6:	441a      	add	r2, r3
 8006bb8:	4b29      	ldr	r3, [pc, #164]	; (8006c60 <HAL_UART_RxCpltCallback+0x7fc>)
 8006bba:	6819      	ldr	r1, [r3, #0]
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbe:	440b      	add	r3, r1
 8006bc0:	4932      	ldr	r1, [pc, #200]	; (8006c8c <HAL_UART_RxCpltCallback+0x828>)
 8006bc2:	5c89      	ldrb	r1, [r1, r2]
 8006bc4:	4a25      	ldr	r2, [pc, #148]	; (8006c5c <HAL_UART_RxCpltCallback+0x7f8>)
 8006bc6:	029b      	lsls	r3, r3, #10
 8006bc8:	441a      	add	r2, r3
 8006bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bcc:	4413      	add	r3, r2
 8006bce:	460a      	mov	r2, r1
 8006bd0:	701a      	strb	r2, [r3, #0]
 8006bd2:	e00a      	b.n	8006bea <HAL_UART_RxCpltCallback+0x786>
							}
							else
							{
								l[icnt+j][k]=' ';
 8006bd4:	4b22      	ldr	r3, [pc, #136]	; (8006c60 <HAL_UART_RxCpltCallback+0x7fc>)
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bda:	4413      	add	r3, r2
 8006bdc:	4a1f      	ldr	r2, [pc, #124]	; (8006c5c <HAL_UART_RxCpltCallback+0x7f8>)
 8006bde:	029b      	lsls	r3, r3, #10
 8006be0:	441a      	add	r2, r3
 8006be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be4:	4413      	add	r3, r2
 8006be6:	2220      	movs	r2, #32
 8006be8:	701a      	strb	r2, [r3, #0]
						for (int k=0;k<13;k++)
 8006bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bec:	3301      	adds	r3, #1
 8006bee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf2:	2b0c      	cmp	r3, #12
 8006bf4:	ddcc      	ble.n	8006b90 <HAL_UART_RxCpltCallback+0x72c>
							}
						}for (int k=13;k<28;k++){
 8006bf6:	230d      	movs	r3, #13
 8006bf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bfa:	e00d      	b.n	8006c18 <HAL_UART_RxCpltCallback+0x7b4>
							l[icnt+j][k]=' ';
 8006bfc:	4b18      	ldr	r3, [pc, #96]	; (8006c60 <HAL_UART_RxCpltCallback+0x7fc>)
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c02:	4413      	add	r3, r2
 8006c04:	4a15      	ldr	r2, [pc, #84]	; (8006c5c <HAL_UART_RxCpltCallback+0x7f8>)
 8006c06:	029b      	lsls	r3, r3, #10
 8006c08:	441a      	add	r2, r3
 8006c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0c:	4413      	add	r3, r2
 8006c0e:	2220      	movs	r2, #32
 8006c10:	701a      	strb	r2, [r3, #0]
						}for (int k=13;k<28;k++){
 8006c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c14:	3301      	adds	r3, #1
 8006c16:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1a:	2b1b      	cmp	r3, #27
 8006c1c:	ddee      	ble.n	8006bfc <HAL_UART_RxCpltCallback+0x798>
					for (int j=0;j<q;j++)
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c20:	3301      	adds	r3, #1
 8006c22:	633b      	str	r3, [r7, #48]	; 0x30
 8006c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	dbae      	blt.n	8006b8a <HAL_UART_RxCpltCallback+0x726>
						}
					}
					icnt+=q;
 8006c2c:	4b0c      	ldr	r3, [pc, #48]	; (8006c60 <HAL_UART_RxCpltCallback+0x7fc>)
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c32:	4413      	add	r3, r2
 8006c34:	4a0a      	ldr	r2, [pc, #40]	; (8006c60 <HAL_UART_RxCpltCallback+0x7fc>)
 8006c36:	6013      	str	r3, [r2, #0]
 8006c38:	e0a8      	b.n	8006d8c <HAL_UART_RxCpltCallback+0x928>
					//HAL_UART_Transmit(&huart1, outd, strlen(outd), 0xffff);
					//HAL_UART_Transmit(&huart1, outd2, strlen(outd2), 0xffff);
				}
				else
				{
					int re=icnt+q-12;
 8006c3a:	4b09      	ldr	r3, [pc, #36]	; (8006c60 <HAL_UART_RxCpltCallback+0x7fc>)
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c40:	4413      	add	r3, r2
 8006c42:	3b0c      	subs	r3, #12
 8006c44:	60fb      	str	r3, [r7, #12]
					for(int j=0;j<12-re;j++)
 8006c46:	2300      	movs	r3, #0
 8006c48:	627b      	str	r3, [r7, #36]	; 0x24
 8006c4a:	e03f      	b.n	8006ccc <HAL_UART_RxCpltCallback+0x868>
					{
						for(int k=0;k<28;k++)
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	623b      	str	r3, [r7, #32]
 8006c50:	e036      	b.n	8006cc0 <HAL_UART_RxCpltCallback+0x85c>
 8006c52:	bf00      	nop
 8006c54:	20005b28 	.word	0x20005b28
 8006c58:	20003e6c 	.word	0x20003e6c
 8006c5c:	20000e6c 	.word	0x20000e6c
 8006c60:	2000466c 	.word	0x2000466c
 8006c64:	20004a70 	.word	0x20004a70
 8006c68:	20004670 	.word	0x20004670
 8006c6c:	20005274 	.word	0x20005274
 8006c70:	20005278 	.word	0x20005278
 8006c74:	20005b2c 	.word	0x20005b2c
 8006c78:	20004a74 	.word	0x20004a74
 8006c7c:	40004400 	.word	0x40004400
 8006c80:	20004e74 	.word	0x20004e74
 8006c84:	20005678 	.word	0x20005678
 8006c88:	2000567c 	.word	0x2000567c
 8006c8c:	2000426c 	.word	0x2000426c
 8006c90:	20005a9c 	.word	0x20005a9c
 8006c94:	4ec4ec4f 	.word	0x4ec4ec4f
						{
							l[j][k]=l[j+re][k];
 8006c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	4a4c      	ldr	r2, [pc, #304]	; (8006dd0 <HAL_UART_RxCpltCallback+0x96c>)
 8006ca0:	029b      	lsls	r3, r3, #10
 8006ca2:	441a      	add	r2, r3
 8006ca4:	6a3b      	ldr	r3, [r7, #32]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	7819      	ldrb	r1, [r3, #0]
 8006caa:	4a49      	ldr	r2, [pc, #292]	; (8006dd0 <HAL_UART_RxCpltCallback+0x96c>)
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	029b      	lsls	r3, r3, #10
 8006cb0:	441a      	add	r2, r3
 8006cb2:	6a3b      	ldr	r3, [r7, #32]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	460a      	mov	r2, r1
 8006cb8:	701a      	strb	r2, [r3, #0]
						for(int k=0;k<28;k++)
 8006cba:	6a3b      	ldr	r3, [r7, #32]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	623b      	str	r3, [r7, #32]
 8006cc0:	6a3b      	ldr	r3, [r7, #32]
 8006cc2:	2b1b      	cmp	r3, #27
 8006cc4:	dde8      	ble.n	8006c98 <HAL_UART_RxCpltCallback+0x834>
					for(int j=0;j<12-re;j++)
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc8:	3301      	adds	r3, #1
 8006cca:	627b      	str	r3, [r7, #36]	; 0x24
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f1c3 030c 	rsb	r3, r3, #12
 8006cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	dbb9      	blt.n	8006c4c <HAL_UART_RxCpltCallback+0x7e8>
						}
					}
					for(int j=0;j<q;j++)
 8006cd8:	2300      	movs	r3, #0
 8006cda:	61fb      	str	r3, [r7, #28]
 8006cdc:	e04f      	b.n	8006d7e <HAL_UART_RxCpltCallback+0x91a>
					{
						 for(int k=0;k<13;k++)
 8006cde:	2300      	movs	r3, #0
 8006ce0:	61bb      	str	r3, [r7, #24]
 8006ce2:	e031      	b.n	8006d48 <HAL_UART_RxCpltCallback+0x8e4>
						 {
							 if(j*13+k<outl2)
 8006ce4:	69fa      	ldr	r2, [r7, #28]
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	005b      	lsls	r3, r3, #1
 8006cea:	4413      	add	r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	441a      	add	r2, r3
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	4a37      	ldr	r2, [pc, #220]	; (8006dd4 <HAL_UART_RxCpltCallback+0x970>)
 8006cf6:	7812      	ldrb	r2, [r2, #0]
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	da16      	bge.n	8006d2a <HAL_UART_RxCpltCallback+0x8c6>
							 {
								 l[j+12-q][k]=outd2[j*13+k];
 8006cfc:	69fa      	ldr	r2, [r7, #28]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	005b      	lsls	r3, r3, #1
 8006d02:	4413      	add	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	441a      	add	r2, r3
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	441a      	add	r2, r3
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	f103 010c 	add.w	r1, r3, #12
 8006d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d14:	1acb      	subs	r3, r1, r3
 8006d16:	4930      	ldr	r1, [pc, #192]	; (8006dd8 <HAL_UART_RxCpltCallback+0x974>)
 8006d18:	5c89      	ldrb	r1, [r1, r2]
 8006d1a:	4a2d      	ldr	r2, [pc, #180]	; (8006dd0 <HAL_UART_RxCpltCallback+0x96c>)
 8006d1c:	029b      	lsls	r3, r3, #10
 8006d1e:	441a      	add	r2, r3
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	4413      	add	r3, r2
 8006d24:	460a      	mov	r2, r1
 8006d26:	701a      	strb	r2, [r3, #0]
 8006d28:	e00b      	b.n	8006d42 <HAL_UART_RxCpltCallback+0x8de>
							 }
							 else
							 {
								 l[j+12-q][k]=' ';
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	f103 020c 	add.w	r2, r3, #12
 8006d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	4a26      	ldr	r2, [pc, #152]	; (8006dd0 <HAL_UART_RxCpltCallback+0x96c>)
 8006d36:	029b      	lsls	r3, r3, #10
 8006d38:	441a      	add	r2, r3
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	2220      	movs	r2, #32
 8006d40:	701a      	strb	r2, [r3, #0]
						 for(int k=0;k<13;k++)
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	3301      	adds	r3, #1
 8006d46:	61bb      	str	r3, [r7, #24]
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	2b0c      	cmp	r3, #12
 8006d4c:	ddca      	ble.n	8006ce4 <HAL_UART_RxCpltCallback+0x880>
							 }
						 }
						 for (int k=13;k<28;k++){
 8006d4e:	230d      	movs	r3, #13
 8006d50:	617b      	str	r3, [r7, #20]
 8006d52:	e00e      	b.n	8006d72 <HAL_UART_RxCpltCallback+0x90e>
							 l[j+12-q][k]=' ';
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	f103 020c 	add.w	r2, r3, #12
 8006d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d5c:	1ad3      	subs	r3, r2, r3
 8006d5e:	4a1c      	ldr	r2, [pc, #112]	; (8006dd0 <HAL_UART_RxCpltCallback+0x96c>)
 8006d60:	029b      	lsls	r3, r3, #10
 8006d62:	441a      	add	r2, r3
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	4413      	add	r3, r2
 8006d68:	2220      	movs	r2, #32
 8006d6a:	701a      	strb	r2, [r3, #0]
						 for (int k=13;k<28;k++){
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	617b      	str	r3, [r7, #20]
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	2b1b      	cmp	r3, #27
 8006d76:	dded      	ble.n	8006d54 <HAL_UART_RxCpltCallback+0x8f0>
					for(int j=0;j<q;j++)
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	61fb      	str	r3, [r7, #28]
 8006d7e:	69fa      	ldr	r2, [r7, #28]
 8006d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d82:	429a      	cmp	r2, r3
 8006d84:	dbab      	blt.n	8006cde <HAL_UART_RxCpltCallback+0x87a>
						 }
					}
					icnt=12;
 8006d86:	4b15      	ldr	r3, [pc, #84]	; (8006ddc <HAL_UART_RxCpltCallback+0x978>)
 8006d88:	220c      	movs	r2, #12
 8006d8a:	601a      	str	r2, [r3, #0]
				}
				//HAL_UART_Transmit(&huart1, outd2,strlen(outd2), 0xffff);
				//HAL_UART_Transmit(&huart1, l[3],strlen(l[3]), 0xffff);
				snum[snumLength]=q;
 8006d8c:	4b14      	ldr	r3, [pc, #80]	; (8006de0 <HAL_UART_RxCpltCallback+0x97c>)
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	461a      	mov	r2, r3
 8006d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d94:	b2d9      	uxtb	r1, r3
 8006d96:	4b13      	ldr	r3, [pc, #76]	; (8006de4 <HAL_UART_RxCpltCallback+0x980>)
 8006d98:	5499      	strb	r1, [r3, r2]
				snumLength++;
 8006d9a:	4b11      	ldr	r3, [pc, #68]	; (8006de0 <HAL_UART_RxCpltCallback+0x97c>)
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	b2da      	uxtb	r2, r3
 8006da2:	4b0f      	ldr	r3, [pc, #60]	; (8006de0 <HAL_UART_RxCpltCallback+0x97c>)
 8006da4:	701a      	strb	r2, [r3, #0]
			uLength2 = 0;
 8006da6:	4b10      	ldr	r3, [pc, #64]	; (8006de8 <HAL_UART_RxCpltCallback+0x984>)
 8006da8:	2200      	movs	r2, #0
 8006daa:	701a      	strb	r2, [r3, #0]
		{
			uRx_Data2[uLength2] = rcv_buffer_bluetooth[0];
			uLength2++;
		}
	}
}
 8006dac:	e00c      	b.n	8006dc8 <HAL_UART_RxCpltCallback+0x964>
			uRx_Data2[uLength2] = rcv_buffer_bluetooth[0];
 8006dae:	4b0e      	ldr	r3, [pc, #56]	; (8006de8 <HAL_UART_RxCpltCallback+0x984>)
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	461a      	mov	r2, r3
 8006db4:	4b0d      	ldr	r3, [pc, #52]	; (8006dec <HAL_UART_RxCpltCallback+0x988>)
 8006db6:	7819      	ldrb	r1, [r3, #0]
 8006db8:	4b0d      	ldr	r3, [pc, #52]	; (8006df0 <HAL_UART_RxCpltCallback+0x98c>)
 8006dba:	5499      	strb	r1, [r3, r2]
			uLength2++;
 8006dbc:	4b0a      	ldr	r3, [pc, #40]	; (8006de8 <HAL_UART_RxCpltCallback+0x984>)
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	b2da      	uxtb	r2, r3
 8006dc4:	4b08      	ldr	r3, [pc, #32]	; (8006de8 <HAL_UART_RxCpltCallback+0x984>)
 8006dc6:	701a      	strb	r2, [r3, #0]
}
 8006dc8:	bf00      	nop
 8006dca:	3778      	adds	r7, #120	; 0x78
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	20000e6c 	.word	0x20000e6c
 8006dd4:	20005a9c 	.word	0x20005a9c
 8006dd8:	2000426c 	.word	0x2000426c
 8006ddc:	2000466c 	.word	0x2000466c
 8006de0:	20004a70 	.word	0x20004a70
 8006de4:	20004670 	.word	0x20004670
 8006de8:	20005678 	.word	0x20005678
 8006dec:	20004e74 	.word	0x20004e74
 8006df0:	2000567c 	.word	0x2000567c

08006df4 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006df8:	4804      	ldr	r0, [pc, #16]	; (8006e0c <USART1_IRQHandler+0x18>)
 8006dfa:	f002 fc5f 	bl	80096bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)rcv_buffer_user, 1);
 8006dfe:	2201      	movs	r2, #1
 8006e00:	4903      	ldr	r1, [pc, #12]	; (8006e10 <USART1_IRQHandler+0x1c>)
 8006e02:	4802      	ldr	r0, [pc, #8]	; (8006e0c <USART1_IRQHandler+0x18>)
 8006e04:	f002 fc05 	bl	8009612 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_IRQn 1 */
}
 8006e08:	bf00      	nop
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	20005ae8 	.word	0x20005ae8
 8006e10:	20004a74 	.word	0x20004a74

08006e14 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006e18:	4804      	ldr	r0, [pc, #16]	; (8006e2c <USART2_IRQHandler+0x18>)
 8006e1a:	f002 fc4f 	bl	80096bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)rcv_buffer_bluetooth, 1);
 8006e1e:	2201      	movs	r2, #1
 8006e20:	4903      	ldr	r1, [pc, #12]	; (8006e30 <USART2_IRQHandler+0x1c>)
 8006e22:	4802      	ldr	r0, [pc, #8]	; (8006e2c <USART2_IRQHandler+0x18>)
 8006e24:	f002 fbf5 	bl	8009612 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_IRQn 1 */
}
 8006e28:	bf00      	nop
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	20005b2c 	.word	0x20005b2c
 8006e30:	20004e74 	.word	0x20004e74

08006e34 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	80fb      	strh	r3, [r7, #6]
	if(HAL_GetTick() - timer < key_interval)
 8006e3e:	f000 feb7 	bl	8007bb0 <HAL_GetTick>
 8006e42:	4602      	mov	r2, r0
 8006e44:	4b3d      	ldr	r3, [pc, #244]	; (8006f3c <HAL_GPIO_EXTI_Callback+0x108>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	4a3d      	ldr	r2, [pc, #244]	; (8006f40 <HAL_GPIO_EXTI_Callback+0x10c>)
 8006e4c:	6812      	ldr	r2, [r2, #0]
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d36f      	bcc.n	8006f32 <HAL_GPIO_EXTI_Callback+0xfe>
	{
		return;
	}
	else
	{
		timer = HAL_GetTick();
 8006e52:	f000 fead 	bl	8007bb0 <HAL_GetTick>
 8006e56:	4603      	mov	r3, r0
 8006e58:	461a      	mov	r2, r3
 8006e5a:	4b38      	ldr	r3, [pc, #224]	; (8006f3c <HAL_GPIO_EXTI_Callback+0x108>)
 8006e5c:	601a      	str	r2, [r3, #0]
		switch(GPIO_Pin)
 8006e5e:	88fb      	ldrh	r3, [r7, #6]
 8006e60:	2b20      	cmp	r3, #32
 8006e62:	d005      	beq.n	8006e70 <HAL_GPIO_EXTI_Callback+0x3c>
 8006e64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e68:	d024      	beq.n	8006eb4 <HAL_GPIO_EXTI_Callback+0x80>
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d039      	beq.n	8006ee2 <HAL_GPIO_EXTI_Callback+0xae>
 8006e6e:	e061      	b.n	8006f34 <HAL_GPIO_EXTI_Callback+0x100>
		{
			case KEY0_Pin://建立默认连接
			{
				HAL_UART_Transmit(&huart2, (uint8_t*)cmode0, strlen(cmode0), HAL_MAX_DELAY);
 8006e70:	4834      	ldr	r0, [pc, #208]	; (8006f44 <HAL_GPIO_EXTI_Callback+0x110>)
 8006e72:	f7f9 f9d9 	bl	8000228 <strlen>
 8006e76:	4603      	mov	r3, r0
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e7e:	4931      	ldr	r1, [pc, #196]	; (8006f44 <HAL_GPIO_EXTI_Callback+0x110>)
 8006e80:	4831      	ldr	r0, [pc, #196]	; (8006f48 <HAL_GPIO_EXTI_Callback+0x114>)
 8006e82:	f002 fb34 	bl	80094ee <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, (uint8_t*)BindAddress, strlen(BindAddress), HAL_MAX_DELAY);
 8006e86:	4831      	ldr	r0, [pc, #196]	; (8006f4c <HAL_GPIO_EXTI_Callback+0x118>)
 8006e88:	f7f9 f9ce 	bl	8000228 <strlen>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	f04f 33ff 	mov.w	r3, #4294967295
 8006e94:	492d      	ldr	r1, [pc, #180]	; (8006f4c <HAL_GPIO_EXTI_Callback+0x118>)
 8006e96:	482c      	ldr	r0, [pc, #176]	; (8006f48 <HAL_GPIO_EXTI_Callback+0x114>)
 8006e98:	f002 fb29 	bl	80094ee <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, (uint8_t*)cmode0, strlen(cmode0), HAL_MAX_DELAY);
 8006e9c:	4829      	ldr	r0, [pc, #164]	; (8006f44 <HAL_GPIO_EXTI_Callback+0x110>)
 8006e9e:	f7f9 f9c3 	bl	8000228 <strlen>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8006eaa:	4926      	ldr	r1, [pc, #152]	; (8006f44 <HAL_GPIO_EXTI_Callback+0x110>)
 8006eac:	4828      	ldr	r0, [pc, #160]	; (8006f50 <HAL_GPIO_EXTI_Callback+0x11c>)
 8006eae:	f002 fb1e 	bl	80094ee <HAL_UART_Transmit>
				break;
 8006eb2:	e03f      	b.n	8006f34 <HAL_GPIO_EXTI_Callback+0x100>
			}
			case KEY1_Pin://任意连接
			{
				HAL_UART_Transmit(&huart2, (uint8_t*)cmode1, strlen(cmode1), HAL_MAX_DELAY);
 8006eb4:	4827      	ldr	r0, [pc, #156]	; (8006f54 <HAL_GPIO_EXTI_Callback+0x120>)
 8006eb6:	f7f9 f9b7 	bl	8000228 <strlen>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8006ec2:	4924      	ldr	r1, [pc, #144]	; (8006f54 <HAL_GPIO_EXTI_Callback+0x120>)
 8006ec4:	4820      	ldr	r0, [pc, #128]	; (8006f48 <HAL_GPIO_EXTI_Callback+0x114>)
 8006ec6:	f002 fb12 	bl	80094ee <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1, (uint8_t*)cmode1, strlen(cmode1), HAL_MAX_DELAY);
 8006eca:	4822      	ldr	r0, [pc, #136]	; (8006f54 <HAL_GPIO_EXTI_Callback+0x120>)
 8006ecc:	f7f9 f9ac 	bl	8000228 <strlen>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ed8:	491e      	ldr	r1, [pc, #120]	; (8006f54 <HAL_GPIO_EXTI_Callback+0x120>)
 8006eda:	481d      	ldr	r0, [pc, #116]	; (8006f50 <HAL_GPIO_EXTI_Callback+0x11c>)
 8006edc:	f002 fb07 	bl	80094ee <HAL_UART_Transmit>
				break;
 8006ee0:	e028      	b.n	8006f34 <HAL_GPIO_EXTI_Callback+0x100>
			}
			case Enable_Pin://打开或关闭蓝牙模
			{
				HAL_GPIO_TogglePin(EN_GPIO_Port, EN_Pin);
 8006ee2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006ee6:	481c      	ldr	r0, [pc, #112]	; (8006f58 <HAL_GPIO_EXTI_Callback+0x124>)
 8006ee8:	f001 fa3d 	bl	8008366 <HAL_GPIO_TogglePin>
				int IfEn=HAL_GPIO_ReadPin(EN_GPIO_Port,EN_Pin);
 8006eec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006ef0:	4819      	ldr	r0, [pc, #100]	; (8006f58 <HAL_GPIO_EXTI_Callback+0x124>)
 8006ef2:	f001 fa09 	bl	8008308 <HAL_GPIO_ReadPin>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	60fb      	str	r3, [r7, #12]
				if (IfEn==0)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10b      	bne.n	8006f18 <HAL_GPIO_EXTI_Callback+0xe4>
				{
					HAL_UART_Transmit(&huart1, (uint8_t*)DisBluetooth, strlen(DisBluetooth), HAL_MAX_DELAY);
 8006f00:	4816      	ldr	r0, [pc, #88]	; (8006f5c <HAL_GPIO_EXTI_Callback+0x128>)
 8006f02:	f7f9 f991 	bl	8000228 <strlen>
 8006f06:	4603      	mov	r3, r0
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f0e:	4913      	ldr	r1, [pc, #76]	; (8006f5c <HAL_GPIO_EXTI_Callback+0x128>)
 8006f10:	480f      	ldr	r0, [pc, #60]	; (8006f50 <HAL_GPIO_EXTI_Callback+0x11c>)
 8006f12:	f002 faec 	bl	80094ee <HAL_UART_Transmit>
				}
				else
				{
					HAL_UART_Transmit(&huart1, (uint8_t*)EnBluetooth, strlen(EnBluetooth), HAL_MAX_DELAY);
				}
				return;
 8006f16:	e00d      	b.n	8006f34 <HAL_GPIO_EXTI_Callback+0x100>
					HAL_UART_Transmit(&huart1, (uint8_t*)EnBluetooth, strlen(EnBluetooth), HAL_MAX_DELAY);
 8006f18:	4811      	ldr	r0, [pc, #68]	; (8006f60 <HAL_GPIO_EXTI_Callback+0x12c>)
 8006f1a:	f7f9 f985 	bl	8000228 <strlen>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	f04f 33ff 	mov.w	r3, #4294967295
 8006f26:	490e      	ldr	r1, [pc, #56]	; (8006f60 <HAL_GPIO_EXTI_Callback+0x12c>)
 8006f28:	4809      	ldr	r0, [pc, #36]	; (8006f50 <HAL_GPIO_EXTI_Callback+0x11c>)
 8006f2a:	f002 fae0 	bl	80094ee <HAL_UART_Transmit>
				return;
 8006f2e:	bf00      	nop
 8006f30:	e000      	b.n	8006f34 <HAL_GPIO_EXTI_Callback+0x100>
		return;
 8006f32:	bf00      	nop
			}
		}

	}
}
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	20005a98 	.word	0x20005a98
 8006f40:	2000006c 	.word	0x2000006c
 8006f44:	20000014 	.word	0x20000014
 8006f48:	20005b2c 	.word	0x20005b2c
 8006f4c:	20000024 	.word	0x20000024
 8006f50:	20005ae8 	.word	0x20005ae8
 8006f54:	20000004 	.word	0x20000004
 8006f58:	40011000 	.word	0x40011000
 8006f5c:	20000058 	.word	0x20000058
 8006f60:	20000044 	.word	0x20000044

08006f64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b096      	sub	sp, #88	; 0x58
 8006f68:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006f6a:	f000 fdc9 	bl	8007b00 <HAL_Init>
  LCD_Init();
 8006f6e:	f7fb f93f 	bl	80021f0 <LCD_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006f72:	f000 fa5b 	bl	800742c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006f76:	f000 fb41 	bl	80075fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8006f7a:	f000 fb15 	bl	80075a8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8006f7e:	f000 fae9 	bl	8007554 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8006f82:	f000 fa99 	bl	80074b8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, (uint8_t *)rcv_buffer_user, 1);
 8006f86:	2201      	movs	r2, #1
 8006f88:	49aa      	ldr	r1, [pc, #680]	; (8007234 <main+0x2d0>)
 8006f8a:	48ab      	ldr	r0, [pc, #684]	; (8007238 <main+0x2d4>)
 8006f8c:	f002 fb41 	bl	8009612 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *)rcv_buffer_bluetooth, 1);
 8006f90:	2201      	movs	r2, #1
 8006f92:	49aa      	ldr	r1, [pc, #680]	; (800723c <main+0x2d8>)
 8006f94:	48aa      	ldr	r0, [pc, #680]	; (8007240 <main+0x2dc>)
 8006f96:	f002 fb3c 	bl	8009612 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8006f9a:	48aa      	ldr	r0, [pc, #680]	; (8007244 <main+0x2e0>)
 8006f9c:	f001 fe80 	bl	8008ca0 <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006fa6:	48a8      	ldr	r0, [pc, #672]	; (8007248 <main+0x2e4>)
 8006fa8:	f001 f9c5 	bl	8008336 <HAL_GPIO_WritePin>

  timer = HAL_GetTick();
 8006fac:	f000 fe00 	bl	8007bb0 <HAL_GetTick>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	4ba5      	ldr	r3, [pc, #660]	; (800724c <main+0x2e8>)
 8006fb6:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    {
	  HAL_Delay(1000);
 8006fb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006fbc:	f000 fe02 	bl	8007bc4 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, "new line12\n", 11, 0xffff);*/
      /* USER CODE END WHILE */
  	  char msg[20];
  	  char btmsg[20];
  	  char cmdmsg[20];
  	  sprintf(btmsg, "BlueTooth:%s", bt);
 8006fc0:	f107 0314 	add.w	r3, r7, #20
 8006fc4:	4aa2      	ldr	r2, [pc, #648]	; (8007250 <main+0x2ec>)
 8006fc6:	49a3      	ldr	r1, [pc, #652]	; (8007254 <main+0x2f0>)
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f003 fafb 	bl	800a5c4 <siprintf>
  	  sprintf(msg, "status:%s", sta);
 8006fce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006fd2:	4aa1      	ldr	r2, [pc, #644]	; (8007258 <main+0x2f4>)
 8006fd4:	49a1      	ldr	r1, [pc, #644]	; (800725c <main+0x2f8>)
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f003 faf4 	bl	800a5c4 <siprintf>
  	  sprintf(cmdmsg, "msg:%s", cmd);
 8006fdc:	463b      	mov	r3, r7
 8006fde:	4aa0      	ldr	r2, [pc, #640]	; (8007260 <main+0x2fc>)
 8006fe0:	49a0      	ldr	r1, [pc, #640]	; (8007264 <main+0x300>)
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f003 faee 	bl	800a5c4 <siprintf>
  	  POINT_COLOR = BLACK;
 8006fe8:	4b9f      	ldr	r3, [pc, #636]	; (8007268 <main+0x304>)
 8006fea:	2200      	movs	r2, #0
 8006fec:	801a      	strh	r2, [r3, #0]
  	  LCD_DrawRectangle(5, 5, 235, 65);
 8006fee:	2341      	movs	r3, #65	; 0x41
 8006ff0:	22eb      	movs	r2, #235	; 0xeb
 8006ff2:	2105      	movs	r1, #5
 8006ff4:	2005      	movs	r0, #5
 8006ff6:	f7ff f90e 	bl	8006216 <LCD_DrawRectangle>
  	  LCD_ShowString(6, 6, 228, 16, 16, (uint8_t*) btmsg);
 8006ffa:	f107 0314 	add.w	r3, r7, #20
 8006ffe:	9301      	str	r3, [sp, #4]
 8007000:	2310      	movs	r3, #16
 8007002:	9300      	str	r3, [sp, #0]
 8007004:	2310      	movs	r3, #16
 8007006:	22e4      	movs	r2, #228	; 0xe4
 8007008:	2106      	movs	r1, #6
 800700a:	2006      	movs	r0, #6
 800700c:	f7ff f9dc 	bl	80063c8 <LCD_ShowString>
  	  LCD_ShowString(6, 26, 228, 16, 16, (uint8_t*) msg);
 8007010:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007014:	9301      	str	r3, [sp, #4]
 8007016:	2310      	movs	r3, #16
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	2310      	movs	r3, #16
 800701c:	22e4      	movs	r2, #228	; 0xe4
 800701e:	211a      	movs	r1, #26
 8007020:	2006      	movs	r0, #6
 8007022:	f7ff f9d1 	bl	80063c8 <LCD_ShowString>
  	  LCD_ShowString(6, 46, 228, 16, 16, (uint8_t*) cmdmsg);
 8007026:	463b      	mov	r3, r7
 8007028:	9301      	str	r3, [sp, #4]
 800702a:	2310      	movs	r3, #16
 800702c:	9300      	str	r3, [sp, #0]
 800702e:	2310      	movs	r3, #16
 8007030:	22e4      	movs	r2, #228	; 0xe4
 8007032:	212e      	movs	r1, #46	; 0x2e
 8007034:	2006      	movs	r0, #6
 8007036:	f7ff f9c7 	bl	80063c8 <LCD_ShowString>
  	  LCD_DrawRectangle(5, 65, 235, 315);
 800703a:	f240 133b 	movw	r3, #315	; 0x13b
 800703e:	22eb      	movs	r2, #235	; 0xeb
 8007040:	2141      	movs	r1, #65	; 0x41
 8007042:	2005      	movs	r0, #5
 8007044:	f7ff f8e7 	bl	8006216 <LCD_DrawRectangle>
  		  }else{
  			  POINT_COLOR=RED;
  		  }
			  LCD_ShowString(6,66+20*i,228,16,16,l[i]);
  	  }*/
  	  	  	  if(l[0][0]==' '){
 8007048:	4b88      	ldr	r3, [pc, #544]	; (800726c <main+0x308>)
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	2b20      	cmp	r3, #32
 800704e:	d103      	bne.n	8007058 <main+0xf4>
  		  		POINT_COLOR = BLUE;
 8007050:	4b85      	ldr	r3, [pc, #532]	; (8007268 <main+0x304>)
 8007052:	221f      	movs	r2, #31
 8007054:	801a      	strh	r2, [r3, #0]
 8007056:	e003      	b.n	8007060 <main+0xfc>
  		  	  }else{
  		  		POINT_COLOR = RED;
 8007058:	4b83      	ldr	r3, [pc, #524]	; (8007268 <main+0x304>)
 800705a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800705e:	801a      	strh	r2, [r3, #0]
  		  	  }
  		  	LCD_ShowString(6, 66, 228, 16, 16, (uint8_t*) l[0]);
 8007060:	4b82      	ldr	r3, [pc, #520]	; (800726c <main+0x308>)
 8007062:	9301      	str	r3, [sp, #4]
 8007064:	2310      	movs	r3, #16
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	2310      	movs	r3, #16
 800706a:	22e4      	movs	r2, #228	; 0xe4
 800706c:	2142      	movs	r1, #66	; 0x42
 800706e:	2006      	movs	r0, #6
 8007070:	f7ff f9aa 	bl	80063c8 <LCD_ShowString>
  		  	  if(l[1][0]==' '){
 8007074:	4b7d      	ldr	r3, [pc, #500]	; (800726c <main+0x308>)
 8007076:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800707a:	2b20      	cmp	r3, #32
 800707c:	d103      	bne.n	8007086 <main+0x122>
  		  		POINT_COLOR = BLUE;
 800707e:	4b7a      	ldr	r3, [pc, #488]	; (8007268 <main+0x304>)
 8007080:	221f      	movs	r2, #31
 8007082:	801a      	strh	r2, [r3, #0]
 8007084:	e003      	b.n	800708e <main+0x12a>
  		  	  }else{
  		  		POINT_COLOR = RED;
 8007086:	4b78      	ldr	r3, [pc, #480]	; (8007268 <main+0x304>)
 8007088:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800708c:	801a      	strh	r2, [r3, #0]
  		  	  }
  		  	LCD_ShowString(6, 86, 228, 16, 16, (uint8_t*) l[1]);
 800708e:	4b78      	ldr	r3, [pc, #480]	; (8007270 <main+0x30c>)
 8007090:	9301      	str	r3, [sp, #4]
 8007092:	2310      	movs	r3, #16
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	2310      	movs	r3, #16
 8007098:	22e4      	movs	r2, #228	; 0xe4
 800709a:	2156      	movs	r1, #86	; 0x56
 800709c:	2006      	movs	r0, #6
 800709e:	f7ff f993 	bl	80063c8 <LCD_ShowString>
  		  	  if(l[2][0]==' '){
 80070a2:	4b72      	ldr	r3, [pc, #456]	; (800726c <main+0x308>)
 80070a4:	f893 3800 	ldrb.w	r3, [r3, #2048]	; 0x800
 80070a8:	2b20      	cmp	r3, #32
 80070aa:	d103      	bne.n	80070b4 <main+0x150>
  		  		POINT_COLOR = BLUE;
 80070ac:	4b6e      	ldr	r3, [pc, #440]	; (8007268 <main+0x304>)
 80070ae:	221f      	movs	r2, #31
 80070b0:	801a      	strh	r2, [r3, #0]
 80070b2:	e003      	b.n	80070bc <main+0x158>
  		  	  }else{
  		  		POINT_COLOR = RED;
 80070b4:	4b6c      	ldr	r3, [pc, #432]	; (8007268 <main+0x304>)
 80070b6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80070ba:	801a      	strh	r2, [r3, #0]
  		  	  }
  		  	LCD_ShowString(6, 106, 228, 16, 16, (uint8_t*) l[2]);
 80070bc:	4b6d      	ldr	r3, [pc, #436]	; (8007274 <main+0x310>)
 80070be:	9301      	str	r3, [sp, #4]
 80070c0:	2310      	movs	r3, #16
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	2310      	movs	r3, #16
 80070c6:	22e4      	movs	r2, #228	; 0xe4
 80070c8:	216a      	movs	r1, #106	; 0x6a
 80070ca:	2006      	movs	r0, #6
 80070cc:	f7ff f97c 	bl	80063c8 <LCD_ShowString>
  		  	  if(l[3][0]==' '){
 80070d0:	4b66      	ldr	r3, [pc, #408]	; (800726c <main+0x308>)
 80070d2:	f893 3c00 	ldrb.w	r3, [r3, #3072]	; 0xc00
 80070d6:	2b20      	cmp	r3, #32
 80070d8:	d103      	bne.n	80070e2 <main+0x17e>
  		  		POINT_COLOR = BLUE;
 80070da:	4b63      	ldr	r3, [pc, #396]	; (8007268 <main+0x304>)
 80070dc:	221f      	movs	r2, #31
 80070de:	801a      	strh	r2, [r3, #0]
 80070e0:	e003      	b.n	80070ea <main+0x186>
  		  	  }else{
  		  		POINT_COLOR = RED;
 80070e2:	4b61      	ldr	r3, [pc, #388]	; (8007268 <main+0x304>)
 80070e4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80070e8:	801a      	strh	r2, [r3, #0]
  		  	  }
  		  	LCD_ShowString(6, 126, 228, 16, 16, (uint8_t*) l[3]);
 80070ea:	4b63      	ldr	r3, [pc, #396]	; (8007278 <main+0x314>)
 80070ec:	9301      	str	r3, [sp, #4]
 80070ee:	2310      	movs	r3, #16
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	2310      	movs	r3, #16
 80070f4:	22e4      	movs	r2, #228	; 0xe4
 80070f6:	217e      	movs	r1, #126	; 0x7e
 80070f8:	2006      	movs	r0, #6
 80070fa:	f7ff f965 	bl	80063c8 <LCD_ShowString>
  		  	  if(l[4][0]==' '){
 80070fe:	4b5b      	ldr	r3, [pc, #364]	; (800726c <main+0x308>)
 8007100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	2b20      	cmp	r3, #32
 8007108:	d103      	bne.n	8007112 <main+0x1ae>
  		  		POINT_COLOR = BLUE;
 800710a:	4b57      	ldr	r3, [pc, #348]	; (8007268 <main+0x304>)
 800710c:	221f      	movs	r2, #31
 800710e:	801a      	strh	r2, [r3, #0]
 8007110:	e003      	b.n	800711a <main+0x1b6>
  		  	  }else{
  		  		POINT_COLOR = RED;
 8007112:	4b55      	ldr	r3, [pc, #340]	; (8007268 <main+0x304>)
 8007114:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8007118:	801a      	strh	r2, [r3, #0]
  		  	  }
  		  	LCD_ShowString(6, 146, 228, 16, 16, (uint8_t*) l[4]);
 800711a:	4b58      	ldr	r3, [pc, #352]	; (800727c <main+0x318>)
 800711c:	9301      	str	r3, [sp, #4]
 800711e:	2310      	movs	r3, #16
 8007120:	9300      	str	r3, [sp, #0]
 8007122:	2310      	movs	r3, #16
 8007124:	22e4      	movs	r2, #228	; 0xe4
 8007126:	2192      	movs	r1, #146	; 0x92
 8007128:	2006      	movs	r0, #6
 800712a:	f7ff f94d 	bl	80063c8 <LCD_ShowString>
  		  	  if(l[5][0]==' '){
 800712e:	4b4f      	ldr	r3, [pc, #316]	; (800726c <main+0x308>)
 8007130:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	2b20      	cmp	r3, #32
 8007138:	d103      	bne.n	8007142 <main+0x1de>
  		  		POINT_COLOR = BLUE;
 800713a:	4b4b      	ldr	r3, [pc, #300]	; (8007268 <main+0x304>)
 800713c:	221f      	movs	r2, #31
 800713e:	801a      	strh	r2, [r3, #0]
 8007140:	e003      	b.n	800714a <main+0x1e6>
  		  	  }else{
  		  		POINT_COLOR = RED;
 8007142:	4b49      	ldr	r3, [pc, #292]	; (8007268 <main+0x304>)
 8007144:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8007148:	801a      	strh	r2, [r3, #0]
  		  	  }
  		  	LCD_ShowString(6, 166, 228, 16, 16, (uint8_t*) l[5]);
 800714a:	4b4d      	ldr	r3, [pc, #308]	; (8007280 <main+0x31c>)
 800714c:	9301      	str	r3, [sp, #4]
 800714e:	2310      	movs	r3, #16
 8007150:	9300      	str	r3, [sp, #0]
 8007152:	2310      	movs	r3, #16
 8007154:	22e4      	movs	r2, #228	; 0xe4
 8007156:	21a6      	movs	r1, #166	; 0xa6
 8007158:	2006      	movs	r0, #6
 800715a:	f7ff f935 	bl	80063c8 <LCD_ShowString>
  		  	  if(l[6][0]==' '){
 800715e:	4b43      	ldr	r3, [pc, #268]	; (800726c <main+0x308>)
 8007160:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	2b20      	cmp	r3, #32
 8007168:	d103      	bne.n	8007172 <main+0x20e>
  		  		POINT_COLOR = BLUE;
 800716a:	4b3f      	ldr	r3, [pc, #252]	; (8007268 <main+0x304>)
 800716c:	221f      	movs	r2, #31
 800716e:	801a      	strh	r2, [r3, #0]
 8007170:	e003      	b.n	800717a <main+0x216>
  		  	  }else{
  		  		POINT_COLOR = RED;
 8007172:	4b3d      	ldr	r3, [pc, #244]	; (8007268 <main+0x304>)
 8007174:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8007178:	801a      	strh	r2, [r3, #0]
  		  	  }
  		  	LCD_ShowString(6, 186, 228, 16, 16, (uint8_t*) l[6]);
 800717a:	4b42      	ldr	r3, [pc, #264]	; (8007284 <main+0x320>)
 800717c:	9301      	str	r3, [sp, #4]
 800717e:	2310      	movs	r3, #16
 8007180:	9300      	str	r3, [sp, #0]
 8007182:	2310      	movs	r3, #16
 8007184:	22e4      	movs	r2, #228	; 0xe4
 8007186:	21ba      	movs	r1, #186	; 0xba
 8007188:	2006      	movs	r0, #6
 800718a:	f7ff f91d 	bl	80063c8 <LCD_ShowString>
  		  	  if(l[7][0]==' '){
 800718e:	4b37      	ldr	r3, [pc, #220]	; (800726c <main+0x308>)
 8007190:	f503 53e0 	add.w	r3, r3, #7168	; 0x1c00
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	2b20      	cmp	r3, #32
 8007198:	d103      	bne.n	80071a2 <main+0x23e>
  		  		POINT_COLOR = BLUE;
 800719a:	4b33      	ldr	r3, [pc, #204]	; (8007268 <main+0x304>)
 800719c:	221f      	movs	r2, #31
 800719e:	801a      	strh	r2, [r3, #0]
 80071a0:	e003      	b.n	80071aa <main+0x246>
  		  	  }else{
  		  		POINT_COLOR = RED;
 80071a2:	4b31      	ldr	r3, [pc, #196]	; (8007268 <main+0x304>)
 80071a4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80071a8:	801a      	strh	r2, [r3, #0]
  		  	  }
  		  	LCD_ShowString(6, 206, 228, 16, 16, (uint8_t*) l[7]);
 80071aa:	4b37      	ldr	r3, [pc, #220]	; (8007288 <main+0x324>)
 80071ac:	9301      	str	r3, [sp, #4]
 80071ae:	2310      	movs	r3, #16
 80071b0:	9300      	str	r3, [sp, #0]
 80071b2:	2310      	movs	r3, #16
 80071b4:	22e4      	movs	r2, #228	; 0xe4
 80071b6:	21ce      	movs	r1, #206	; 0xce
 80071b8:	2006      	movs	r0, #6
 80071ba:	f7ff f905 	bl	80063c8 <LCD_ShowString>
  		  	  if(l[8][0]==' '){
 80071be:	4b2b      	ldr	r3, [pc, #172]	; (800726c <main+0x308>)
 80071c0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	2b20      	cmp	r3, #32
 80071c8:	d103      	bne.n	80071d2 <main+0x26e>
  		  		POINT_COLOR = BLUE;
 80071ca:	4b27      	ldr	r3, [pc, #156]	; (8007268 <main+0x304>)
 80071cc:	221f      	movs	r2, #31
 80071ce:	801a      	strh	r2, [r3, #0]
 80071d0:	e003      	b.n	80071da <main+0x276>
  		  	  }else{
  		  		POINT_COLOR = RED;
 80071d2:	4b25      	ldr	r3, [pc, #148]	; (8007268 <main+0x304>)
 80071d4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80071d8:	801a      	strh	r2, [r3, #0]
  		  	  }
  		  	LCD_ShowString(6, 226, 228, 16, 16, (uint8_t*) l[8]);
 80071da:	4b2c      	ldr	r3, [pc, #176]	; (800728c <main+0x328>)
 80071dc:	9301      	str	r3, [sp, #4]
 80071de:	2310      	movs	r3, #16
 80071e0:	9300      	str	r3, [sp, #0]
 80071e2:	2310      	movs	r3, #16
 80071e4:	22e4      	movs	r2, #228	; 0xe4
 80071e6:	21e2      	movs	r1, #226	; 0xe2
 80071e8:	2006      	movs	r0, #6
 80071ea:	f7ff f8ed 	bl	80063c8 <LCD_ShowString>
  		  	  if(l[9][0]==' '){
 80071ee:	4b1f      	ldr	r3, [pc, #124]	; (800726c <main+0x308>)
 80071f0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	2b20      	cmp	r3, #32
 80071f8:	d103      	bne.n	8007202 <main+0x29e>
  		  		POINT_COLOR = BLUE;
 80071fa:	4b1b      	ldr	r3, [pc, #108]	; (8007268 <main+0x304>)
 80071fc:	221f      	movs	r2, #31
 80071fe:	801a      	strh	r2, [r3, #0]
 8007200:	e003      	b.n	800720a <main+0x2a6>
  		  	  }else{
  		  		POINT_COLOR = RED;
 8007202:	4b19      	ldr	r3, [pc, #100]	; (8007268 <main+0x304>)
 8007204:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8007208:	801a      	strh	r2, [r3, #0]
  		  	  }
  		  	LCD_ShowString(6, 246, 228, 16, 16, (uint8_t*) l[9]);
 800720a:	4b21      	ldr	r3, [pc, #132]	; (8007290 <main+0x32c>)
 800720c:	9301      	str	r3, [sp, #4]
 800720e:	2310      	movs	r3, #16
 8007210:	9300      	str	r3, [sp, #0]
 8007212:	2310      	movs	r3, #16
 8007214:	22e4      	movs	r2, #228	; 0xe4
 8007216:	21f6      	movs	r1, #246	; 0xf6
 8007218:	2006      	movs	r0, #6
 800721a:	f7ff f8d5 	bl	80063c8 <LCD_ShowString>
  		  	  if(l[10][0]==' '){
 800721e:	4b13      	ldr	r3, [pc, #76]	; (800726c <main+0x308>)
 8007220:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	2b20      	cmp	r3, #32
 8007228:	d134      	bne.n	8007294 <main+0x330>
  		  		POINT_COLOR = BLUE;
 800722a:	4b0f      	ldr	r3, [pc, #60]	; (8007268 <main+0x304>)
 800722c:	221f      	movs	r2, #31
 800722e:	801a      	strh	r2, [r3, #0]
 8007230:	e034      	b.n	800729c <main+0x338>
 8007232:	bf00      	nop
 8007234:	20004a74 	.word	0x20004a74
 8007238:	20005ae8 	.word	0x20005ae8
 800723c:	20004e74 	.word	0x20004e74
 8007240:	20005b2c 	.word	0x20005b2c
 8007244:	20005aa0 	.word	0x20005aa0
 8007248:	40011000 	.word	0x40011000
 800724c:	20005a98 	.word	0x20005a98
 8007250:	2000026c 	.word	0x2000026c
 8007254:	0800bdb8 	.word	0x0800bdb8
 8007258:	2000066c 	.word	0x2000066c
 800725c:	0800bdc8 	.word	0x0800bdc8
 8007260:	20000a6c 	.word	0x20000a6c
 8007264:	0800bdd4 	.word	0x0800bdd4
 8007268:	20000268 	.word	0x20000268
 800726c:	20000e6c 	.word	0x20000e6c
 8007270:	2000126c 	.word	0x2000126c
 8007274:	2000166c 	.word	0x2000166c
 8007278:	20001a6c 	.word	0x20001a6c
 800727c:	20001e6c 	.word	0x20001e6c
 8007280:	2000226c 	.word	0x2000226c
 8007284:	2000266c 	.word	0x2000266c
 8007288:	20002a6c 	.word	0x20002a6c
 800728c:	20002e6c 	.word	0x20002e6c
 8007290:	2000326c 	.word	0x2000326c
  		  	  }else{
  		  		POINT_COLOR = RED;
 8007294:	4b5e      	ldr	r3, [pc, #376]	; (8007410 <main+0x4ac>)
 8007296:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800729a:	801a      	strh	r2, [r3, #0]
  		  	  }
  		  	LCD_ShowString(6, 266, 228, 16, 16, (uint8_t*) l[10]);
 800729c:	4b5d      	ldr	r3, [pc, #372]	; (8007414 <main+0x4b0>)
 800729e:	9301      	str	r3, [sp, #4]
 80072a0:	2310      	movs	r3, #16
 80072a2:	9300      	str	r3, [sp, #0]
 80072a4:	2310      	movs	r3, #16
 80072a6:	22e4      	movs	r2, #228	; 0xe4
 80072a8:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80072ac:	2006      	movs	r0, #6
 80072ae:	f7ff f88b 	bl	80063c8 <LCD_ShowString>
  		  	  if(l[11][0]==' '){
 80072b2:	4b59      	ldr	r3, [pc, #356]	; (8007418 <main+0x4b4>)
 80072b4:	f503 5330 	add.w	r3, r3, #11264	; 0x2c00
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	2b20      	cmp	r3, #32
 80072bc:	d103      	bne.n	80072c6 <main+0x362>
  		  		POINT_COLOR = BLUE;
 80072be:	4b54      	ldr	r3, [pc, #336]	; (8007410 <main+0x4ac>)
 80072c0:	221f      	movs	r2, #31
 80072c2:	801a      	strh	r2, [r3, #0]
 80072c4:	e003      	b.n	80072ce <main+0x36a>
  		  	  }else{
  		  		POINT_COLOR = RED;
 80072c6:	4b52      	ldr	r3, [pc, #328]	; (8007410 <main+0x4ac>)
 80072c8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80072cc:	801a      	strh	r2, [r3, #0]
  		  	  }
  		  	LCD_ShowString(6, 286, 228, 16, 16, (uint8_t*) l[11]);
 80072ce:	4b53      	ldr	r3, [pc, #332]	; (800741c <main+0x4b8>)
 80072d0:	9301      	str	r3, [sp, #4]
 80072d2:	2310      	movs	r3, #16
 80072d4:	9300      	str	r3, [sp, #0]
 80072d6:	2310      	movs	r3, #16
 80072d8:	22e4      	movs	r2, #228	; 0xe4
 80072da:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80072de:	2006      	movs	r0, #6
 80072e0:	f7ff f872 	bl	80063c8 <LCD_ShowString>
  	//LCD_ShowString(6,66+20*3,228,16,16,l[3]);

  	  	POINT_COLOR = GRAY;
 80072e4:	4b4a      	ldr	r3, [pc, #296]	; (8007410 <main+0x4ac>)
 80072e6:	f248 4230 	movw	r2, #33840	; 0x8430
 80072ea:	801a      	strh	r2, [r3, #0]
  	  	if(icnt<12){
 80072ec:	4b4c      	ldr	r3, [pc, #304]	; (8007420 <main+0x4bc>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2b0b      	cmp	r3, #11
 80072f2:	dc2c      	bgt.n	800734e <main+0x3ea>
  	  		int nl=0;
 80072f4:	2300      	movs	r3, #0
 80072f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  	  		for(int i=0;i<snumLength;i++){
 80072f8:	2300      	movs	r3, #0
 80072fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80072fc:	e020      	b.n	8007340 <main+0x3dc>
  	  			nl+=snum[i];
 80072fe:	4a49      	ldr	r2, [pc, #292]	; (8007424 <main+0x4c0>)
 8007300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007302:	4413      	add	r3, r2
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	461a      	mov	r2, r3
 8007308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800730a:	4413      	add	r3, r2
 800730c:	64fb      	str	r3, [r7, #76]	; 0x4c
  	  			LCD_DrawLine(6,65+20*nl,234,65+20*nl);
 800730e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007310:	b29b      	uxth	r3, r3
 8007312:	461a      	mov	r2, r3
 8007314:	0092      	lsls	r2, r2, #2
 8007316:	4413      	add	r3, r2
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	b29b      	uxth	r3, r3
 800731c:	3341      	adds	r3, #65	; 0x41
 800731e:	b299      	uxth	r1, r3
 8007320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007322:	b29b      	uxth	r3, r3
 8007324:	461a      	mov	r2, r3
 8007326:	0092      	lsls	r2, r2, #2
 8007328:	4413      	add	r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	b29b      	uxth	r3, r3
 800732e:	3341      	adds	r3, #65	; 0x41
 8007330:	b29b      	uxth	r3, r3
 8007332:	22ea      	movs	r2, #234	; 0xea
 8007334:	2006      	movs	r0, #6
 8007336:	f7fe feeb 	bl	8006110 <LCD_DrawLine>
  	  		for(int i=0;i<snumLength;i++){
 800733a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800733c:	3301      	adds	r3, #1
 800733e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007340:	4b39      	ldr	r3, [pc, #228]	; (8007428 <main+0x4c4>)
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	461a      	mov	r2, r3
 8007346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007348:	4293      	cmp	r3, r2
 800734a:	dbd8      	blt.n	80072fe <main+0x39a>
 800734c:	e634      	b.n	8006fb8 <main+0x54>
  	  		}
  	  	}else{
  	  		int nl=0;
 800734e:	2300      	movs	r3, #0
 8007350:	647b      	str	r3, [r7, #68]	; 0x44
  	  			nl+=snum[snumLength-1-i];
  	  			if(nl>12){
  	  				break;
  	  			}
  	  		}*/
  	  		int j=0;
 8007352:	2300      	movs	r3, #0
 8007354:	643b      	str	r3, [r7, #64]	; 0x40
  	  		for(int i=0;i<12;i++){
 8007356:	2300      	movs	r3, #0
 8007358:	63fb      	str	r3, [r7, #60]	; 0x3c
 800735a:	e055      	b.n	8007408 <main+0x4a4>
  	  			if(i==nl){
 800735c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800735e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007360:	429a      	cmp	r2, r3
 8007362:	d12e      	bne.n	80073c2 <main+0x45e>
  	  				POINT_COLOR=GRAY;
 8007364:	4b2a      	ldr	r3, [pc, #168]	; (8007410 <main+0x4ac>)
 8007366:	f248 4230 	movw	r2, #33840	; 0x8430
 800736a:	801a      	strh	r2, [r3, #0]
  	  				LCD_DrawLine(6,305-20*i,234,305-20*i);
 800736c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800736e:	b29b      	uxth	r3, r3
 8007370:	461a      	mov	r2, r3
 8007372:	0312      	lsls	r2, r2, #12
 8007374:	1ad2      	subs	r2, r2, r3
 8007376:	0092      	lsls	r2, r2, #2
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	b29b      	uxth	r3, r3
 800737e:	f203 1331 	addw	r3, r3, #305	; 0x131
 8007382:	b299      	uxth	r1, r3
 8007384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007386:	b29b      	uxth	r3, r3
 8007388:	461a      	mov	r2, r3
 800738a:	0312      	lsls	r2, r2, #12
 800738c:	1ad2      	subs	r2, r2, r3
 800738e:	0092      	lsls	r2, r2, #2
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	b29b      	uxth	r3, r3
 8007396:	f203 1331 	addw	r3, r3, #305	; 0x131
 800739a:	b29b      	uxth	r3, r3
 800739c:	22ea      	movs	r2, #234	; 0xea
 800739e:	2006      	movs	r0, #6
 80073a0:	f7fe feb6 	bl	8006110 <LCD_DrawLine>
  	  				nl+=snum[snumLength-1-j];
 80073a4:	4b20      	ldr	r3, [pc, #128]	; (8007428 <main+0x4c4>)
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	1e5a      	subs	r2, r3, #1
 80073aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	4a1d      	ldr	r2, [pc, #116]	; (8007424 <main+0x4c0>)
 80073b0:	5cd3      	ldrb	r3, [r2, r3]
 80073b2:	461a      	mov	r2, r3
 80073b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073b6:	4413      	add	r3, r2
 80073b8:	647b      	str	r3, [r7, #68]	; 0x44
  	  				j++;
 80073ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073bc:	3301      	adds	r3, #1
 80073be:	643b      	str	r3, [r7, #64]	; 0x40
 80073c0:	e01f      	b.n	8007402 <main+0x49e>
  	  			}else{
  	  				POINT_COLOR=WHITE;
 80073c2:	4b13      	ldr	r3, [pc, #76]	; (8007410 <main+0x4ac>)
 80073c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073c8:	801a      	strh	r2, [r3, #0]
  	  				LCD_DrawLine(6,305-20*i,234,305-20*i);
 80073ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	461a      	mov	r2, r3
 80073d0:	0312      	lsls	r2, r2, #12
 80073d2:	1ad2      	subs	r2, r2, r3
 80073d4:	0092      	lsls	r2, r2, #2
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	b29b      	uxth	r3, r3
 80073dc:	f203 1331 	addw	r3, r3, #305	; 0x131
 80073e0:	b299      	uxth	r1, r3
 80073e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	461a      	mov	r2, r3
 80073e8:	0312      	lsls	r2, r2, #12
 80073ea:	1ad2      	subs	r2, r2, r3
 80073ec:	0092      	lsls	r2, r2, #2
 80073ee:	1ad3      	subs	r3, r2, r3
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	f203 1331 	addw	r3, r3, #305	; 0x131
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	22ea      	movs	r2, #234	; 0xea
 80073fc:	2006      	movs	r0, #6
 80073fe:	f7fe fe87 	bl	8006110 <LCD_DrawLine>
  	  		for(int i=0;i<12;i++){
 8007402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007404:	3301      	adds	r3, #1
 8007406:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800740a:	2b0b      	cmp	r3, #11
 800740c:	dda6      	ble.n	800735c <main+0x3f8>
    {
 800740e:	e5d3      	b.n	8006fb8 <main+0x54>
 8007410:	20000268 	.word	0x20000268
 8007414:	2000366c 	.word	0x2000366c
 8007418:	20000e6c 	.word	0x20000e6c
 800741c:	20003a6c 	.word	0x20003a6c
 8007420:	2000466c 	.word	0x2000466c
 8007424:	20004670 	.word	0x20004670
 8007428:	20004a70 	.word	0x20004a70

0800742c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b090      	sub	sp, #64	; 0x40
 8007430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007432:	f107 0318 	add.w	r3, r7, #24
 8007436:	2228      	movs	r2, #40	; 0x28
 8007438:	2100      	movs	r1, #0
 800743a:	4618      	mov	r0, r3
 800743c:	f002 fc6a 	bl	8009d14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007440:	1d3b      	adds	r3, r7, #4
 8007442:	2200      	movs	r2, #0
 8007444:	601a      	str	r2, [r3, #0]
 8007446:	605a      	str	r2, [r3, #4]
 8007448:	609a      	str	r2, [r3, #8]
 800744a:	60da      	str	r2, [r3, #12]
 800744c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800744e:	2301      	movs	r3, #1
 8007450:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007452:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007456:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007458:	2300      	movs	r3, #0
 800745a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800745c:	2301      	movs	r3, #1
 800745e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007460:	2302      	movs	r3, #2
 8007462:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007464:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007468:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800746a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800746e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007470:	f107 0318 	add.w	r3, r7, #24
 8007474:	4618      	mov	r0, r3
 8007476:	f000 ffa7 	bl	80083c8 <HAL_RCC_OscConfig>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d001      	beq.n	8007484 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007480:	f000 f97e 	bl	8007780 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007484:	230f      	movs	r3, #15
 8007486:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007488:	2302      	movs	r3, #2
 800748a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800748c:	2300      	movs	r3, #0
 800748e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007490:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007494:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007496:	2300      	movs	r3, #0
 8007498:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800749a:	1d3b      	adds	r3, r7, #4
 800749c:	2102      	movs	r1, #2
 800749e:	4618      	mov	r0, r3
 80074a0:	f001 fa12 	bl	80088c8 <HAL_RCC_ClockConfig>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d001      	beq.n	80074ae <SystemClock_Config+0x82>
  {
    Error_Handler();
 80074aa:	f000 f969 	bl	8007780 <Error_Handler>
  }
}
 80074ae:	bf00      	nop
 80074b0:	3740      	adds	r7, #64	; 0x40
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
	...

080074b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b086      	sub	sp, #24
 80074bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80074be:	f107 0308 	add.w	r3, r7, #8
 80074c2:	2200      	movs	r2, #0
 80074c4:	601a      	str	r2, [r3, #0]
 80074c6:	605a      	str	r2, [r3, #4]
 80074c8:	609a      	str	r2, [r3, #8]
 80074ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80074cc:	463b      	mov	r3, r7
 80074ce:	2200      	movs	r2, #0
 80074d0:	601a      	str	r2, [r3, #0]
 80074d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80074d4:	4b1d      	ldr	r3, [pc, #116]	; (800754c <MX_TIM3_Init+0x94>)
 80074d6:	4a1e      	ldr	r2, [pc, #120]	; (8007550 <MX_TIM3_Init+0x98>)
 80074d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 80074da:	4b1c      	ldr	r3, [pc, #112]	; (800754c <MX_TIM3_Init+0x94>)
 80074dc:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80074e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80074e2:	4b1a      	ldr	r3, [pc, #104]	; (800754c <MX_TIM3_Init+0x94>)
 80074e4:	2200      	movs	r2, #0
 80074e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2499;
 80074e8:	4b18      	ldr	r3, [pc, #96]	; (800754c <MX_TIM3_Init+0x94>)
 80074ea:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80074ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80074f0:	4b16      	ldr	r3, [pc, #88]	; (800754c <MX_TIM3_Init+0x94>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80074f6:	4b15      	ldr	r3, [pc, #84]	; (800754c <MX_TIM3_Init+0x94>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80074fc:	4813      	ldr	r0, [pc, #76]	; (800754c <MX_TIM3_Init+0x94>)
 80074fe:	f001 fb7f 	bl	8008c00 <HAL_TIM_Base_Init>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d001      	beq.n	800750c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8007508:	f000 f93a 	bl	8007780 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800750c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007510:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007512:	f107 0308 	add.w	r3, r7, #8
 8007516:	4619      	mov	r1, r3
 8007518:	480c      	ldr	r0, [pc, #48]	; (800754c <MX_TIM3_Init+0x94>)
 800751a:	f001 fd29 	bl	8008f70 <HAL_TIM_ConfigClockSource>
 800751e:	4603      	mov	r3, r0
 8007520:	2b00      	cmp	r3, #0
 8007522:	d001      	beq.n	8007528 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8007524:	f000 f92c 	bl	8007780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007528:	2300      	movs	r3, #0
 800752a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800752c:	2300      	movs	r3, #0
 800752e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007530:	463b      	mov	r3, r7
 8007532:	4619      	mov	r1, r3
 8007534:	4805      	ldr	r0, [pc, #20]	; (800754c <MX_TIM3_Init+0x94>)
 8007536:	f001 ff0f 	bl	8009358 <HAL_TIMEx_MasterConfigSynchronization>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d001      	beq.n	8007544 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8007540:	f000 f91e 	bl	8007780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8007544:	bf00      	nop
 8007546:	3718      	adds	r7, #24
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	20005aa0 	.word	0x20005aa0
 8007550:	40000400 	.word	0x40000400

08007554 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007558:	4b11      	ldr	r3, [pc, #68]	; (80075a0 <MX_USART1_UART_Init+0x4c>)
 800755a:	4a12      	ldr	r2, [pc, #72]	; (80075a4 <MX_USART1_UART_Init+0x50>)
 800755c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800755e:	4b10      	ldr	r3, [pc, #64]	; (80075a0 <MX_USART1_UART_Init+0x4c>)
 8007560:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8007564:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007566:	4b0e      	ldr	r3, [pc, #56]	; (80075a0 <MX_USART1_UART_Init+0x4c>)
 8007568:	2200      	movs	r2, #0
 800756a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800756c:	4b0c      	ldr	r3, [pc, #48]	; (80075a0 <MX_USART1_UART_Init+0x4c>)
 800756e:	2200      	movs	r2, #0
 8007570:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007572:	4b0b      	ldr	r3, [pc, #44]	; (80075a0 <MX_USART1_UART_Init+0x4c>)
 8007574:	2200      	movs	r2, #0
 8007576:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007578:	4b09      	ldr	r3, [pc, #36]	; (80075a0 <MX_USART1_UART_Init+0x4c>)
 800757a:	220c      	movs	r2, #12
 800757c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800757e:	4b08      	ldr	r3, [pc, #32]	; (80075a0 <MX_USART1_UART_Init+0x4c>)
 8007580:	2200      	movs	r2, #0
 8007582:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007584:	4b06      	ldr	r3, [pc, #24]	; (80075a0 <MX_USART1_UART_Init+0x4c>)
 8007586:	2200      	movs	r2, #0
 8007588:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800758a:	4805      	ldr	r0, [pc, #20]	; (80075a0 <MX_USART1_UART_Init+0x4c>)
 800758c:	f001 ff62 	bl	8009454 <HAL_UART_Init>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d001      	beq.n	800759a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007596:	f000 f8f3 	bl	8007780 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800759a:	bf00      	nop
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	20005ae8 	.word	0x20005ae8
 80075a4:	40013800 	.word	0x40013800

080075a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80075ac:	4b11      	ldr	r3, [pc, #68]	; (80075f4 <MX_USART2_UART_Init+0x4c>)
 80075ae:	4a12      	ldr	r2, [pc, #72]	; (80075f8 <MX_USART2_UART_Init+0x50>)
 80075b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80075b2:	4b10      	ldr	r3, [pc, #64]	; (80075f4 <MX_USART2_UART_Init+0x4c>)
 80075b4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80075b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80075ba:	4b0e      	ldr	r3, [pc, #56]	; (80075f4 <MX_USART2_UART_Init+0x4c>)
 80075bc:	2200      	movs	r2, #0
 80075be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80075c0:	4b0c      	ldr	r3, [pc, #48]	; (80075f4 <MX_USART2_UART_Init+0x4c>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80075c6:	4b0b      	ldr	r3, [pc, #44]	; (80075f4 <MX_USART2_UART_Init+0x4c>)
 80075c8:	2200      	movs	r2, #0
 80075ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80075cc:	4b09      	ldr	r3, [pc, #36]	; (80075f4 <MX_USART2_UART_Init+0x4c>)
 80075ce:	220c      	movs	r2, #12
 80075d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80075d2:	4b08      	ldr	r3, [pc, #32]	; (80075f4 <MX_USART2_UART_Init+0x4c>)
 80075d4:	2200      	movs	r2, #0
 80075d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80075d8:	4b06      	ldr	r3, [pc, #24]	; (80075f4 <MX_USART2_UART_Init+0x4c>)
 80075da:	2200      	movs	r2, #0
 80075dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80075de:	4805      	ldr	r0, [pc, #20]	; (80075f4 <MX_USART2_UART_Init+0x4c>)
 80075e0:	f001 ff38 	bl	8009454 <HAL_UART_Init>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d001      	beq.n	80075ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80075ea:	f000 f8c9 	bl	8007780 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80075ee:	bf00      	nop
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	20005b2c 	.word	0x20005b2c
 80075f8:	40004400 	.word	0x40004400

080075fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b088      	sub	sp, #32
 8007600:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007602:	f107 0310 	add.w	r3, r7, #16
 8007606:	2200      	movs	r2, #0
 8007608:	601a      	str	r2, [r3, #0]
 800760a:	605a      	str	r2, [r3, #4]
 800760c:	609a      	str	r2, [r3, #8]
 800760e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007610:	4b56      	ldr	r3, [pc, #344]	; (800776c <MX_GPIO_Init+0x170>)
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	4a55      	ldr	r2, [pc, #340]	; (800776c <MX_GPIO_Init+0x170>)
 8007616:	f043 0320 	orr.w	r3, r3, #32
 800761a:	6193      	str	r3, [r2, #24]
 800761c:	4b53      	ldr	r3, [pc, #332]	; (800776c <MX_GPIO_Init+0x170>)
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	f003 0320 	and.w	r3, r3, #32
 8007624:	60fb      	str	r3, [r7, #12]
 8007626:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007628:	4b50      	ldr	r3, [pc, #320]	; (800776c <MX_GPIO_Init+0x170>)
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	4a4f      	ldr	r2, [pc, #316]	; (800776c <MX_GPIO_Init+0x170>)
 800762e:	f043 0304 	orr.w	r3, r3, #4
 8007632:	6193      	str	r3, [r2, #24]
 8007634:	4b4d      	ldr	r3, [pc, #308]	; (800776c <MX_GPIO_Init+0x170>)
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	f003 0304 	and.w	r3, r3, #4
 800763c:	60bb      	str	r3, [r7, #8]
 800763e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007640:	4b4a      	ldr	r3, [pc, #296]	; (800776c <MX_GPIO_Init+0x170>)
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	4a49      	ldr	r2, [pc, #292]	; (800776c <MX_GPIO_Init+0x170>)
 8007646:	f043 0310 	orr.w	r3, r3, #16
 800764a:	6193      	str	r3, [r2, #24]
 800764c:	4b47      	ldr	r3, [pc, #284]	; (800776c <MX_GPIO_Init+0x170>)
 800764e:	699b      	ldr	r3, [r3, #24]
 8007650:	f003 0310 	and.w	r3, r3, #16
 8007654:	607b      	str	r3, [r7, #4]
 8007656:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8007658:	2200      	movs	r2, #0
 800765a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800765e:	4844      	ldr	r0, [pc, #272]	; (8007770 <MX_GPIO_Init+0x174>)
 8007660:	f000 fe69 	bl	8008336 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8007664:	2200      	movs	r2, #0
 8007666:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800766a:	4842      	ldr	r0, [pc, #264]	; (8007774 <MX_GPIO_Init+0x178>)
 800766c:	f000 fe63 	bl	8008336 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8007670:	2200      	movs	r2, #0
 8007672:	2104      	movs	r1, #4
 8007674:	4840      	ldr	r0, [pc, #256]	; (8007778 <MX_GPIO_Init+0x17c>)
 8007676:	f000 fe5e 	bl	8008336 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Enable_Pin */
  GPIO_InitStruct.Pin = Enable_Pin;
 800767a:	2301      	movs	r3, #1
 800767c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800767e:	4b3f      	ldr	r3, [pc, #252]	; (800777c <MX_GPIO_Init+0x180>)
 8007680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007682:	2302      	movs	r3, #2
 8007684:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Enable_GPIO_Port, &GPIO_InitStruct);
 8007686:	f107 0310 	add.w	r3, r7, #16
 800768a:	4619      	mov	r1, r3
 800768c:	4838      	ldr	r0, [pc, #224]	; (8007770 <MX_GPIO_Init+0x174>)
 800768e:	f000 fcd1 	bl	8008034 <HAL_GPIO_Init>

  /*Configure GPIO pin : STATE_Pin */
  GPIO_InitStruct.Pin = STATE_Pin;
 8007692:	2310      	movs	r3, #16
 8007694:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007696:	2300      	movs	r3, #0
 8007698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800769a:	2300      	movs	r3, #0
 800769c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STATE_GPIO_Port, &GPIO_InitStruct);
 800769e:	f107 0310 	add.w	r3, r7, #16
 80076a2:	4619      	mov	r1, r3
 80076a4:	4833      	ldr	r0, [pc, #204]	; (8007774 <MX_GPIO_Init+0x178>)
 80076a6:	f000 fcc5 	bl	8008034 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY0_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 80076aa:	2320      	movs	r3, #32
 80076ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80076ae:	4b33      	ldr	r3, [pc, #204]	; (800777c <MX_GPIO_Init+0x180>)
 80076b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80076b2:	2301      	movs	r3, #1
 80076b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 80076b6:	f107 0310 	add.w	r3, r7, #16
 80076ba:	4619      	mov	r1, r3
 80076bc:	482d      	ldr	r0, [pc, #180]	; (8007774 <MX_GPIO_Init+0x178>)
 80076be:	f000 fcb9 	bl	8008034 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80076c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80076c8:	2301      	movs	r3, #1
 80076ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076cc:	2300      	movs	r3, #0
 80076ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076d0:	2302      	movs	r3, #2
 80076d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80076d4:	f107 0310 	add.w	r3, r7, #16
 80076d8:	4619      	mov	r1, r3
 80076da:	4825      	ldr	r0, [pc, #148]	; (8007770 <MX_GPIO_Init+0x174>)
 80076dc:	f000 fcaa 	bl	8008034 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY1_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 80076e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80076e6:	4b25      	ldr	r3, [pc, #148]	; (800777c <MX_GPIO_Init+0x180>)
 80076e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80076ea:	2301      	movs	r3, #1
 80076ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 80076ee:	f107 0310 	add.w	r3, r7, #16
 80076f2:	4619      	mov	r1, r3
 80076f4:	481e      	ldr	r0, [pc, #120]	; (8007770 <MX_GPIO_Init+0x174>)
 80076f6:	f000 fc9d 	bl	8008034 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_Pin */
  GPIO_InitStruct.Pin = EN_Pin;
 80076fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007700:	2301      	movs	r3, #1
 8007702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007704:	2300      	movs	r3, #0
 8007706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007708:	2302      	movs	r3, #2
 800770a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 800770c:	f107 0310 	add.w	r3, r7, #16
 8007710:	4619      	mov	r1, r3
 8007712:	4818      	ldr	r0, [pc, #96]	; (8007774 <MX_GPIO_Init+0x178>)
 8007714:	f000 fc8e 	bl	8008034 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8007718:	2304      	movs	r3, #4
 800771a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800771c:	2301      	movs	r3, #1
 800771e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007720:	2300      	movs	r3, #0
 8007722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007724:	2302      	movs	r3, #2
 8007726:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8007728:	f107 0310 	add.w	r3, r7, #16
 800772c:	4619      	mov	r1, r3
 800772e:	4812      	ldr	r0, [pc, #72]	; (8007778 <MX_GPIO_Init+0x17c>)
 8007730:	f000 fc80 	bl	8008034 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8007734:	2200      	movs	r2, #0
 8007736:	2102      	movs	r1, #2
 8007738:	2006      	movs	r0, #6
 800773a:	f000 fb3c 	bl	8007db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800773e:	2006      	movs	r0, #6
 8007740:	f000 fb55 	bl	8007dee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8007744:	2200      	movs	r2, #0
 8007746:	2102      	movs	r1, #2
 8007748:	2017      	movs	r0, #23
 800774a:	f000 fb34 	bl	8007db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800774e:	2017      	movs	r0, #23
 8007750:	f000 fb4d 	bl	8007dee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8007754:	2200      	movs	r2, #0
 8007756:	2102      	movs	r1, #2
 8007758:	2028      	movs	r0, #40	; 0x28
 800775a:	f000 fb2c 	bl	8007db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800775e:	2028      	movs	r0, #40	; 0x28
 8007760:	f000 fb45 	bl	8007dee <HAL_NVIC_EnableIRQ>

}
 8007764:	bf00      	nop
 8007766:	3720      	adds	r7, #32
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	40021000 	.word	0x40021000
 8007770:	40010800 	.word	0x40010800
 8007774:	40011000 	.word	0x40011000
 8007778:	40011400 	.word	0x40011400
 800777c:	10110000 	.word	0x10110000

08007780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007780:	b480      	push	{r7}
 8007782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007784:	bf00      	nop
 8007786:	46bd      	mov	sp, r7
 8007788:	bc80      	pop	{r7}
 800778a:	4770      	bx	lr

0800778c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007792:	4b15      	ldr	r3, [pc, #84]	; (80077e8 <HAL_MspInit+0x5c>)
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	4a14      	ldr	r2, [pc, #80]	; (80077e8 <HAL_MspInit+0x5c>)
 8007798:	f043 0301 	orr.w	r3, r3, #1
 800779c:	6193      	str	r3, [r2, #24]
 800779e:	4b12      	ldr	r3, [pc, #72]	; (80077e8 <HAL_MspInit+0x5c>)
 80077a0:	699b      	ldr	r3, [r3, #24]
 80077a2:	f003 0301 	and.w	r3, r3, #1
 80077a6:	60bb      	str	r3, [r7, #8]
 80077a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80077aa:	4b0f      	ldr	r3, [pc, #60]	; (80077e8 <HAL_MspInit+0x5c>)
 80077ac:	69db      	ldr	r3, [r3, #28]
 80077ae:	4a0e      	ldr	r2, [pc, #56]	; (80077e8 <HAL_MspInit+0x5c>)
 80077b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077b4:	61d3      	str	r3, [r2, #28]
 80077b6:	4b0c      	ldr	r3, [pc, #48]	; (80077e8 <HAL_MspInit+0x5c>)
 80077b8:	69db      	ldr	r3, [r3, #28]
 80077ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077be:	607b      	str	r3, [r7, #4]
 80077c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80077c2:	4b0a      	ldr	r3, [pc, #40]	; (80077ec <HAL_MspInit+0x60>)
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	60fb      	str	r3, [r7, #12]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80077ce:	60fb      	str	r3, [r7, #12]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80077d6:	60fb      	str	r3, [r7, #12]
 80077d8:	4a04      	ldr	r2, [pc, #16]	; (80077ec <HAL_MspInit+0x60>)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80077de:	bf00      	nop
 80077e0:	3714      	adds	r7, #20
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bc80      	pop	{r7}
 80077e6:	4770      	bx	lr
 80077e8:	40021000 	.word	0x40021000
 80077ec:	40010000 	.word	0x40010000

080077f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a0d      	ldr	r2, [pc, #52]	; (8007834 <HAL_TIM_Base_MspInit+0x44>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d113      	bne.n	800782a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007802:	4b0d      	ldr	r3, [pc, #52]	; (8007838 <HAL_TIM_Base_MspInit+0x48>)
 8007804:	69db      	ldr	r3, [r3, #28]
 8007806:	4a0c      	ldr	r2, [pc, #48]	; (8007838 <HAL_TIM_Base_MspInit+0x48>)
 8007808:	f043 0302 	orr.w	r3, r3, #2
 800780c:	61d3      	str	r3, [r2, #28]
 800780e:	4b0a      	ldr	r3, [pc, #40]	; (8007838 <HAL_TIM_Base_MspInit+0x48>)
 8007810:	69db      	ldr	r3, [r3, #28]
 8007812:	f003 0302 	and.w	r3, r3, #2
 8007816:	60fb      	str	r3, [r7, #12]
 8007818:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 800781a:	2200      	movs	r2, #0
 800781c:	2103      	movs	r1, #3
 800781e:	201d      	movs	r0, #29
 8007820:	f000 fac9 	bl	8007db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007824:	201d      	movs	r0, #29
 8007826:	f000 fae2 	bl	8007dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800782a:	bf00      	nop
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	40000400 	.word	0x40000400
 8007838:	40021000 	.word	0x40021000

0800783c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b08a      	sub	sp, #40	; 0x28
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007844:	f107 0318 	add.w	r3, r7, #24
 8007848:	2200      	movs	r2, #0
 800784a:	601a      	str	r2, [r3, #0]
 800784c:	605a      	str	r2, [r3, #4]
 800784e:	609a      	str	r2, [r3, #8]
 8007850:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a3f      	ldr	r2, [pc, #252]	; (8007954 <HAL_UART_MspInit+0x118>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d13a      	bne.n	80078d2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800785c:	4b3e      	ldr	r3, [pc, #248]	; (8007958 <HAL_UART_MspInit+0x11c>)
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	4a3d      	ldr	r2, [pc, #244]	; (8007958 <HAL_UART_MspInit+0x11c>)
 8007862:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007866:	6193      	str	r3, [r2, #24]
 8007868:	4b3b      	ldr	r3, [pc, #236]	; (8007958 <HAL_UART_MspInit+0x11c>)
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007870:	617b      	str	r3, [r7, #20]
 8007872:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007874:	4b38      	ldr	r3, [pc, #224]	; (8007958 <HAL_UART_MspInit+0x11c>)
 8007876:	699b      	ldr	r3, [r3, #24]
 8007878:	4a37      	ldr	r2, [pc, #220]	; (8007958 <HAL_UART_MspInit+0x11c>)
 800787a:	f043 0304 	orr.w	r3, r3, #4
 800787e:	6193      	str	r3, [r2, #24]
 8007880:	4b35      	ldr	r3, [pc, #212]	; (8007958 <HAL_UART_MspInit+0x11c>)
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	f003 0304 	and.w	r3, r3, #4
 8007888:	613b      	str	r3, [r7, #16]
 800788a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800788c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007892:	2302      	movs	r3, #2
 8007894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007896:	2303      	movs	r3, #3
 8007898:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800789a:	f107 0318 	add.w	r3, r7, #24
 800789e:	4619      	mov	r1, r3
 80078a0:	482e      	ldr	r0, [pc, #184]	; (800795c <HAL_UART_MspInit+0x120>)
 80078a2:	f000 fbc7 	bl	8008034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80078a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80078ac:	2300      	movs	r3, #0
 80078ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078b0:	2300      	movs	r3, #0
 80078b2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078b4:	f107 0318 	add.w	r3, r7, #24
 80078b8:	4619      	mov	r1, r3
 80078ba:	4828      	ldr	r0, [pc, #160]	; (800795c <HAL_UART_MspInit+0x120>)
 80078bc:	f000 fbba 	bl	8008034 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80078c0:	2200      	movs	r2, #0
 80078c2:	2101      	movs	r1, #1
 80078c4:	2025      	movs	r0, #37	; 0x25
 80078c6:	f000 fa76 	bl	8007db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80078ca:	2025      	movs	r0, #37	; 0x25
 80078cc:	f000 fa8f 	bl	8007dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80078d0:	e03c      	b.n	800794c <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a22      	ldr	r2, [pc, #136]	; (8007960 <HAL_UART_MspInit+0x124>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d137      	bne.n	800794c <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 80078dc:	4b1e      	ldr	r3, [pc, #120]	; (8007958 <HAL_UART_MspInit+0x11c>)
 80078de:	69db      	ldr	r3, [r3, #28]
 80078e0:	4a1d      	ldr	r2, [pc, #116]	; (8007958 <HAL_UART_MspInit+0x11c>)
 80078e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078e6:	61d3      	str	r3, [r2, #28]
 80078e8:	4b1b      	ldr	r3, [pc, #108]	; (8007958 <HAL_UART_MspInit+0x11c>)
 80078ea:	69db      	ldr	r3, [r3, #28]
 80078ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078f0:	60fb      	str	r3, [r7, #12]
 80078f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078f4:	4b18      	ldr	r3, [pc, #96]	; (8007958 <HAL_UART_MspInit+0x11c>)
 80078f6:	699b      	ldr	r3, [r3, #24]
 80078f8:	4a17      	ldr	r2, [pc, #92]	; (8007958 <HAL_UART_MspInit+0x11c>)
 80078fa:	f043 0304 	orr.w	r3, r3, #4
 80078fe:	6193      	str	r3, [r2, #24]
 8007900:	4b15      	ldr	r3, [pc, #84]	; (8007958 <HAL_UART_MspInit+0x11c>)
 8007902:	699b      	ldr	r3, [r3, #24]
 8007904:	f003 0304 	and.w	r3, r3, #4
 8007908:	60bb      	str	r3, [r7, #8]
 800790a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800790c:	2304      	movs	r3, #4
 800790e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007910:	2302      	movs	r3, #2
 8007912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007914:	2303      	movs	r3, #3
 8007916:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007918:	f107 0318 	add.w	r3, r7, #24
 800791c:	4619      	mov	r1, r3
 800791e:	480f      	ldr	r0, [pc, #60]	; (800795c <HAL_UART_MspInit+0x120>)
 8007920:	f000 fb88 	bl	8008034 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007924:	2308      	movs	r3, #8
 8007926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007928:	2300      	movs	r3, #0
 800792a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800792c:	2300      	movs	r3, #0
 800792e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007930:	f107 0318 	add.w	r3, r7, #24
 8007934:	4619      	mov	r1, r3
 8007936:	4809      	ldr	r0, [pc, #36]	; (800795c <HAL_UART_MspInit+0x120>)
 8007938:	f000 fb7c 	bl	8008034 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800793c:	2200      	movs	r2, #0
 800793e:	2101      	movs	r1, #1
 8007940:	2026      	movs	r0, #38	; 0x26
 8007942:	f000 fa38 	bl	8007db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007946:	2026      	movs	r0, #38	; 0x26
 8007948:	f000 fa51 	bl	8007dee <HAL_NVIC_EnableIRQ>
}
 800794c:	bf00      	nop
 800794e:	3728      	adds	r7, #40	; 0x28
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	40013800 	.word	0x40013800
 8007958:	40021000 	.word	0x40021000
 800795c:	40010800 	.word	0x40010800
 8007960:	40004400 	.word	0x40004400

08007964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007964:	b480      	push	{r7}
 8007966:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007968:	bf00      	nop
 800796a:	46bd      	mov	sp, r7
 800796c:	bc80      	pop	{r7}
 800796e:	4770      	bx	lr

08007970 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007970:	b480      	push	{r7}
 8007972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007974:	e7fe      	b.n	8007974 <HardFault_Handler+0x4>

08007976 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007976:	b480      	push	{r7}
 8007978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800797a:	e7fe      	b.n	800797a <MemManage_Handler+0x4>

0800797c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800797c:	b480      	push	{r7}
 800797e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007980:	e7fe      	b.n	8007980 <BusFault_Handler+0x4>

08007982 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007982:	b480      	push	{r7}
 8007984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007986:	e7fe      	b.n	8007986 <UsageFault_Handler+0x4>

08007988 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007988:	b480      	push	{r7}
 800798a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800798c:	bf00      	nop
 800798e:	46bd      	mov	sp, r7
 8007990:	bc80      	pop	{r7}
 8007992:	4770      	bx	lr

08007994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007994:	b480      	push	{r7}
 8007996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007998:	bf00      	nop
 800799a:	46bd      	mov	sp, r7
 800799c:	bc80      	pop	{r7}
 800799e:	4770      	bx	lr

080079a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80079a0:	b480      	push	{r7}
 80079a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80079a4:	bf00      	nop
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bc80      	pop	{r7}
 80079aa:	4770      	bx	lr

080079ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80079b0:	f000 f8ec 	bl	8007b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80079b4:	bf00      	nop
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80079bc:	2001      	movs	r0, #1
 80079be:	f000 fceb 	bl	8008398 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80079c2:	bf00      	nop
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80079ca:	2020      	movs	r0, #32
 80079cc:	f000 fce4 	bl	8008398 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80079d0:	bf00      	nop
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b08a      	sub	sp, #40	; 0x28
 80079d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80079da:	4816      	ldr	r0, [pc, #88]	; (8007a34 <TIM3_IRQHandler+0x60>)
 80079dc:	f001 f9c0 	bl	8008d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  char msg[30];
  if(HAL_GPIO_ReadPin(EN_GPIO_Port, EN_Pin) == GPIO_PIN_RESET)
 80079e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80079e4:	4814      	ldr	r0, [pc, #80]	; (8007a38 <TIM3_IRQHandler+0x64>)
 80079e6:	f000 fc8f 	bl	8008308 <HAL_GPIO_ReadPin>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d106      	bne.n	80079fe <TIM3_IRQHandler+0x2a>
  {
	  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin,GPIO_PIN_SET);
 80079f0:	2201      	movs	r2, #1
 80079f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80079f6:	4811      	ldr	r0, [pc, #68]	; (8007a3c <TIM3_IRQHandler+0x68>)
 80079f8:	f000 fc9d 	bl	8008336 <HAL_GPIO_WritePin>
//	  			  HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
	  		  }
  }

  /* USER CODE END TIM3_IRQn 1 */
}
 80079fc:	e016      	b.n	8007a2c <TIM3_IRQHandler+0x58>
	  int state = HAL_GPIO_ReadPin(STATE_GPIO_Port, STATE_Pin);
 80079fe:	2110      	movs	r1, #16
 8007a00:	480d      	ldr	r0, [pc, #52]	; (8007a38 <TIM3_IRQHandler+0x64>)
 8007a02:	f000 fc81 	bl	8008308 <HAL_GPIO_ReadPin>
 8007a06:	4603      	mov	r3, r0
 8007a08:	627b      	str	r3, [r7, #36]	; 0x24
	  		  if(state == 0)
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d104      	bne.n	8007a1a <TIM3_IRQHandler+0x46>
	  			  HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8007a10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a14:	4809      	ldr	r0, [pc, #36]	; (8007a3c <TIM3_IRQHandler+0x68>)
 8007a16:	f000 fca6 	bl	8008366 <HAL_GPIO_TogglePin>
	  		  if(state == 1)
 8007a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d105      	bne.n	8007a2c <TIM3_IRQHandler+0x58>
	  			  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin,GPIO_PIN_RESET);
 8007a20:	2200      	movs	r2, #0
 8007a22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a26:	4805      	ldr	r0, [pc, #20]	; (8007a3c <TIM3_IRQHandler+0x68>)
 8007a28:	f000 fc85 	bl	8008336 <HAL_GPIO_WritePin>
}
 8007a2c:	bf00      	nop
 8007a2e:	3728      	adds	r7, #40	; 0x28
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	20005aa0 	.word	0x20005aa0
 8007a38:	40011000 	.word	0x40011000
 8007a3c:	40010800 	.word	0x40010800

08007a40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8007a44:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007a48:	f000 fca6 	bl	8008398 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007a4c:	bf00      	nop
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007a58:	4b11      	ldr	r3, [pc, #68]	; (8007aa0 <_sbrk+0x50>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d102      	bne.n	8007a66 <_sbrk+0x16>
		heap_end = &end;
 8007a60:	4b0f      	ldr	r3, [pc, #60]	; (8007aa0 <_sbrk+0x50>)
 8007a62:	4a10      	ldr	r2, [pc, #64]	; (8007aa4 <_sbrk+0x54>)
 8007a64:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007a66:	4b0e      	ldr	r3, [pc, #56]	; (8007aa0 <_sbrk+0x50>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007a6c:	4b0c      	ldr	r3, [pc, #48]	; (8007aa0 <_sbrk+0x50>)
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4413      	add	r3, r2
 8007a74:	466a      	mov	r2, sp
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d907      	bls.n	8007a8a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007a7a:	f002 f921 	bl	8009cc0 <__errno>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	230c      	movs	r3, #12
 8007a82:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007a84:	f04f 33ff 	mov.w	r3, #4294967295
 8007a88:	e006      	b.n	8007a98 <_sbrk+0x48>
	}

	heap_end += incr;
 8007a8a:	4b05      	ldr	r3, [pc, #20]	; (8007aa0 <_sbrk+0x50>)
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4413      	add	r3, r2
 8007a92:	4a03      	ldr	r2, [pc, #12]	; (8007aa0 <_sbrk+0x50>)
 8007a94:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007a96:	68fb      	ldr	r3, [r7, #12]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	20005a7c 	.word	0x20005a7c
 8007aa4:	20005b78 	.word	0x20005b78

08007aa8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007aac:	bf00      	nop
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bc80      	pop	{r7}
 8007ab2:	4770      	bx	lr

08007ab4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8007ab4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8007ab6:	e003      	b.n	8007ac0 <LoopCopyDataInit>

08007ab8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8007ab8:	4b0b      	ldr	r3, [pc, #44]	; (8007ae8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8007aba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8007abc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8007abe:	3104      	adds	r1, #4

08007ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8007ac0:	480a      	ldr	r0, [pc, #40]	; (8007aec <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8007ac2:	4b0b      	ldr	r3, [pc, #44]	; (8007af0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8007ac4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8007ac6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8007ac8:	d3f6      	bcc.n	8007ab8 <CopyDataInit>
  ldr r2, =_sbss
 8007aca:	4a0a      	ldr	r2, [pc, #40]	; (8007af4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8007acc:	e002      	b.n	8007ad4 <LoopFillZerobss>

08007ace <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8007ace:	2300      	movs	r3, #0
  str r3, [r2], #4
 8007ad0:	f842 3b04 	str.w	r3, [r2], #4

08007ad4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8007ad4:	4b08      	ldr	r3, [pc, #32]	; (8007af8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8007ad6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8007ad8:	d3f9      	bcc.n	8007ace <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007ada:	f7ff ffe5 	bl	8007aa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007ade:	f002 f8f5 	bl	8009ccc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007ae2:	f7ff fa3f 	bl	8006f64 <main>
  bx lr
 8007ae6:	4770      	bx	lr
  ldr r3, =_sidata
 8007ae8:	0800d830 	.word	0x0800d830
  ldr r0, =_sdata
 8007aec:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8007af0:	2000024c 	.word	0x2000024c
  ldr r2, =_sbss
 8007af4:	2000024c 	.word	0x2000024c
  ldr r3, = _ebss
 8007af8:	20005b74 	.word	0x20005b74

08007afc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007afc:	e7fe      	b.n	8007afc <ADC1_2_IRQHandler>
	...

08007b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007b04:	4b08      	ldr	r3, [pc, #32]	; (8007b28 <HAL_Init+0x28>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a07      	ldr	r2, [pc, #28]	; (8007b28 <HAL_Init+0x28>)
 8007b0a:	f043 0310 	orr.w	r3, r3, #16
 8007b0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007b10:	2003      	movs	r0, #3
 8007b12:	f000 f945 	bl	8007da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007b16:	2000      	movs	r0, #0
 8007b18:	f000 f808 	bl	8007b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007b1c:	f7ff fe36 	bl	800778c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	40022000 	.word	0x40022000

08007b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007b34:	4b12      	ldr	r3, [pc, #72]	; (8007b80 <HAL_InitTick+0x54>)
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	4b12      	ldr	r3, [pc, #72]	; (8007b84 <HAL_InitTick+0x58>)
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f000 f95d 	bl	8007e0a <HAL_SYSTICK_Config>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d001      	beq.n	8007b5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	e00e      	b.n	8007b78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2b0f      	cmp	r3, #15
 8007b5e:	d80a      	bhi.n	8007b76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007b60:	2200      	movs	r2, #0
 8007b62:	6879      	ldr	r1, [r7, #4]
 8007b64:	f04f 30ff 	mov.w	r0, #4294967295
 8007b68:	f000 f925 	bl	8007db6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007b6c:	4a06      	ldr	r2, [pc, #24]	; (8007b88 <HAL_InitTick+0x5c>)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	e000      	b.n	8007b78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	20000070 	.word	0x20000070
 8007b84:	20000078 	.word	0x20000078
 8007b88:	20000074 	.word	0x20000074

08007b8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007b90:	4b05      	ldr	r3, [pc, #20]	; (8007ba8 <HAL_IncTick+0x1c>)
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	461a      	mov	r2, r3
 8007b96:	4b05      	ldr	r3, [pc, #20]	; (8007bac <HAL_IncTick+0x20>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	4a03      	ldr	r2, [pc, #12]	; (8007bac <HAL_IncTick+0x20>)
 8007b9e:	6013      	str	r3, [r2, #0]
}
 8007ba0:	bf00      	nop
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bc80      	pop	{r7}
 8007ba6:	4770      	bx	lr
 8007ba8:	20000078 	.word	0x20000078
 8007bac:	20005b6c 	.word	0x20005b6c

08007bb0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8007bb4:	4b02      	ldr	r3, [pc, #8]	; (8007bc0 <HAL_GetTick+0x10>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bc80      	pop	{r7}
 8007bbe:	4770      	bx	lr
 8007bc0:	20005b6c 	.word	0x20005b6c

08007bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007bcc:	f7ff fff0 	bl	8007bb0 <HAL_GetTick>
 8007bd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bdc:	d005      	beq.n	8007bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007bde:	4b09      	ldr	r3, [pc, #36]	; (8007c04 <HAL_Delay+0x40>)
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	461a      	mov	r2, r3
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	4413      	add	r3, r2
 8007be8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007bea:	bf00      	nop
 8007bec:	f7ff ffe0 	bl	8007bb0 <HAL_GetTick>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d8f7      	bhi.n	8007bec <HAL_Delay+0x28>
  {
  }
}
 8007bfc:	bf00      	nop
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	20000078 	.word	0x20000078

08007c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f003 0307 	and.w	r3, r3, #7
 8007c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007c18:	4b0c      	ldr	r3, [pc, #48]	; (8007c4c <__NVIC_SetPriorityGrouping+0x44>)
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007c1e:	68ba      	ldr	r2, [r7, #8]
 8007c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007c24:	4013      	ands	r3, r2
 8007c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007c30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007c3a:	4a04      	ldr	r2, [pc, #16]	; (8007c4c <__NVIC_SetPriorityGrouping+0x44>)
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	60d3      	str	r3, [r2, #12]
}
 8007c40:	bf00      	nop
 8007c42:	3714      	adds	r7, #20
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bc80      	pop	{r7}
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	e000ed00 	.word	0xe000ed00

08007c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007c50:	b480      	push	{r7}
 8007c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007c54:	4b04      	ldr	r3, [pc, #16]	; (8007c68 <__NVIC_GetPriorityGrouping+0x18>)
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	0a1b      	lsrs	r3, r3, #8
 8007c5a:	f003 0307 	and.w	r3, r3, #7
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bc80      	pop	{r7}
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	e000ed00 	.word	0xe000ed00

08007c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	4603      	mov	r3, r0
 8007c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	db0b      	blt.n	8007c96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c7e:	79fb      	ldrb	r3, [r7, #7]
 8007c80:	f003 021f 	and.w	r2, r3, #31
 8007c84:	4906      	ldr	r1, [pc, #24]	; (8007ca0 <__NVIC_EnableIRQ+0x34>)
 8007c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c8a:	095b      	lsrs	r3, r3, #5
 8007c8c:	2001      	movs	r0, #1
 8007c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8007c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007c96:	bf00      	nop
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bc80      	pop	{r7}
 8007c9e:	4770      	bx	lr
 8007ca0:	e000e100 	.word	0xe000e100

08007ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	4603      	mov	r3, r0
 8007cac:	6039      	str	r1, [r7, #0]
 8007cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	db0a      	blt.n	8007cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	b2da      	uxtb	r2, r3
 8007cbc:	490c      	ldr	r1, [pc, #48]	; (8007cf0 <__NVIC_SetPriority+0x4c>)
 8007cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cc2:	0112      	lsls	r2, r2, #4
 8007cc4:	b2d2      	uxtb	r2, r2
 8007cc6:	440b      	add	r3, r1
 8007cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007ccc:	e00a      	b.n	8007ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	b2da      	uxtb	r2, r3
 8007cd2:	4908      	ldr	r1, [pc, #32]	; (8007cf4 <__NVIC_SetPriority+0x50>)
 8007cd4:	79fb      	ldrb	r3, [r7, #7]
 8007cd6:	f003 030f 	and.w	r3, r3, #15
 8007cda:	3b04      	subs	r3, #4
 8007cdc:	0112      	lsls	r2, r2, #4
 8007cde:	b2d2      	uxtb	r2, r2
 8007ce0:	440b      	add	r3, r1
 8007ce2:	761a      	strb	r2, [r3, #24]
}
 8007ce4:	bf00      	nop
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bc80      	pop	{r7}
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	e000e100 	.word	0xe000e100
 8007cf4:	e000ed00 	.word	0xe000ed00

08007cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b089      	sub	sp, #36	; 0x24
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f003 0307 	and.w	r3, r3, #7
 8007d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	f1c3 0307 	rsb	r3, r3, #7
 8007d12:	2b04      	cmp	r3, #4
 8007d14:	bf28      	it	cs
 8007d16:	2304      	movcs	r3, #4
 8007d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	3304      	adds	r3, #4
 8007d1e:	2b06      	cmp	r3, #6
 8007d20:	d902      	bls.n	8007d28 <NVIC_EncodePriority+0x30>
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	3b03      	subs	r3, #3
 8007d26:	e000      	b.n	8007d2a <NVIC_EncodePriority+0x32>
 8007d28:	2300      	movs	r3, #0
 8007d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	fa02 f303 	lsl.w	r3, r2, r3
 8007d36:	43da      	mvns	r2, r3
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	401a      	ands	r2, r3
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007d40:	f04f 31ff 	mov.w	r1, #4294967295
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	fa01 f303 	lsl.w	r3, r1, r3
 8007d4a:	43d9      	mvns	r1, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d50:	4313      	orrs	r3, r2
         );
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3724      	adds	r7, #36	; 0x24
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bc80      	pop	{r7}
 8007d5a:	4770      	bx	lr

08007d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	3b01      	subs	r3, #1
 8007d68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d6c:	d301      	bcc.n	8007d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e00f      	b.n	8007d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007d72:	4a0a      	ldr	r2, [pc, #40]	; (8007d9c <SysTick_Config+0x40>)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	3b01      	subs	r3, #1
 8007d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007d7a:	210f      	movs	r1, #15
 8007d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d80:	f7ff ff90 	bl	8007ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007d84:	4b05      	ldr	r3, [pc, #20]	; (8007d9c <SysTick_Config+0x40>)
 8007d86:	2200      	movs	r2, #0
 8007d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007d8a:	4b04      	ldr	r3, [pc, #16]	; (8007d9c <SysTick_Config+0x40>)
 8007d8c:	2207      	movs	r2, #7
 8007d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3708      	adds	r7, #8
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	e000e010 	.word	0xe000e010

08007da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f7ff ff2d 	bl	8007c08 <__NVIC_SetPriorityGrouping>
}
 8007dae:	bf00      	nop
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b086      	sub	sp, #24
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	60b9      	str	r1, [r7, #8]
 8007dc0:	607a      	str	r2, [r7, #4]
 8007dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007dc8:	f7ff ff42 	bl	8007c50 <__NVIC_GetPriorityGrouping>
 8007dcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	68b9      	ldr	r1, [r7, #8]
 8007dd2:	6978      	ldr	r0, [r7, #20]
 8007dd4:	f7ff ff90 	bl	8007cf8 <NVIC_EncodePriority>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007dde:	4611      	mov	r1, r2
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7ff ff5f 	bl	8007ca4 <__NVIC_SetPriority>
}
 8007de6:	bf00      	nop
 8007de8:	3718      	adds	r7, #24
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}

08007dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b082      	sub	sp, #8
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	4603      	mov	r3, r0
 8007df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f7ff ff35 	bl	8007c6c <__NVIC_EnableIRQ>
}
 8007e02:	bf00      	nop
 8007e04:	3708      	adds	r7, #8
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b082      	sub	sp, #8
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f7ff ffa2 	bl	8007d5c <SysTick_Config>
 8007e18:	4603      	mov	r3, r0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
	...

08007e24 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d005      	beq.n	8007e46 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2204      	movs	r2, #4
 8007e3e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	73fb      	strb	r3, [r7, #15]
 8007e44:	e0d6      	b.n	8007ff4 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f022 020e 	bic.w	r2, r2, #14
 8007e54:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f022 0201 	bic.w	r2, r2, #1
 8007e64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	4b64      	ldr	r3, [pc, #400]	; (8008000 <HAL_DMA_Abort_IT+0x1dc>)
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d958      	bls.n	8007f24 <HAL_DMA_Abort_IT+0x100>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a63      	ldr	r2, [pc, #396]	; (8008004 <HAL_DMA_Abort_IT+0x1e0>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d04f      	beq.n	8007f1c <HAL_DMA_Abort_IT+0xf8>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a61      	ldr	r2, [pc, #388]	; (8008008 <HAL_DMA_Abort_IT+0x1e4>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d048      	beq.n	8007f18 <HAL_DMA_Abort_IT+0xf4>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a60      	ldr	r2, [pc, #384]	; (800800c <HAL_DMA_Abort_IT+0x1e8>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d040      	beq.n	8007f12 <HAL_DMA_Abort_IT+0xee>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a5e      	ldr	r2, [pc, #376]	; (8008010 <HAL_DMA_Abort_IT+0x1ec>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d038      	beq.n	8007f0c <HAL_DMA_Abort_IT+0xe8>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a5d      	ldr	r2, [pc, #372]	; (8008014 <HAL_DMA_Abort_IT+0x1f0>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d030      	beq.n	8007f06 <HAL_DMA_Abort_IT+0xe2>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a5b      	ldr	r2, [pc, #364]	; (8008018 <HAL_DMA_Abort_IT+0x1f4>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d028      	beq.n	8007f00 <HAL_DMA_Abort_IT+0xdc>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a53      	ldr	r2, [pc, #332]	; (8008000 <HAL_DMA_Abort_IT+0x1dc>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d020      	beq.n	8007efa <HAL_DMA_Abort_IT+0xd6>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a57      	ldr	r2, [pc, #348]	; (800801c <HAL_DMA_Abort_IT+0x1f8>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d019      	beq.n	8007ef6 <HAL_DMA_Abort_IT+0xd2>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a56      	ldr	r2, [pc, #344]	; (8008020 <HAL_DMA_Abort_IT+0x1fc>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d012      	beq.n	8007ef2 <HAL_DMA_Abort_IT+0xce>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a54      	ldr	r2, [pc, #336]	; (8008024 <HAL_DMA_Abort_IT+0x200>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d00a      	beq.n	8007eec <HAL_DMA_Abort_IT+0xc8>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a53      	ldr	r2, [pc, #332]	; (8008028 <HAL_DMA_Abort_IT+0x204>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d102      	bne.n	8007ee6 <HAL_DMA_Abort_IT+0xc2>
 8007ee0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ee4:	e01b      	b.n	8007f1e <HAL_DMA_Abort_IT+0xfa>
 8007ee6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007eea:	e018      	b.n	8007f1e <HAL_DMA_Abort_IT+0xfa>
 8007eec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ef0:	e015      	b.n	8007f1e <HAL_DMA_Abort_IT+0xfa>
 8007ef2:	2310      	movs	r3, #16
 8007ef4:	e013      	b.n	8007f1e <HAL_DMA_Abort_IT+0xfa>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e011      	b.n	8007f1e <HAL_DMA_Abort_IT+0xfa>
 8007efa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007efe:	e00e      	b.n	8007f1e <HAL_DMA_Abort_IT+0xfa>
 8007f00:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007f04:	e00b      	b.n	8007f1e <HAL_DMA_Abort_IT+0xfa>
 8007f06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f0a:	e008      	b.n	8007f1e <HAL_DMA_Abort_IT+0xfa>
 8007f0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f10:	e005      	b.n	8007f1e <HAL_DMA_Abort_IT+0xfa>
 8007f12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f16:	e002      	b.n	8007f1e <HAL_DMA_Abort_IT+0xfa>
 8007f18:	2310      	movs	r3, #16
 8007f1a:	e000      	b.n	8007f1e <HAL_DMA_Abort_IT+0xfa>
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	4a43      	ldr	r2, [pc, #268]	; (800802c <HAL_DMA_Abort_IT+0x208>)
 8007f20:	6053      	str	r3, [r2, #4]
 8007f22:	e057      	b.n	8007fd4 <HAL_DMA_Abort_IT+0x1b0>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a36      	ldr	r2, [pc, #216]	; (8008004 <HAL_DMA_Abort_IT+0x1e0>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d04f      	beq.n	8007fce <HAL_DMA_Abort_IT+0x1aa>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a35      	ldr	r2, [pc, #212]	; (8008008 <HAL_DMA_Abort_IT+0x1e4>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d048      	beq.n	8007fca <HAL_DMA_Abort_IT+0x1a6>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a33      	ldr	r2, [pc, #204]	; (800800c <HAL_DMA_Abort_IT+0x1e8>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d040      	beq.n	8007fc4 <HAL_DMA_Abort_IT+0x1a0>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a32      	ldr	r2, [pc, #200]	; (8008010 <HAL_DMA_Abort_IT+0x1ec>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d038      	beq.n	8007fbe <HAL_DMA_Abort_IT+0x19a>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a30      	ldr	r2, [pc, #192]	; (8008014 <HAL_DMA_Abort_IT+0x1f0>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d030      	beq.n	8007fb8 <HAL_DMA_Abort_IT+0x194>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a2f      	ldr	r2, [pc, #188]	; (8008018 <HAL_DMA_Abort_IT+0x1f4>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d028      	beq.n	8007fb2 <HAL_DMA_Abort_IT+0x18e>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a26      	ldr	r2, [pc, #152]	; (8008000 <HAL_DMA_Abort_IT+0x1dc>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d020      	beq.n	8007fac <HAL_DMA_Abort_IT+0x188>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a2b      	ldr	r2, [pc, #172]	; (800801c <HAL_DMA_Abort_IT+0x1f8>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d019      	beq.n	8007fa8 <HAL_DMA_Abort_IT+0x184>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a29      	ldr	r2, [pc, #164]	; (8008020 <HAL_DMA_Abort_IT+0x1fc>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d012      	beq.n	8007fa4 <HAL_DMA_Abort_IT+0x180>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a28      	ldr	r2, [pc, #160]	; (8008024 <HAL_DMA_Abort_IT+0x200>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d00a      	beq.n	8007f9e <HAL_DMA_Abort_IT+0x17a>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a26      	ldr	r2, [pc, #152]	; (8008028 <HAL_DMA_Abort_IT+0x204>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d102      	bne.n	8007f98 <HAL_DMA_Abort_IT+0x174>
 8007f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f96:	e01b      	b.n	8007fd0 <HAL_DMA_Abort_IT+0x1ac>
 8007f98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f9c:	e018      	b.n	8007fd0 <HAL_DMA_Abort_IT+0x1ac>
 8007f9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007fa2:	e015      	b.n	8007fd0 <HAL_DMA_Abort_IT+0x1ac>
 8007fa4:	2310      	movs	r3, #16
 8007fa6:	e013      	b.n	8007fd0 <HAL_DMA_Abort_IT+0x1ac>
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e011      	b.n	8007fd0 <HAL_DMA_Abort_IT+0x1ac>
 8007fac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007fb0:	e00e      	b.n	8007fd0 <HAL_DMA_Abort_IT+0x1ac>
 8007fb2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007fb6:	e00b      	b.n	8007fd0 <HAL_DMA_Abort_IT+0x1ac>
 8007fb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007fbc:	e008      	b.n	8007fd0 <HAL_DMA_Abort_IT+0x1ac>
 8007fbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fc2:	e005      	b.n	8007fd0 <HAL_DMA_Abort_IT+0x1ac>
 8007fc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007fc8:	e002      	b.n	8007fd0 <HAL_DMA_Abort_IT+0x1ac>
 8007fca:	2310      	movs	r3, #16
 8007fcc:	e000      	b.n	8007fd0 <HAL_DMA_Abort_IT+0x1ac>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	4a17      	ldr	r2, [pc, #92]	; (8008030 <HAL_DMA_Abort_IT+0x20c>)
 8007fd2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d003      	beq.n	8007ff4 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	4798      	blx	r3
    } 
  }
  return status;
 8007ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	40020080 	.word	0x40020080
 8008004:	40020008 	.word	0x40020008
 8008008:	4002001c 	.word	0x4002001c
 800800c:	40020030 	.word	0x40020030
 8008010:	40020044 	.word	0x40020044
 8008014:	40020058 	.word	0x40020058
 8008018:	4002006c 	.word	0x4002006c
 800801c:	40020408 	.word	0x40020408
 8008020:	4002041c 	.word	0x4002041c
 8008024:	40020430 	.word	0x40020430
 8008028:	40020444 	.word	0x40020444
 800802c:	40020400 	.word	0x40020400
 8008030:	40020000 	.word	0x40020000

08008034 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008034:	b480      	push	{r7}
 8008036:	b08b      	sub	sp, #44	; 0x2c
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800803e:	2300      	movs	r3, #0
 8008040:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008042:	2300      	movs	r3, #0
 8008044:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008046:	e133      	b.n	80082b0 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008048:	2201      	movs	r2, #1
 800804a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804c:	fa02 f303 	lsl.w	r3, r2, r3
 8008050:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	69fa      	ldr	r2, [r7, #28]
 8008058:	4013      	ands	r3, r2
 800805a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800805c:	69ba      	ldr	r2, [r7, #24]
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	429a      	cmp	r2, r3
 8008062:	f040 8122 	bne.w	80082aa <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	2b12      	cmp	r3, #18
 800806c:	d034      	beq.n	80080d8 <HAL_GPIO_Init+0xa4>
 800806e:	2b12      	cmp	r3, #18
 8008070:	d80d      	bhi.n	800808e <HAL_GPIO_Init+0x5a>
 8008072:	2b02      	cmp	r3, #2
 8008074:	d02b      	beq.n	80080ce <HAL_GPIO_Init+0x9a>
 8008076:	2b02      	cmp	r3, #2
 8008078:	d804      	bhi.n	8008084 <HAL_GPIO_Init+0x50>
 800807a:	2b00      	cmp	r3, #0
 800807c:	d031      	beq.n	80080e2 <HAL_GPIO_Init+0xae>
 800807e:	2b01      	cmp	r3, #1
 8008080:	d01c      	beq.n	80080bc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008082:	e048      	b.n	8008116 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8008084:	2b03      	cmp	r3, #3
 8008086:	d043      	beq.n	8008110 <HAL_GPIO_Init+0xdc>
 8008088:	2b11      	cmp	r3, #17
 800808a:	d01b      	beq.n	80080c4 <HAL_GPIO_Init+0x90>
          break;
 800808c:	e043      	b.n	8008116 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800808e:	4a8f      	ldr	r2, [pc, #572]	; (80082cc <HAL_GPIO_Init+0x298>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d026      	beq.n	80080e2 <HAL_GPIO_Init+0xae>
 8008094:	4a8d      	ldr	r2, [pc, #564]	; (80082cc <HAL_GPIO_Init+0x298>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d806      	bhi.n	80080a8 <HAL_GPIO_Init+0x74>
 800809a:	4a8d      	ldr	r2, [pc, #564]	; (80082d0 <HAL_GPIO_Init+0x29c>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d020      	beq.n	80080e2 <HAL_GPIO_Init+0xae>
 80080a0:	4a8c      	ldr	r2, [pc, #560]	; (80082d4 <HAL_GPIO_Init+0x2a0>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d01d      	beq.n	80080e2 <HAL_GPIO_Init+0xae>
          break;
 80080a6:	e036      	b.n	8008116 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80080a8:	4a8b      	ldr	r2, [pc, #556]	; (80082d8 <HAL_GPIO_Init+0x2a4>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d019      	beq.n	80080e2 <HAL_GPIO_Init+0xae>
 80080ae:	4a8b      	ldr	r2, [pc, #556]	; (80082dc <HAL_GPIO_Init+0x2a8>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d016      	beq.n	80080e2 <HAL_GPIO_Init+0xae>
 80080b4:	4a8a      	ldr	r2, [pc, #552]	; (80082e0 <HAL_GPIO_Init+0x2ac>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d013      	beq.n	80080e2 <HAL_GPIO_Init+0xae>
          break;
 80080ba:	e02c      	b.n	8008116 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	623b      	str	r3, [r7, #32]
          break;
 80080c2:	e028      	b.n	8008116 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	3304      	adds	r3, #4
 80080ca:	623b      	str	r3, [r7, #32]
          break;
 80080cc:	e023      	b.n	8008116 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	3308      	adds	r3, #8
 80080d4:	623b      	str	r3, [r7, #32]
          break;
 80080d6:	e01e      	b.n	8008116 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	330c      	adds	r3, #12
 80080de:	623b      	str	r3, [r7, #32]
          break;
 80080e0:	e019      	b.n	8008116 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d102      	bne.n	80080f0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80080ea:	2304      	movs	r3, #4
 80080ec:	623b      	str	r3, [r7, #32]
          break;
 80080ee:	e012      	b.n	8008116 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d105      	bne.n	8008104 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80080f8:	2308      	movs	r3, #8
 80080fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	69fa      	ldr	r2, [r7, #28]
 8008100:	611a      	str	r2, [r3, #16]
          break;
 8008102:	e008      	b.n	8008116 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008104:	2308      	movs	r3, #8
 8008106:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	69fa      	ldr	r2, [r7, #28]
 800810c:	615a      	str	r2, [r3, #20]
          break;
 800810e:	e002      	b.n	8008116 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008110:	2300      	movs	r3, #0
 8008112:	623b      	str	r3, [r7, #32]
          break;
 8008114:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	2bff      	cmp	r3, #255	; 0xff
 800811a:	d801      	bhi.n	8008120 <HAL_GPIO_Init+0xec>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	e001      	b.n	8008124 <HAL_GPIO_Init+0xf0>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	3304      	adds	r3, #4
 8008124:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	2bff      	cmp	r3, #255	; 0xff
 800812a:	d802      	bhi.n	8008132 <HAL_GPIO_Init+0xfe>
 800812c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	e002      	b.n	8008138 <HAL_GPIO_Init+0x104>
 8008132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008134:	3b08      	subs	r3, #8
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	210f      	movs	r1, #15
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	fa01 f303 	lsl.w	r3, r1, r3
 8008146:	43db      	mvns	r3, r3
 8008148:	401a      	ands	r2, r3
 800814a:	6a39      	ldr	r1, [r7, #32]
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	fa01 f303 	lsl.w	r3, r1, r3
 8008152:	431a      	orrs	r2, r3
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008160:	2b00      	cmp	r3, #0
 8008162:	f000 80a2 	beq.w	80082aa <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008166:	4b5f      	ldr	r3, [pc, #380]	; (80082e4 <HAL_GPIO_Init+0x2b0>)
 8008168:	699b      	ldr	r3, [r3, #24]
 800816a:	4a5e      	ldr	r2, [pc, #376]	; (80082e4 <HAL_GPIO_Init+0x2b0>)
 800816c:	f043 0301 	orr.w	r3, r3, #1
 8008170:	6193      	str	r3, [r2, #24]
 8008172:	4b5c      	ldr	r3, [pc, #368]	; (80082e4 <HAL_GPIO_Init+0x2b0>)
 8008174:	699b      	ldr	r3, [r3, #24]
 8008176:	f003 0301 	and.w	r3, r3, #1
 800817a:	60bb      	str	r3, [r7, #8]
 800817c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800817e:	4a5a      	ldr	r2, [pc, #360]	; (80082e8 <HAL_GPIO_Init+0x2b4>)
 8008180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008182:	089b      	lsrs	r3, r3, #2
 8008184:	3302      	adds	r3, #2
 8008186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800818a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800818c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818e:	f003 0303 	and.w	r3, r3, #3
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	220f      	movs	r2, #15
 8008196:	fa02 f303 	lsl.w	r3, r2, r3
 800819a:	43db      	mvns	r3, r3
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	4013      	ands	r3, r2
 80081a0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4a51      	ldr	r2, [pc, #324]	; (80082ec <HAL_GPIO_Init+0x2b8>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d01f      	beq.n	80081ea <HAL_GPIO_Init+0x1b6>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4a50      	ldr	r2, [pc, #320]	; (80082f0 <HAL_GPIO_Init+0x2bc>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d019      	beq.n	80081e6 <HAL_GPIO_Init+0x1b2>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4a4f      	ldr	r2, [pc, #316]	; (80082f4 <HAL_GPIO_Init+0x2c0>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d013      	beq.n	80081e2 <HAL_GPIO_Init+0x1ae>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4a4e      	ldr	r2, [pc, #312]	; (80082f8 <HAL_GPIO_Init+0x2c4>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d00d      	beq.n	80081de <HAL_GPIO_Init+0x1aa>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4a4d      	ldr	r2, [pc, #308]	; (80082fc <HAL_GPIO_Init+0x2c8>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d007      	beq.n	80081da <HAL_GPIO_Init+0x1a6>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4a4c      	ldr	r2, [pc, #304]	; (8008300 <HAL_GPIO_Init+0x2cc>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d101      	bne.n	80081d6 <HAL_GPIO_Init+0x1a2>
 80081d2:	2305      	movs	r3, #5
 80081d4:	e00a      	b.n	80081ec <HAL_GPIO_Init+0x1b8>
 80081d6:	2306      	movs	r3, #6
 80081d8:	e008      	b.n	80081ec <HAL_GPIO_Init+0x1b8>
 80081da:	2304      	movs	r3, #4
 80081dc:	e006      	b.n	80081ec <HAL_GPIO_Init+0x1b8>
 80081de:	2303      	movs	r3, #3
 80081e0:	e004      	b.n	80081ec <HAL_GPIO_Init+0x1b8>
 80081e2:	2302      	movs	r3, #2
 80081e4:	e002      	b.n	80081ec <HAL_GPIO_Init+0x1b8>
 80081e6:	2301      	movs	r3, #1
 80081e8:	e000      	b.n	80081ec <HAL_GPIO_Init+0x1b8>
 80081ea:	2300      	movs	r3, #0
 80081ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081ee:	f002 0203 	and.w	r2, r2, #3
 80081f2:	0092      	lsls	r2, r2, #2
 80081f4:	4093      	lsls	r3, r2
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	4313      	orrs	r3, r2
 80081fa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80081fc:	493a      	ldr	r1, [pc, #232]	; (80082e8 <HAL_GPIO_Init+0x2b4>)
 80081fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008200:	089b      	lsrs	r3, r3, #2
 8008202:	3302      	adds	r3, #2
 8008204:	68fa      	ldr	r2, [r7, #12]
 8008206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008212:	2b00      	cmp	r3, #0
 8008214:	d006      	beq.n	8008224 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008216:	4b3b      	ldr	r3, [pc, #236]	; (8008304 <HAL_GPIO_Init+0x2d0>)
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	493a      	ldr	r1, [pc, #232]	; (8008304 <HAL_GPIO_Init+0x2d0>)
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	4313      	orrs	r3, r2
 8008220:	600b      	str	r3, [r1, #0]
 8008222:	e006      	b.n	8008232 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008224:	4b37      	ldr	r3, [pc, #220]	; (8008304 <HAL_GPIO_Init+0x2d0>)
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	43db      	mvns	r3, r3
 800822c:	4935      	ldr	r1, [pc, #212]	; (8008304 <HAL_GPIO_Init+0x2d0>)
 800822e:	4013      	ands	r3, r2
 8008230:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800823a:	2b00      	cmp	r3, #0
 800823c:	d006      	beq.n	800824c <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800823e:	4b31      	ldr	r3, [pc, #196]	; (8008304 <HAL_GPIO_Init+0x2d0>)
 8008240:	685a      	ldr	r2, [r3, #4]
 8008242:	4930      	ldr	r1, [pc, #192]	; (8008304 <HAL_GPIO_Init+0x2d0>)
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	4313      	orrs	r3, r2
 8008248:	604b      	str	r3, [r1, #4]
 800824a:	e006      	b.n	800825a <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800824c:	4b2d      	ldr	r3, [pc, #180]	; (8008304 <HAL_GPIO_Init+0x2d0>)
 800824e:	685a      	ldr	r2, [r3, #4]
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	43db      	mvns	r3, r3
 8008254:	492b      	ldr	r1, [pc, #172]	; (8008304 <HAL_GPIO_Init+0x2d0>)
 8008256:	4013      	ands	r3, r2
 8008258:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008262:	2b00      	cmp	r3, #0
 8008264:	d006      	beq.n	8008274 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008266:	4b27      	ldr	r3, [pc, #156]	; (8008304 <HAL_GPIO_Init+0x2d0>)
 8008268:	689a      	ldr	r2, [r3, #8]
 800826a:	4926      	ldr	r1, [pc, #152]	; (8008304 <HAL_GPIO_Init+0x2d0>)
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	4313      	orrs	r3, r2
 8008270:	608b      	str	r3, [r1, #8]
 8008272:	e006      	b.n	8008282 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008274:	4b23      	ldr	r3, [pc, #140]	; (8008304 <HAL_GPIO_Init+0x2d0>)
 8008276:	689a      	ldr	r2, [r3, #8]
 8008278:	69bb      	ldr	r3, [r7, #24]
 800827a:	43db      	mvns	r3, r3
 800827c:	4921      	ldr	r1, [pc, #132]	; (8008304 <HAL_GPIO_Init+0x2d0>)
 800827e:	4013      	ands	r3, r2
 8008280:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800828a:	2b00      	cmp	r3, #0
 800828c:	d006      	beq.n	800829c <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800828e:	4b1d      	ldr	r3, [pc, #116]	; (8008304 <HAL_GPIO_Init+0x2d0>)
 8008290:	68da      	ldr	r2, [r3, #12]
 8008292:	491c      	ldr	r1, [pc, #112]	; (8008304 <HAL_GPIO_Init+0x2d0>)
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	4313      	orrs	r3, r2
 8008298:	60cb      	str	r3, [r1, #12]
 800829a:	e006      	b.n	80082aa <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800829c:	4b19      	ldr	r3, [pc, #100]	; (8008304 <HAL_GPIO_Init+0x2d0>)
 800829e:	68da      	ldr	r2, [r3, #12]
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	43db      	mvns	r3, r3
 80082a4:	4917      	ldr	r1, [pc, #92]	; (8008304 <HAL_GPIO_Init+0x2d0>)
 80082a6:	4013      	ands	r3, r2
 80082a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80082aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ac:	3301      	adds	r3, #1
 80082ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b6:	fa22 f303 	lsr.w	r3, r2, r3
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	f47f aec4 	bne.w	8008048 <HAL_GPIO_Init+0x14>
  }
}
 80082c0:	bf00      	nop
 80082c2:	372c      	adds	r7, #44	; 0x2c
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bc80      	pop	{r7}
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop
 80082cc:	10210000 	.word	0x10210000
 80082d0:	10110000 	.word	0x10110000
 80082d4:	10120000 	.word	0x10120000
 80082d8:	10310000 	.word	0x10310000
 80082dc:	10320000 	.word	0x10320000
 80082e0:	10220000 	.word	0x10220000
 80082e4:	40021000 	.word	0x40021000
 80082e8:	40010000 	.word	0x40010000
 80082ec:	40010800 	.word	0x40010800
 80082f0:	40010c00 	.word	0x40010c00
 80082f4:	40011000 	.word	0x40011000
 80082f8:	40011400 	.word	0x40011400
 80082fc:	40011800 	.word	0x40011800
 8008300:	40011c00 	.word	0x40011c00
 8008304:	40010400 	.word	0x40010400

08008308 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	460b      	mov	r3, r1
 8008312:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	689a      	ldr	r2, [r3, #8]
 8008318:	887b      	ldrh	r3, [r7, #2]
 800831a:	4013      	ands	r3, r2
 800831c:	2b00      	cmp	r3, #0
 800831e:	d002      	beq.n	8008326 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008320:	2301      	movs	r3, #1
 8008322:	73fb      	strb	r3, [r7, #15]
 8008324:	e001      	b.n	800832a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008326:	2300      	movs	r3, #0
 8008328:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800832a:	7bfb      	ldrb	r3, [r7, #15]
}
 800832c:	4618      	mov	r0, r3
 800832e:	3714      	adds	r7, #20
 8008330:	46bd      	mov	sp, r7
 8008332:	bc80      	pop	{r7}
 8008334:	4770      	bx	lr

08008336 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008336:	b480      	push	{r7}
 8008338:	b083      	sub	sp, #12
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
 800833e:	460b      	mov	r3, r1
 8008340:	807b      	strh	r3, [r7, #2]
 8008342:	4613      	mov	r3, r2
 8008344:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008346:	787b      	ldrb	r3, [r7, #1]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d003      	beq.n	8008354 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800834c:	887a      	ldrh	r2, [r7, #2]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8008352:	e003      	b.n	800835c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008354:	887b      	ldrh	r3, [r7, #2]
 8008356:	041a      	lsls	r2, r3, #16
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	611a      	str	r2, [r3, #16]
}
 800835c:	bf00      	nop
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	bc80      	pop	{r7}
 8008364:	4770      	bx	lr

08008366 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008366:	b480      	push	{r7}
 8008368:	b085      	sub	sp, #20
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
 800836e:	460b      	mov	r3, r1
 8008370:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008378:	887a      	ldrh	r2, [r7, #2]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	4013      	ands	r3, r2
 800837e:	041a      	lsls	r2, r3, #16
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	43d9      	mvns	r1, r3
 8008384:	887b      	ldrh	r3, [r7, #2]
 8008386:	400b      	ands	r3, r1
 8008388:	431a      	orrs	r2, r3
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	611a      	str	r2, [r3, #16]
}
 800838e:	bf00      	nop
 8008390:	3714      	adds	r7, #20
 8008392:	46bd      	mov	sp, r7
 8008394:	bc80      	pop	{r7}
 8008396:	4770      	bx	lr

08008398 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	4603      	mov	r3, r0
 80083a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80083a2:	4b08      	ldr	r3, [pc, #32]	; (80083c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80083a4:	695a      	ldr	r2, [r3, #20]
 80083a6:	88fb      	ldrh	r3, [r7, #6]
 80083a8:	4013      	ands	r3, r2
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d006      	beq.n	80083bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80083ae:	4a05      	ldr	r2, [pc, #20]	; (80083c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80083b0:	88fb      	ldrh	r3, [r7, #6]
 80083b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80083b4:	88fb      	ldrh	r3, [r7, #6]
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7fe fd3c 	bl	8006e34 <HAL_GPIO_EXTI_Callback>
  }
}
 80083bc:	bf00      	nop
 80083be:	3708      	adds	r7, #8
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	40010400 	.word	0x40010400

080083c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b086      	sub	sp, #24
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d101      	bne.n	80083da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	e26c      	b.n	80088b4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 0301 	and.w	r3, r3, #1
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	f000 8087 	beq.w	80084f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80083e8:	4b92      	ldr	r3, [pc, #584]	; (8008634 <HAL_RCC_OscConfig+0x26c>)
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	f003 030c 	and.w	r3, r3, #12
 80083f0:	2b04      	cmp	r3, #4
 80083f2:	d00c      	beq.n	800840e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80083f4:	4b8f      	ldr	r3, [pc, #572]	; (8008634 <HAL_RCC_OscConfig+0x26c>)
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	f003 030c 	and.w	r3, r3, #12
 80083fc:	2b08      	cmp	r3, #8
 80083fe:	d112      	bne.n	8008426 <HAL_RCC_OscConfig+0x5e>
 8008400:	4b8c      	ldr	r3, [pc, #560]	; (8008634 <HAL_RCC_OscConfig+0x26c>)
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800840c:	d10b      	bne.n	8008426 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800840e:	4b89      	ldr	r3, [pc, #548]	; (8008634 <HAL_RCC_OscConfig+0x26c>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008416:	2b00      	cmp	r3, #0
 8008418:	d06c      	beq.n	80084f4 <HAL_RCC_OscConfig+0x12c>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d168      	bne.n	80084f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	e246      	b.n	80088b4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800842e:	d106      	bne.n	800843e <HAL_RCC_OscConfig+0x76>
 8008430:	4b80      	ldr	r3, [pc, #512]	; (8008634 <HAL_RCC_OscConfig+0x26c>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a7f      	ldr	r2, [pc, #508]	; (8008634 <HAL_RCC_OscConfig+0x26c>)
 8008436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800843a:	6013      	str	r3, [r2, #0]
 800843c:	e02e      	b.n	800849c <HAL_RCC_OscConfig+0xd4>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d10c      	bne.n	8008460 <HAL_RCC_OscConfig+0x98>
 8008446:	4b7b      	ldr	r3, [pc, #492]	; (8008634 <HAL_RCC_OscConfig+0x26c>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a7a      	ldr	r2, [pc, #488]	; (8008634 <HAL_RCC_OscConfig+0x26c>)
 800844c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008450:	6013      	str	r3, [r2, #0]
 8008452:	4b78      	ldr	r3, [pc, #480]	; (8008634 <HAL_RCC_OscConfig+0x26c>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a77      	ldr	r2, [pc, #476]	; (8008634 <HAL_RCC_OscConfig+0x26c>)
 8008458:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800845c:	6013      	str	r3, [r2, #0]
 800845e:	e01d      	b.n	800849c <HAL_RCC_OscConfig+0xd4>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008468:	d10c      	bne.n	8008484 <HAL_RCC_OscConfig+0xbc>
 800846a:	4b72      	ldr	r3, [pc, #456]	; (8008634 <HAL_RCC_OscConfig+0x26c>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a71      	ldr	r2, [pc, #452]	; (8008634 <HAL_RCC_OscConfig+0x26c>)
 8008470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008474:	6013      	str	r3, [r2, #0]
 8008476:	4b6f      	ldr	r3, [pc, #444]	; (8008634 <HAL_RCC_OscConfig+0x26c>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a6e      	ldr	r2, [pc, #440]	; (8008634 <HAL_RCC_OscConfig+0x26c>)
 800847c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008480:	6013      	str	r3, [r2, #0]
 8008482:	e00b      	b.n	800849c <HAL_RCC_OscConfig+0xd4>
 8008484:	4b6b      	ldr	r3, [pc, #428]	; (8008634 <HAL_RCC_OscConfig+0x26c>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a6a      	ldr	r2, [pc, #424]	; (8008634 <HAL_RCC_OscConfig+0x26c>)
 800848a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800848e:	6013      	str	r3, [r2, #0]
 8008490:	4b68      	ldr	r3, [pc, #416]	; (8008634 <HAL_RCC_OscConfig+0x26c>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a67      	ldr	r2, [pc, #412]	; (8008634 <HAL_RCC_OscConfig+0x26c>)
 8008496:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800849a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d013      	beq.n	80084cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084a4:	f7ff fb84 	bl	8007bb0 <HAL_GetTick>
 80084a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084aa:	e008      	b.n	80084be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80084ac:	f7ff fb80 	bl	8007bb0 <HAL_GetTick>
 80084b0:	4602      	mov	r2, r0
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	1ad3      	subs	r3, r2, r3
 80084b6:	2b64      	cmp	r3, #100	; 0x64
 80084b8:	d901      	bls.n	80084be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80084ba:	2303      	movs	r3, #3
 80084bc:	e1fa      	b.n	80088b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084be:	4b5d      	ldr	r3, [pc, #372]	; (8008634 <HAL_RCC_OscConfig+0x26c>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d0f0      	beq.n	80084ac <HAL_RCC_OscConfig+0xe4>
 80084ca:	e014      	b.n	80084f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084cc:	f7ff fb70 	bl	8007bb0 <HAL_GetTick>
 80084d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084d2:	e008      	b.n	80084e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80084d4:	f7ff fb6c 	bl	8007bb0 <HAL_GetTick>
 80084d8:	4602      	mov	r2, r0
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	1ad3      	subs	r3, r2, r3
 80084de:	2b64      	cmp	r3, #100	; 0x64
 80084e0:	d901      	bls.n	80084e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80084e2:	2303      	movs	r3, #3
 80084e4:	e1e6      	b.n	80088b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084e6:	4b53      	ldr	r3, [pc, #332]	; (8008634 <HAL_RCC_OscConfig+0x26c>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1f0      	bne.n	80084d4 <HAL_RCC_OscConfig+0x10c>
 80084f2:	e000      	b.n	80084f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 0302 	and.w	r3, r3, #2
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d063      	beq.n	80085ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008502:	4b4c      	ldr	r3, [pc, #304]	; (8008634 <HAL_RCC_OscConfig+0x26c>)
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	f003 030c 	and.w	r3, r3, #12
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00b      	beq.n	8008526 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800850e:	4b49      	ldr	r3, [pc, #292]	; (8008634 <HAL_RCC_OscConfig+0x26c>)
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	f003 030c 	and.w	r3, r3, #12
 8008516:	2b08      	cmp	r3, #8
 8008518:	d11c      	bne.n	8008554 <HAL_RCC_OscConfig+0x18c>
 800851a:	4b46      	ldr	r3, [pc, #280]	; (8008634 <HAL_RCC_OscConfig+0x26c>)
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008522:	2b00      	cmp	r3, #0
 8008524:	d116      	bne.n	8008554 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008526:	4b43      	ldr	r3, [pc, #268]	; (8008634 <HAL_RCC_OscConfig+0x26c>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f003 0302 	and.w	r3, r3, #2
 800852e:	2b00      	cmp	r3, #0
 8008530:	d005      	beq.n	800853e <HAL_RCC_OscConfig+0x176>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	2b01      	cmp	r3, #1
 8008538:	d001      	beq.n	800853e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	e1ba      	b.n	80088b4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800853e:	4b3d      	ldr	r3, [pc, #244]	; (8008634 <HAL_RCC_OscConfig+0x26c>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	695b      	ldr	r3, [r3, #20]
 800854a:	00db      	lsls	r3, r3, #3
 800854c:	4939      	ldr	r1, [pc, #228]	; (8008634 <HAL_RCC_OscConfig+0x26c>)
 800854e:	4313      	orrs	r3, r2
 8008550:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008552:	e03a      	b.n	80085ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d020      	beq.n	800859e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800855c:	4b36      	ldr	r3, [pc, #216]	; (8008638 <HAL_RCC_OscConfig+0x270>)
 800855e:	2201      	movs	r2, #1
 8008560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008562:	f7ff fb25 	bl	8007bb0 <HAL_GetTick>
 8008566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008568:	e008      	b.n	800857c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800856a:	f7ff fb21 	bl	8007bb0 <HAL_GetTick>
 800856e:	4602      	mov	r2, r0
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	1ad3      	subs	r3, r2, r3
 8008574:	2b02      	cmp	r3, #2
 8008576:	d901      	bls.n	800857c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008578:	2303      	movs	r3, #3
 800857a:	e19b      	b.n	80088b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800857c:	4b2d      	ldr	r3, [pc, #180]	; (8008634 <HAL_RCC_OscConfig+0x26c>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 0302 	and.w	r3, r3, #2
 8008584:	2b00      	cmp	r3, #0
 8008586:	d0f0      	beq.n	800856a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008588:	4b2a      	ldr	r3, [pc, #168]	; (8008634 <HAL_RCC_OscConfig+0x26c>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	695b      	ldr	r3, [r3, #20]
 8008594:	00db      	lsls	r3, r3, #3
 8008596:	4927      	ldr	r1, [pc, #156]	; (8008634 <HAL_RCC_OscConfig+0x26c>)
 8008598:	4313      	orrs	r3, r2
 800859a:	600b      	str	r3, [r1, #0]
 800859c:	e015      	b.n	80085ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800859e:	4b26      	ldr	r3, [pc, #152]	; (8008638 <HAL_RCC_OscConfig+0x270>)
 80085a0:	2200      	movs	r2, #0
 80085a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085a4:	f7ff fb04 	bl	8007bb0 <HAL_GetTick>
 80085a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80085aa:	e008      	b.n	80085be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085ac:	f7ff fb00 	bl	8007bb0 <HAL_GetTick>
 80085b0:	4602      	mov	r2, r0
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	2b02      	cmp	r3, #2
 80085b8:	d901      	bls.n	80085be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80085ba:	2303      	movs	r3, #3
 80085bc:	e17a      	b.n	80088b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80085be:	4b1d      	ldr	r3, [pc, #116]	; (8008634 <HAL_RCC_OscConfig+0x26c>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f003 0302 	and.w	r3, r3, #2
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1f0      	bne.n	80085ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 0308 	and.w	r3, r3, #8
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d03a      	beq.n	800864c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	699b      	ldr	r3, [r3, #24]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d019      	beq.n	8008612 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80085de:	4b17      	ldr	r3, [pc, #92]	; (800863c <HAL_RCC_OscConfig+0x274>)
 80085e0:	2201      	movs	r2, #1
 80085e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085e4:	f7ff fae4 	bl	8007bb0 <HAL_GetTick>
 80085e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085ea:	e008      	b.n	80085fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085ec:	f7ff fae0 	bl	8007bb0 <HAL_GetTick>
 80085f0:	4602      	mov	r2, r0
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	1ad3      	subs	r3, r2, r3
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	d901      	bls.n	80085fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80085fa:	2303      	movs	r3, #3
 80085fc:	e15a      	b.n	80088b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085fe:	4b0d      	ldr	r3, [pc, #52]	; (8008634 <HAL_RCC_OscConfig+0x26c>)
 8008600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008602:	f003 0302 	and.w	r3, r3, #2
 8008606:	2b00      	cmp	r3, #0
 8008608:	d0f0      	beq.n	80085ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800860a:	2001      	movs	r0, #1
 800860c:	f000 fada 	bl	8008bc4 <RCC_Delay>
 8008610:	e01c      	b.n	800864c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008612:	4b0a      	ldr	r3, [pc, #40]	; (800863c <HAL_RCC_OscConfig+0x274>)
 8008614:	2200      	movs	r2, #0
 8008616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008618:	f7ff faca 	bl	8007bb0 <HAL_GetTick>
 800861c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800861e:	e00f      	b.n	8008640 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008620:	f7ff fac6 	bl	8007bb0 <HAL_GetTick>
 8008624:	4602      	mov	r2, r0
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	1ad3      	subs	r3, r2, r3
 800862a:	2b02      	cmp	r3, #2
 800862c:	d908      	bls.n	8008640 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800862e:	2303      	movs	r3, #3
 8008630:	e140      	b.n	80088b4 <HAL_RCC_OscConfig+0x4ec>
 8008632:	bf00      	nop
 8008634:	40021000 	.word	0x40021000
 8008638:	42420000 	.word	0x42420000
 800863c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008640:	4b9e      	ldr	r3, [pc, #632]	; (80088bc <HAL_RCC_OscConfig+0x4f4>)
 8008642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008644:	f003 0302 	and.w	r3, r3, #2
 8008648:	2b00      	cmp	r3, #0
 800864a:	d1e9      	bne.n	8008620 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f003 0304 	and.w	r3, r3, #4
 8008654:	2b00      	cmp	r3, #0
 8008656:	f000 80a6 	beq.w	80087a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800865a:	2300      	movs	r3, #0
 800865c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800865e:	4b97      	ldr	r3, [pc, #604]	; (80088bc <HAL_RCC_OscConfig+0x4f4>)
 8008660:	69db      	ldr	r3, [r3, #28]
 8008662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008666:	2b00      	cmp	r3, #0
 8008668:	d10d      	bne.n	8008686 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800866a:	4b94      	ldr	r3, [pc, #592]	; (80088bc <HAL_RCC_OscConfig+0x4f4>)
 800866c:	69db      	ldr	r3, [r3, #28]
 800866e:	4a93      	ldr	r2, [pc, #588]	; (80088bc <HAL_RCC_OscConfig+0x4f4>)
 8008670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008674:	61d3      	str	r3, [r2, #28]
 8008676:	4b91      	ldr	r3, [pc, #580]	; (80088bc <HAL_RCC_OscConfig+0x4f4>)
 8008678:	69db      	ldr	r3, [r3, #28]
 800867a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800867e:	60bb      	str	r3, [r7, #8]
 8008680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008682:	2301      	movs	r3, #1
 8008684:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008686:	4b8e      	ldr	r3, [pc, #568]	; (80088c0 <HAL_RCC_OscConfig+0x4f8>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800868e:	2b00      	cmp	r3, #0
 8008690:	d118      	bne.n	80086c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008692:	4b8b      	ldr	r3, [pc, #556]	; (80088c0 <HAL_RCC_OscConfig+0x4f8>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a8a      	ldr	r2, [pc, #552]	; (80088c0 <HAL_RCC_OscConfig+0x4f8>)
 8008698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800869c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800869e:	f7ff fa87 	bl	8007bb0 <HAL_GetTick>
 80086a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086a4:	e008      	b.n	80086b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086a6:	f7ff fa83 	bl	8007bb0 <HAL_GetTick>
 80086aa:	4602      	mov	r2, r0
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	1ad3      	subs	r3, r2, r3
 80086b0:	2b64      	cmp	r3, #100	; 0x64
 80086b2:	d901      	bls.n	80086b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80086b4:	2303      	movs	r3, #3
 80086b6:	e0fd      	b.n	80088b4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80086b8:	4b81      	ldr	r3, [pc, #516]	; (80088c0 <HAL_RCC_OscConfig+0x4f8>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d0f0      	beq.n	80086a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d106      	bne.n	80086da <HAL_RCC_OscConfig+0x312>
 80086cc:	4b7b      	ldr	r3, [pc, #492]	; (80088bc <HAL_RCC_OscConfig+0x4f4>)
 80086ce:	6a1b      	ldr	r3, [r3, #32]
 80086d0:	4a7a      	ldr	r2, [pc, #488]	; (80088bc <HAL_RCC_OscConfig+0x4f4>)
 80086d2:	f043 0301 	orr.w	r3, r3, #1
 80086d6:	6213      	str	r3, [r2, #32]
 80086d8:	e02d      	b.n	8008736 <HAL_RCC_OscConfig+0x36e>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d10c      	bne.n	80086fc <HAL_RCC_OscConfig+0x334>
 80086e2:	4b76      	ldr	r3, [pc, #472]	; (80088bc <HAL_RCC_OscConfig+0x4f4>)
 80086e4:	6a1b      	ldr	r3, [r3, #32]
 80086e6:	4a75      	ldr	r2, [pc, #468]	; (80088bc <HAL_RCC_OscConfig+0x4f4>)
 80086e8:	f023 0301 	bic.w	r3, r3, #1
 80086ec:	6213      	str	r3, [r2, #32]
 80086ee:	4b73      	ldr	r3, [pc, #460]	; (80088bc <HAL_RCC_OscConfig+0x4f4>)
 80086f0:	6a1b      	ldr	r3, [r3, #32]
 80086f2:	4a72      	ldr	r2, [pc, #456]	; (80088bc <HAL_RCC_OscConfig+0x4f4>)
 80086f4:	f023 0304 	bic.w	r3, r3, #4
 80086f8:	6213      	str	r3, [r2, #32]
 80086fa:	e01c      	b.n	8008736 <HAL_RCC_OscConfig+0x36e>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	2b05      	cmp	r3, #5
 8008702:	d10c      	bne.n	800871e <HAL_RCC_OscConfig+0x356>
 8008704:	4b6d      	ldr	r3, [pc, #436]	; (80088bc <HAL_RCC_OscConfig+0x4f4>)
 8008706:	6a1b      	ldr	r3, [r3, #32]
 8008708:	4a6c      	ldr	r2, [pc, #432]	; (80088bc <HAL_RCC_OscConfig+0x4f4>)
 800870a:	f043 0304 	orr.w	r3, r3, #4
 800870e:	6213      	str	r3, [r2, #32]
 8008710:	4b6a      	ldr	r3, [pc, #424]	; (80088bc <HAL_RCC_OscConfig+0x4f4>)
 8008712:	6a1b      	ldr	r3, [r3, #32]
 8008714:	4a69      	ldr	r2, [pc, #420]	; (80088bc <HAL_RCC_OscConfig+0x4f4>)
 8008716:	f043 0301 	orr.w	r3, r3, #1
 800871a:	6213      	str	r3, [r2, #32]
 800871c:	e00b      	b.n	8008736 <HAL_RCC_OscConfig+0x36e>
 800871e:	4b67      	ldr	r3, [pc, #412]	; (80088bc <HAL_RCC_OscConfig+0x4f4>)
 8008720:	6a1b      	ldr	r3, [r3, #32]
 8008722:	4a66      	ldr	r2, [pc, #408]	; (80088bc <HAL_RCC_OscConfig+0x4f4>)
 8008724:	f023 0301 	bic.w	r3, r3, #1
 8008728:	6213      	str	r3, [r2, #32]
 800872a:	4b64      	ldr	r3, [pc, #400]	; (80088bc <HAL_RCC_OscConfig+0x4f4>)
 800872c:	6a1b      	ldr	r3, [r3, #32]
 800872e:	4a63      	ldr	r2, [pc, #396]	; (80088bc <HAL_RCC_OscConfig+0x4f4>)
 8008730:	f023 0304 	bic.w	r3, r3, #4
 8008734:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d015      	beq.n	800876a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800873e:	f7ff fa37 	bl	8007bb0 <HAL_GetTick>
 8008742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008744:	e00a      	b.n	800875c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008746:	f7ff fa33 	bl	8007bb0 <HAL_GetTick>
 800874a:	4602      	mov	r2, r0
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	1ad3      	subs	r3, r2, r3
 8008750:	f241 3288 	movw	r2, #5000	; 0x1388
 8008754:	4293      	cmp	r3, r2
 8008756:	d901      	bls.n	800875c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008758:	2303      	movs	r3, #3
 800875a:	e0ab      	b.n	80088b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800875c:	4b57      	ldr	r3, [pc, #348]	; (80088bc <HAL_RCC_OscConfig+0x4f4>)
 800875e:	6a1b      	ldr	r3, [r3, #32]
 8008760:	f003 0302 	and.w	r3, r3, #2
 8008764:	2b00      	cmp	r3, #0
 8008766:	d0ee      	beq.n	8008746 <HAL_RCC_OscConfig+0x37e>
 8008768:	e014      	b.n	8008794 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800876a:	f7ff fa21 	bl	8007bb0 <HAL_GetTick>
 800876e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008770:	e00a      	b.n	8008788 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008772:	f7ff fa1d 	bl	8007bb0 <HAL_GetTick>
 8008776:	4602      	mov	r2, r0
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	1ad3      	subs	r3, r2, r3
 800877c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008780:	4293      	cmp	r3, r2
 8008782:	d901      	bls.n	8008788 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008784:	2303      	movs	r3, #3
 8008786:	e095      	b.n	80088b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008788:	4b4c      	ldr	r3, [pc, #304]	; (80088bc <HAL_RCC_OscConfig+0x4f4>)
 800878a:	6a1b      	ldr	r3, [r3, #32]
 800878c:	f003 0302 	and.w	r3, r3, #2
 8008790:	2b00      	cmp	r3, #0
 8008792:	d1ee      	bne.n	8008772 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008794:	7dfb      	ldrb	r3, [r7, #23]
 8008796:	2b01      	cmp	r3, #1
 8008798:	d105      	bne.n	80087a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800879a:	4b48      	ldr	r3, [pc, #288]	; (80088bc <HAL_RCC_OscConfig+0x4f4>)
 800879c:	69db      	ldr	r3, [r3, #28]
 800879e:	4a47      	ldr	r2, [pc, #284]	; (80088bc <HAL_RCC_OscConfig+0x4f4>)
 80087a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	69db      	ldr	r3, [r3, #28]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	f000 8081 	beq.w	80088b2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80087b0:	4b42      	ldr	r3, [pc, #264]	; (80088bc <HAL_RCC_OscConfig+0x4f4>)
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	f003 030c 	and.w	r3, r3, #12
 80087b8:	2b08      	cmp	r3, #8
 80087ba:	d061      	beq.n	8008880 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	69db      	ldr	r3, [r3, #28]
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d146      	bne.n	8008852 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087c4:	4b3f      	ldr	r3, [pc, #252]	; (80088c4 <HAL_RCC_OscConfig+0x4fc>)
 80087c6:	2200      	movs	r2, #0
 80087c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087ca:	f7ff f9f1 	bl	8007bb0 <HAL_GetTick>
 80087ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80087d0:	e008      	b.n	80087e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087d2:	f7ff f9ed 	bl	8007bb0 <HAL_GetTick>
 80087d6:	4602      	mov	r2, r0
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	1ad3      	subs	r3, r2, r3
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d901      	bls.n	80087e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80087e0:	2303      	movs	r3, #3
 80087e2:	e067      	b.n	80088b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80087e4:	4b35      	ldr	r3, [pc, #212]	; (80088bc <HAL_RCC_OscConfig+0x4f4>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d1f0      	bne.n	80087d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6a1b      	ldr	r3, [r3, #32]
 80087f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087f8:	d108      	bne.n	800880c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80087fa:	4b30      	ldr	r3, [pc, #192]	; (80088bc <HAL_RCC_OscConfig+0x4f4>)
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	492d      	ldr	r1, [pc, #180]	; (80088bc <HAL_RCC_OscConfig+0x4f4>)
 8008808:	4313      	orrs	r3, r2
 800880a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800880c:	4b2b      	ldr	r3, [pc, #172]	; (80088bc <HAL_RCC_OscConfig+0x4f4>)
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6a19      	ldr	r1, [r3, #32]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881c:	430b      	orrs	r3, r1
 800881e:	4927      	ldr	r1, [pc, #156]	; (80088bc <HAL_RCC_OscConfig+0x4f4>)
 8008820:	4313      	orrs	r3, r2
 8008822:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008824:	4b27      	ldr	r3, [pc, #156]	; (80088c4 <HAL_RCC_OscConfig+0x4fc>)
 8008826:	2201      	movs	r2, #1
 8008828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800882a:	f7ff f9c1 	bl	8007bb0 <HAL_GetTick>
 800882e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008830:	e008      	b.n	8008844 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008832:	f7ff f9bd 	bl	8007bb0 <HAL_GetTick>
 8008836:	4602      	mov	r2, r0
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	1ad3      	subs	r3, r2, r3
 800883c:	2b02      	cmp	r3, #2
 800883e:	d901      	bls.n	8008844 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008840:	2303      	movs	r3, #3
 8008842:	e037      	b.n	80088b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008844:	4b1d      	ldr	r3, [pc, #116]	; (80088bc <HAL_RCC_OscConfig+0x4f4>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800884c:	2b00      	cmp	r3, #0
 800884e:	d0f0      	beq.n	8008832 <HAL_RCC_OscConfig+0x46a>
 8008850:	e02f      	b.n	80088b2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008852:	4b1c      	ldr	r3, [pc, #112]	; (80088c4 <HAL_RCC_OscConfig+0x4fc>)
 8008854:	2200      	movs	r2, #0
 8008856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008858:	f7ff f9aa 	bl	8007bb0 <HAL_GetTick>
 800885c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800885e:	e008      	b.n	8008872 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008860:	f7ff f9a6 	bl	8007bb0 <HAL_GetTick>
 8008864:	4602      	mov	r2, r0
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	1ad3      	subs	r3, r2, r3
 800886a:	2b02      	cmp	r3, #2
 800886c:	d901      	bls.n	8008872 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800886e:	2303      	movs	r3, #3
 8008870:	e020      	b.n	80088b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008872:	4b12      	ldr	r3, [pc, #72]	; (80088bc <HAL_RCC_OscConfig+0x4f4>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800887a:	2b00      	cmp	r3, #0
 800887c:	d1f0      	bne.n	8008860 <HAL_RCC_OscConfig+0x498>
 800887e:	e018      	b.n	80088b2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	69db      	ldr	r3, [r3, #28]
 8008884:	2b01      	cmp	r3, #1
 8008886:	d101      	bne.n	800888c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	e013      	b.n	80088b4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800888c:	4b0b      	ldr	r3, [pc, #44]	; (80088bc <HAL_RCC_OscConfig+0x4f4>)
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6a1b      	ldr	r3, [r3, #32]
 800889c:	429a      	cmp	r2, r3
 800889e:	d106      	bne.n	80088ae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d001      	beq.n	80088b2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	e000      	b.n	80088b4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3718      	adds	r7, #24
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	40021000 	.word	0x40021000
 80088c0:	40007000 	.word	0x40007000
 80088c4:	42420060 	.word	0x42420060

080088c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d101      	bne.n	80088dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	e0d0      	b.n	8008a7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80088dc:	4b6a      	ldr	r3, [pc, #424]	; (8008a88 <HAL_RCC_ClockConfig+0x1c0>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 0307 	and.w	r3, r3, #7
 80088e4:	683a      	ldr	r2, [r7, #0]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d910      	bls.n	800890c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088ea:	4b67      	ldr	r3, [pc, #412]	; (8008a88 <HAL_RCC_ClockConfig+0x1c0>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f023 0207 	bic.w	r2, r3, #7
 80088f2:	4965      	ldr	r1, [pc, #404]	; (8008a88 <HAL_RCC_ClockConfig+0x1c0>)
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088fa:	4b63      	ldr	r3, [pc, #396]	; (8008a88 <HAL_RCC_ClockConfig+0x1c0>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f003 0307 	and.w	r3, r3, #7
 8008902:	683a      	ldr	r2, [r7, #0]
 8008904:	429a      	cmp	r2, r3
 8008906:	d001      	beq.n	800890c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	e0b8      	b.n	8008a7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 0302 	and.w	r3, r3, #2
 8008914:	2b00      	cmp	r3, #0
 8008916:	d020      	beq.n	800895a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f003 0304 	and.w	r3, r3, #4
 8008920:	2b00      	cmp	r3, #0
 8008922:	d005      	beq.n	8008930 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008924:	4b59      	ldr	r3, [pc, #356]	; (8008a8c <HAL_RCC_ClockConfig+0x1c4>)
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	4a58      	ldr	r2, [pc, #352]	; (8008a8c <HAL_RCC_ClockConfig+0x1c4>)
 800892a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800892e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 0308 	and.w	r3, r3, #8
 8008938:	2b00      	cmp	r3, #0
 800893a:	d005      	beq.n	8008948 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800893c:	4b53      	ldr	r3, [pc, #332]	; (8008a8c <HAL_RCC_ClockConfig+0x1c4>)
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	4a52      	ldr	r2, [pc, #328]	; (8008a8c <HAL_RCC_ClockConfig+0x1c4>)
 8008942:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008946:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008948:	4b50      	ldr	r3, [pc, #320]	; (8008a8c <HAL_RCC_ClockConfig+0x1c4>)
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	494d      	ldr	r1, [pc, #308]	; (8008a8c <HAL_RCC_ClockConfig+0x1c4>)
 8008956:	4313      	orrs	r3, r2
 8008958:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f003 0301 	and.w	r3, r3, #1
 8008962:	2b00      	cmp	r3, #0
 8008964:	d040      	beq.n	80089e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	2b01      	cmp	r3, #1
 800896c:	d107      	bne.n	800897e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800896e:	4b47      	ldr	r3, [pc, #284]	; (8008a8c <HAL_RCC_ClockConfig+0x1c4>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008976:	2b00      	cmp	r3, #0
 8008978:	d115      	bne.n	80089a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	e07f      	b.n	8008a7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	2b02      	cmp	r3, #2
 8008984:	d107      	bne.n	8008996 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008986:	4b41      	ldr	r3, [pc, #260]	; (8008a8c <HAL_RCC_ClockConfig+0x1c4>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800898e:	2b00      	cmp	r3, #0
 8008990:	d109      	bne.n	80089a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	e073      	b.n	8008a7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008996:	4b3d      	ldr	r3, [pc, #244]	; (8008a8c <HAL_RCC_ClockConfig+0x1c4>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f003 0302 	and.w	r3, r3, #2
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d101      	bne.n	80089a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	e06b      	b.n	8008a7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80089a6:	4b39      	ldr	r3, [pc, #228]	; (8008a8c <HAL_RCC_ClockConfig+0x1c4>)
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	f023 0203 	bic.w	r2, r3, #3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	4936      	ldr	r1, [pc, #216]	; (8008a8c <HAL_RCC_ClockConfig+0x1c4>)
 80089b4:	4313      	orrs	r3, r2
 80089b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80089b8:	f7ff f8fa 	bl	8007bb0 <HAL_GetTick>
 80089bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089be:	e00a      	b.n	80089d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089c0:	f7ff f8f6 	bl	8007bb0 <HAL_GetTick>
 80089c4:	4602      	mov	r2, r0
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d901      	bls.n	80089d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80089d2:	2303      	movs	r3, #3
 80089d4:	e053      	b.n	8008a7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089d6:	4b2d      	ldr	r3, [pc, #180]	; (8008a8c <HAL_RCC_ClockConfig+0x1c4>)
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	f003 020c 	and.w	r2, r3, #12
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d1eb      	bne.n	80089c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80089e8:	4b27      	ldr	r3, [pc, #156]	; (8008a88 <HAL_RCC_ClockConfig+0x1c0>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 0307 	and.w	r3, r3, #7
 80089f0:	683a      	ldr	r2, [r7, #0]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d210      	bcs.n	8008a18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089f6:	4b24      	ldr	r3, [pc, #144]	; (8008a88 <HAL_RCC_ClockConfig+0x1c0>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f023 0207 	bic.w	r2, r3, #7
 80089fe:	4922      	ldr	r1, [pc, #136]	; (8008a88 <HAL_RCC_ClockConfig+0x1c0>)
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	4313      	orrs	r3, r2
 8008a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a06:	4b20      	ldr	r3, [pc, #128]	; (8008a88 <HAL_RCC_ClockConfig+0x1c0>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f003 0307 	and.w	r3, r3, #7
 8008a0e:	683a      	ldr	r2, [r7, #0]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d001      	beq.n	8008a18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	e032      	b.n	8008a7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f003 0304 	and.w	r3, r3, #4
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d008      	beq.n	8008a36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a24:	4b19      	ldr	r3, [pc, #100]	; (8008a8c <HAL_RCC_ClockConfig+0x1c4>)
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	4916      	ldr	r1, [pc, #88]	; (8008a8c <HAL_RCC_ClockConfig+0x1c4>)
 8008a32:	4313      	orrs	r3, r2
 8008a34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f003 0308 	and.w	r3, r3, #8
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d009      	beq.n	8008a56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008a42:	4b12      	ldr	r3, [pc, #72]	; (8008a8c <HAL_RCC_ClockConfig+0x1c4>)
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	00db      	lsls	r3, r3, #3
 8008a50:	490e      	ldr	r1, [pc, #56]	; (8008a8c <HAL_RCC_ClockConfig+0x1c4>)
 8008a52:	4313      	orrs	r3, r2
 8008a54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008a56:	f000 f821 	bl	8008a9c <HAL_RCC_GetSysClockFreq>
 8008a5a:	4601      	mov	r1, r0
 8008a5c:	4b0b      	ldr	r3, [pc, #44]	; (8008a8c <HAL_RCC_ClockConfig+0x1c4>)
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	091b      	lsrs	r3, r3, #4
 8008a62:	f003 030f 	and.w	r3, r3, #15
 8008a66:	4a0a      	ldr	r2, [pc, #40]	; (8008a90 <HAL_RCC_ClockConfig+0x1c8>)
 8008a68:	5cd3      	ldrb	r3, [r2, r3]
 8008a6a:	fa21 f303 	lsr.w	r3, r1, r3
 8008a6e:	4a09      	ldr	r2, [pc, #36]	; (8008a94 <HAL_RCC_ClockConfig+0x1cc>)
 8008a70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008a72:	4b09      	ldr	r3, [pc, #36]	; (8008a98 <HAL_RCC_ClockConfig+0x1d0>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7ff f858 	bl	8007b2c <HAL_InitTick>

  return HAL_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	40022000 	.word	0x40022000
 8008a8c:	40021000 	.word	0x40021000
 8008a90:	0800d5b0 	.word	0x0800d5b0
 8008a94:	20000070 	.word	0x20000070
 8008a98:	20000074 	.word	0x20000074

08008a9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a9c:	b490      	push	{r4, r7}
 8008a9e:	b08a      	sub	sp, #40	; 0x28
 8008aa0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008aa2:	4b2a      	ldr	r3, [pc, #168]	; (8008b4c <HAL_RCC_GetSysClockFreq+0xb0>)
 8008aa4:	1d3c      	adds	r4, r7, #4
 8008aa6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008aa8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008aac:	4b28      	ldr	r3, [pc, #160]	; (8008b50 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008aae:	881b      	ldrh	r3, [r3, #0]
 8008ab0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	61fb      	str	r3, [r7, #28]
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	61bb      	str	r3, [r7, #24]
 8008aba:	2300      	movs	r3, #0
 8008abc:	627b      	str	r3, [r7, #36]	; 0x24
 8008abe:	2300      	movs	r3, #0
 8008ac0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008ac6:	4b23      	ldr	r3, [pc, #140]	; (8008b54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	f003 030c 	and.w	r3, r3, #12
 8008ad2:	2b04      	cmp	r3, #4
 8008ad4:	d002      	beq.n	8008adc <HAL_RCC_GetSysClockFreq+0x40>
 8008ad6:	2b08      	cmp	r3, #8
 8008ad8:	d003      	beq.n	8008ae2 <HAL_RCC_GetSysClockFreq+0x46>
 8008ada:	e02d      	b.n	8008b38 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008adc:	4b1e      	ldr	r3, [pc, #120]	; (8008b58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008ade:	623b      	str	r3, [r7, #32]
      break;
 8008ae0:	e02d      	b.n	8008b3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	0c9b      	lsrs	r3, r3, #18
 8008ae6:	f003 030f 	and.w	r3, r3, #15
 8008aea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008aee:	4413      	add	r3, r2
 8008af0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008af4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d013      	beq.n	8008b28 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008b00:	4b14      	ldr	r3, [pc, #80]	; (8008b54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	0c5b      	lsrs	r3, r3, #17
 8008b06:	f003 0301 	and.w	r3, r3, #1
 8008b0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008b0e:	4413      	add	r3, r2
 8008b10:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008b14:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	4a0f      	ldr	r2, [pc, #60]	; (8008b58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008b1a:	fb02 f203 	mul.w	r2, r2, r3
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b24:	627b      	str	r3, [r7, #36]	; 0x24
 8008b26:	e004      	b.n	8008b32 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	4a0c      	ldr	r2, [pc, #48]	; (8008b5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8008b2c:	fb02 f303 	mul.w	r3, r2, r3
 8008b30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8008b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b34:	623b      	str	r3, [r7, #32]
      break;
 8008b36:	e002      	b.n	8008b3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008b38:	4b07      	ldr	r3, [pc, #28]	; (8008b58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008b3a:	623b      	str	r3, [r7, #32]
      break;
 8008b3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008b3e:	6a3b      	ldr	r3, [r7, #32]
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3728      	adds	r7, #40	; 0x28
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bc90      	pop	{r4, r7}
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop
 8008b4c:	0800bddc 	.word	0x0800bddc
 8008b50:	0800bdec 	.word	0x0800bdec
 8008b54:	40021000 	.word	0x40021000
 8008b58:	007a1200 	.word	0x007a1200
 8008b5c:	003d0900 	.word	0x003d0900

08008b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b60:	b480      	push	{r7}
 8008b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b64:	4b02      	ldr	r3, [pc, #8]	; (8008b70 <HAL_RCC_GetHCLKFreq+0x10>)
 8008b66:	681b      	ldr	r3, [r3, #0]
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bc80      	pop	{r7}
 8008b6e:	4770      	bx	lr
 8008b70:	20000070 	.word	0x20000070

08008b74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008b78:	f7ff fff2 	bl	8008b60 <HAL_RCC_GetHCLKFreq>
 8008b7c:	4601      	mov	r1, r0
 8008b7e:	4b05      	ldr	r3, [pc, #20]	; (8008b94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	0a1b      	lsrs	r3, r3, #8
 8008b84:	f003 0307 	and.w	r3, r3, #7
 8008b88:	4a03      	ldr	r2, [pc, #12]	; (8008b98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b8a:	5cd3      	ldrb	r3, [r2, r3]
 8008b8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	bd80      	pop	{r7, pc}
 8008b94:	40021000 	.word	0x40021000
 8008b98:	0800d5c0 	.word	0x0800d5c0

08008b9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008ba0:	f7ff ffde 	bl	8008b60 <HAL_RCC_GetHCLKFreq>
 8008ba4:	4601      	mov	r1, r0
 8008ba6:	4b05      	ldr	r3, [pc, #20]	; (8008bbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	0adb      	lsrs	r3, r3, #11
 8008bac:	f003 0307 	and.w	r3, r3, #7
 8008bb0:	4a03      	ldr	r2, [pc, #12]	; (8008bc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008bb2:	5cd3      	ldrb	r3, [r2, r3]
 8008bb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	40021000 	.word	0x40021000
 8008bc0:	0800d5c0 	.word	0x0800d5c0

08008bc4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008bcc:	4b0a      	ldr	r3, [pc, #40]	; (8008bf8 <RCC_Delay+0x34>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a0a      	ldr	r2, [pc, #40]	; (8008bfc <RCC_Delay+0x38>)
 8008bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8008bd6:	0a5b      	lsrs	r3, r3, #9
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	fb02 f303 	mul.w	r3, r2, r3
 8008bde:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008be0:	bf00      	nop
  }
  while (Delay --);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	1e5a      	subs	r2, r3, #1
 8008be6:	60fa      	str	r2, [r7, #12]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d1f9      	bne.n	8008be0 <RCC_Delay+0x1c>
}
 8008bec:	bf00      	nop
 8008bee:	3714      	adds	r7, #20
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bc80      	pop	{r7}
 8008bf4:	4770      	bx	lr
 8008bf6:	bf00      	nop
 8008bf8:	20000070 	.word	0x20000070
 8008bfc:	10624dd3 	.word	0x10624dd3

08008c00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d101      	bne.n	8008c12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e041      	b.n	8008c96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c18:	b2db      	uxtb	r3, r3
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d106      	bne.n	8008c2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2200      	movs	r2, #0
 8008c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f7fe fde2 	bl	80077f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2202      	movs	r2, #2
 8008c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	3304      	adds	r3, #4
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	4610      	mov	r0, r2
 8008c40:	f000 fa7a 	bl	8009138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3708      	adds	r7, #8
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
	...

08008ca0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b085      	sub	sp, #20
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d001      	beq.n	8008cb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e044      	b.n	8008d42 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2202      	movs	r2, #2
 8008cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	68da      	ldr	r2, [r3, #12]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f042 0201 	orr.w	r2, r2, #1
 8008cce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a1d      	ldr	r2, [pc, #116]	; (8008d4c <HAL_TIM_Base_Start_IT+0xac>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d018      	beq.n	8008d0c <HAL_TIM_Base_Start_IT+0x6c>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a1c      	ldr	r2, [pc, #112]	; (8008d50 <HAL_TIM_Base_Start_IT+0xb0>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d013      	beq.n	8008d0c <HAL_TIM_Base_Start_IT+0x6c>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cec:	d00e      	beq.n	8008d0c <HAL_TIM_Base_Start_IT+0x6c>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a18      	ldr	r2, [pc, #96]	; (8008d54 <HAL_TIM_Base_Start_IT+0xb4>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d009      	beq.n	8008d0c <HAL_TIM_Base_Start_IT+0x6c>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a16      	ldr	r2, [pc, #88]	; (8008d58 <HAL_TIM_Base_Start_IT+0xb8>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d004      	beq.n	8008d0c <HAL_TIM_Base_Start_IT+0x6c>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a15      	ldr	r2, [pc, #84]	; (8008d5c <HAL_TIM_Base_Start_IT+0xbc>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d111      	bne.n	8008d30 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	f003 0307 	and.w	r3, r3, #7
 8008d16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2b06      	cmp	r3, #6
 8008d1c:	d010      	beq.n	8008d40 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f042 0201 	orr.w	r2, r2, #1
 8008d2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d2e:	e007      	b.n	8008d40 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f042 0201 	orr.w	r2, r2, #1
 8008d3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3714      	adds	r7, #20
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bc80      	pop	{r7}
 8008d4a:	4770      	bx	lr
 8008d4c:	40012c00 	.word	0x40012c00
 8008d50:	40013400 	.word	0x40013400
 8008d54:	40000400 	.word	0x40000400
 8008d58:	40000800 	.word	0x40000800
 8008d5c:	40000c00 	.word	0x40000c00

08008d60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	f003 0302 	and.w	r3, r3, #2
 8008d72:	2b02      	cmp	r3, #2
 8008d74:	d122      	bne.n	8008dbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	f003 0302 	and.w	r3, r3, #2
 8008d80:	2b02      	cmp	r3, #2
 8008d82:	d11b      	bne.n	8008dbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f06f 0202 	mvn.w	r2, #2
 8008d8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2201      	movs	r2, #1
 8008d92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	699b      	ldr	r3, [r3, #24]
 8008d9a:	f003 0303 	and.w	r3, r3, #3
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d003      	beq.n	8008daa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 f9ad 	bl	8009102 <HAL_TIM_IC_CaptureCallback>
 8008da8:	e005      	b.n	8008db6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 f9a0 	bl	80090f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 f9af 	bl	8009114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	f003 0304 	and.w	r3, r3, #4
 8008dc6:	2b04      	cmp	r3, #4
 8008dc8:	d122      	bne.n	8008e10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	f003 0304 	and.w	r3, r3, #4
 8008dd4:	2b04      	cmp	r3, #4
 8008dd6:	d11b      	bne.n	8008e10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f06f 0204 	mvn.w	r2, #4
 8008de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2202      	movs	r2, #2
 8008de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	699b      	ldr	r3, [r3, #24]
 8008dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d003      	beq.n	8008dfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 f983 	bl	8009102 <HAL_TIM_IC_CaptureCallback>
 8008dfc:	e005      	b.n	8008e0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 f976 	bl	80090f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 f985 	bl	8009114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	f003 0308 	and.w	r3, r3, #8
 8008e1a:	2b08      	cmp	r3, #8
 8008e1c:	d122      	bne.n	8008e64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	f003 0308 	and.w	r3, r3, #8
 8008e28:	2b08      	cmp	r3, #8
 8008e2a:	d11b      	bne.n	8008e64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f06f 0208 	mvn.w	r2, #8
 8008e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2204      	movs	r2, #4
 8008e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	69db      	ldr	r3, [r3, #28]
 8008e42:	f003 0303 	and.w	r3, r3, #3
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d003      	beq.n	8008e52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 f959 	bl	8009102 <HAL_TIM_IC_CaptureCallback>
 8008e50:	e005      	b.n	8008e5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 f94c 	bl	80090f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 f95b 	bl	8009114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	f003 0310 	and.w	r3, r3, #16
 8008e6e:	2b10      	cmp	r3, #16
 8008e70:	d122      	bne.n	8008eb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	f003 0310 	and.w	r3, r3, #16
 8008e7c:	2b10      	cmp	r3, #16
 8008e7e:	d11b      	bne.n	8008eb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f06f 0210 	mvn.w	r2, #16
 8008e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2208      	movs	r2, #8
 8008e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	69db      	ldr	r3, [r3, #28]
 8008e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d003      	beq.n	8008ea6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 f92f 	bl	8009102 <HAL_TIM_IC_CaptureCallback>
 8008ea4:	e005      	b.n	8008eb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 f922 	bl	80090f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 f931 	bl	8009114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	691b      	ldr	r3, [r3, #16]
 8008ebe:	f003 0301 	and.w	r3, r3, #1
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d10e      	bne.n	8008ee4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	f003 0301 	and.w	r3, r3, #1
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d107      	bne.n	8008ee4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f06f 0201 	mvn.w	r2, #1
 8008edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 f8fd 	bl	80090de <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eee:	2b80      	cmp	r3, #128	; 0x80
 8008ef0:	d10e      	bne.n	8008f10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008efc:	2b80      	cmp	r3, #128	; 0x80
 8008efe:	d107      	bne.n	8008f10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 fa99 	bl	8009442 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	691b      	ldr	r3, [r3, #16]
 8008f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f1a:	2b40      	cmp	r3, #64	; 0x40
 8008f1c:	d10e      	bne.n	8008f3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f28:	2b40      	cmp	r3, #64	; 0x40
 8008f2a:	d107      	bne.n	8008f3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 f8f5 	bl	8009126 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	691b      	ldr	r3, [r3, #16]
 8008f42:	f003 0320 	and.w	r3, r3, #32
 8008f46:	2b20      	cmp	r3, #32
 8008f48:	d10e      	bne.n	8008f68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	f003 0320 	and.w	r3, r3, #32
 8008f54:	2b20      	cmp	r3, #32
 8008f56:	d107      	bne.n	8008f68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f06f 0220 	mvn.w	r2, #32
 8008f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 fa64 	bl	8009430 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f68:	bf00      	nop
 8008f6a:	3708      	adds	r7, #8
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d101      	bne.n	8008f88 <HAL_TIM_ConfigClockSource+0x18>
 8008f84:	2302      	movs	r3, #2
 8008f86:	e0a6      	b.n	80090d6 <HAL_TIM_ConfigClockSource+0x166>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2202      	movs	r2, #2
 8008f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008fa6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008fae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	68fa      	ldr	r2, [r7, #12]
 8008fb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2b40      	cmp	r3, #64	; 0x40
 8008fbe:	d067      	beq.n	8009090 <HAL_TIM_ConfigClockSource+0x120>
 8008fc0:	2b40      	cmp	r3, #64	; 0x40
 8008fc2:	d80b      	bhi.n	8008fdc <HAL_TIM_ConfigClockSource+0x6c>
 8008fc4:	2b10      	cmp	r3, #16
 8008fc6:	d073      	beq.n	80090b0 <HAL_TIM_ConfigClockSource+0x140>
 8008fc8:	2b10      	cmp	r3, #16
 8008fca:	d802      	bhi.n	8008fd2 <HAL_TIM_ConfigClockSource+0x62>
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d06f      	beq.n	80090b0 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008fd0:	e078      	b.n	80090c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008fd2:	2b20      	cmp	r3, #32
 8008fd4:	d06c      	beq.n	80090b0 <HAL_TIM_ConfigClockSource+0x140>
 8008fd6:	2b30      	cmp	r3, #48	; 0x30
 8008fd8:	d06a      	beq.n	80090b0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008fda:	e073      	b.n	80090c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008fdc:	2b70      	cmp	r3, #112	; 0x70
 8008fde:	d00d      	beq.n	8008ffc <HAL_TIM_ConfigClockSource+0x8c>
 8008fe0:	2b70      	cmp	r3, #112	; 0x70
 8008fe2:	d804      	bhi.n	8008fee <HAL_TIM_ConfigClockSource+0x7e>
 8008fe4:	2b50      	cmp	r3, #80	; 0x50
 8008fe6:	d033      	beq.n	8009050 <HAL_TIM_ConfigClockSource+0xe0>
 8008fe8:	2b60      	cmp	r3, #96	; 0x60
 8008fea:	d041      	beq.n	8009070 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008fec:	e06a      	b.n	80090c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ff2:	d066      	beq.n	80090c2 <HAL_TIM_ConfigClockSource+0x152>
 8008ff4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ff8:	d017      	beq.n	800902a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008ffa:	e063      	b.n	80090c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6818      	ldr	r0, [r3, #0]
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	6899      	ldr	r1, [r3, #8]
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	685a      	ldr	r2, [r3, #4]
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	f000 f985 	bl	800931a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800901e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	68fa      	ldr	r2, [r7, #12]
 8009026:	609a      	str	r2, [r3, #8]
      break;
 8009028:	e04c      	b.n	80090c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6818      	ldr	r0, [r3, #0]
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	6899      	ldr	r1, [r3, #8]
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	685a      	ldr	r2, [r3, #4]
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	68db      	ldr	r3, [r3, #12]
 800903a:	f000 f96e 	bl	800931a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	689a      	ldr	r2, [r3, #8]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800904c:	609a      	str	r2, [r3, #8]
      break;
 800904e:	e039      	b.n	80090c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6818      	ldr	r0, [r3, #0]
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	6859      	ldr	r1, [r3, #4]
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	461a      	mov	r2, r3
 800905e:	f000 f8e5 	bl	800922c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2150      	movs	r1, #80	; 0x50
 8009068:	4618      	mov	r0, r3
 800906a:	f000 f93c 	bl	80092e6 <TIM_ITRx_SetConfig>
      break;
 800906e:	e029      	b.n	80090c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6818      	ldr	r0, [r3, #0]
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	6859      	ldr	r1, [r3, #4]
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	461a      	mov	r2, r3
 800907e:	f000 f903 	bl	8009288 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2160      	movs	r1, #96	; 0x60
 8009088:	4618      	mov	r0, r3
 800908a:	f000 f92c 	bl	80092e6 <TIM_ITRx_SetConfig>
      break;
 800908e:	e019      	b.n	80090c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6818      	ldr	r0, [r3, #0]
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	6859      	ldr	r1, [r3, #4]
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	461a      	mov	r2, r3
 800909e:	f000 f8c5 	bl	800922c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2140      	movs	r1, #64	; 0x40
 80090a8:	4618      	mov	r0, r3
 80090aa:	f000 f91c 	bl	80092e6 <TIM_ITRx_SetConfig>
      break;
 80090ae:	e009      	b.n	80090c4 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4619      	mov	r1, r3
 80090ba:	4610      	mov	r0, r2
 80090bc:	f000 f913 	bl	80092e6 <TIM_ITRx_SetConfig>
        break;
 80090c0:	e000      	b.n	80090c4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80090c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2201      	movs	r2, #1
 80090c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80090de:	b480      	push	{r7}
 80090e0:	b083      	sub	sp, #12
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80090e6:	bf00      	nop
 80090e8:	370c      	adds	r7, #12
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bc80      	pop	{r7}
 80090ee:	4770      	bx	lr

080090f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80090f8:	bf00      	nop
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bc80      	pop	{r7}
 8009100:	4770      	bx	lr

08009102 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009102:	b480      	push	{r7}
 8009104:	b083      	sub	sp, #12
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800910a:	bf00      	nop
 800910c:	370c      	adds	r7, #12
 800910e:	46bd      	mov	sp, r7
 8009110:	bc80      	pop	{r7}
 8009112:	4770      	bx	lr

08009114 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800911c:	bf00      	nop
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	bc80      	pop	{r7}
 8009124:	4770      	bx	lr

08009126 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009126:	b480      	push	{r7}
 8009128:	b083      	sub	sp, #12
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800912e:	bf00      	nop
 8009130:	370c      	adds	r7, #12
 8009132:	46bd      	mov	sp, r7
 8009134:	bc80      	pop	{r7}
 8009136:	4770      	bx	lr

08009138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009138:	b480      	push	{r7}
 800913a:	b085      	sub	sp, #20
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	4a33      	ldr	r2, [pc, #204]	; (8009218 <TIM_Base_SetConfig+0xe0>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d013      	beq.n	8009178 <TIM_Base_SetConfig+0x40>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	4a32      	ldr	r2, [pc, #200]	; (800921c <TIM_Base_SetConfig+0xe4>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d00f      	beq.n	8009178 <TIM_Base_SetConfig+0x40>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800915e:	d00b      	beq.n	8009178 <TIM_Base_SetConfig+0x40>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	4a2f      	ldr	r2, [pc, #188]	; (8009220 <TIM_Base_SetConfig+0xe8>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d007      	beq.n	8009178 <TIM_Base_SetConfig+0x40>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4a2e      	ldr	r2, [pc, #184]	; (8009224 <TIM_Base_SetConfig+0xec>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d003      	beq.n	8009178 <TIM_Base_SetConfig+0x40>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	4a2d      	ldr	r2, [pc, #180]	; (8009228 <TIM_Base_SetConfig+0xf0>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d108      	bne.n	800918a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800917e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	68fa      	ldr	r2, [r7, #12]
 8009186:	4313      	orrs	r3, r2
 8009188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4a22      	ldr	r2, [pc, #136]	; (8009218 <TIM_Base_SetConfig+0xe0>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d013      	beq.n	80091ba <TIM_Base_SetConfig+0x82>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	4a21      	ldr	r2, [pc, #132]	; (800921c <TIM_Base_SetConfig+0xe4>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d00f      	beq.n	80091ba <TIM_Base_SetConfig+0x82>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091a0:	d00b      	beq.n	80091ba <TIM_Base_SetConfig+0x82>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	4a1e      	ldr	r2, [pc, #120]	; (8009220 <TIM_Base_SetConfig+0xe8>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d007      	beq.n	80091ba <TIM_Base_SetConfig+0x82>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4a1d      	ldr	r2, [pc, #116]	; (8009224 <TIM_Base_SetConfig+0xec>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d003      	beq.n	80091ba <TIM_Base_SetConfig+0x82>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4a1c      	ldr	r2, [pc, #112]	; (8009228 <TIM_Base_SetConfig+0xf0>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d108      	bne.n	80091cc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	68db      	ldr	r3, [r3, #12]
 80091c6:	68fa      	ldr	r2, [r7, #12]
 80091c8:	4313      	orrs	r3, r2
 80091ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	695b      	ldr	r3, [r3, #20]
 80091d6:	4313      	orrs	r3, r2
 80091d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	68fa      	ldr	r2, [r7, #12]
 80091de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	689a      	ldr	r2, [r3, #8]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4a09      	ldr	r2, [pc, #36]	; (8009218 <TIM_Base_SetConfig+0xe0>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d003      	beq.n	8009200 <TIM_Base_SetConfig+0xc8>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4a08      	ldr	r2, [pc, #32]	; (800921c <TIM_Base_SetConfig+0xe4>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d103      	bne.n	8009208 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	691a      	ldr	r2, [r3, #16]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	615a      	str	r2, [r3, #20]
}
 800920e:	bf00      	nop
 8009210:	3714      	adds	r7, #20
 8009212:	46bd      	mov	sp, r7
 8009214:	bc80      	pop	{r7}
 8009216:	4770      	bx	lr
 8009218:	40012c00 	.word	0x40012c00
 800921c:	40013400 	.word	0x40013400
 8009220:	40000400 	.word	0x40000400
 8009224:	40000800 	.word	0x40000800
 8009228:	40000c00 	.word	0x40000c00

0800922c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800922c:	b480      	push	{r7}
 800922e:	b087      	sub	sp, #28
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	60b9      	str	r1, [r7, #8]
 8009236:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6a1b      	ldr	r3, [r3, #32]
 800923c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6a1b      	ldr	r3, [r3, #32]
 8009242:	f023 0201 	bic.w	r2, r3, #1
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	699b      	ldr	r3, [r3, #24]
 800924e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009256:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	011b      	lsls	r3, r3, #4
 800925c:	693a      	ldr	r2, [r7, #16]
 800925e:	4313      	orrs	r3, r2
 8009260:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	f023 030a 	bic.w	r3, r3, #10
 8009268:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800926a:	697a      	ldr	r2, [r7, #20]
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	4313      	orrs	r3, r2
 8009270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	693a      	ldr	r2, [r7, #16]
 8009276:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	697a      	ldr	r2, [r7, #20]
 800927c:	621a      	str	r2, [r3, #32]
}
 800927e:	bf00      	nop
 8009280:	371c      	adds	r7, #28
 8009282:	46bd      	mov	sp, r7
 8009284:	bc80      	pop	{r7}
 8009286:	4770      	bx	lr

08009288 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009288:	b480      	push	{r7}
 800928a:	b087      	sub	sp, #28
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6a1b      	ldr	r3, [r3, #32]
 8009298:	f023 0210 	bic.w	r2, r3, #16
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	699b      	ldr	r3, [r3, #24]
 80092a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	6a1b      	ldr	r3, [r3, #32]
 80092aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80092b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	031b      	lsls	r3, r3, #12
 80092b8:	697a      	ldr	r2, [r7, #20]
 80092ba:	4313      	orrs	r3, r2
 80092bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80092c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	011b      	lsls	r3, r3, #4
 80092ca:	693a      	ldr	r2, [r7, #16]
 80092cc:	4313      	orrs	r3, r2
 80092ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	697a      	ldr	r2, [r7, #20]
 80092d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	693a      	ldr	r2, [r7, #16]
 80092da:	621a      	str	r2, [r3, #32]
}
 80092dc:	bf00      	nop
 80092de:	371c      	adds	r7, #28
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bc80      	pop	{r7}
 80092e4:	4770      	bx	lr

080092e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80092e6:	b480      	push	{r7}
 80092e8:	b085      	sub	sp, #20
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
 80092ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80092fe:	683a      	ldr	r2, [r7, #0]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	4313      	orrs	r3, r2
 8009304:	f043 0307 	orr.w	r3, r3, #7
 8009308:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	68fa      	ldr	r2, [r7, #12]
 800930e:	609a      	str	r2, [r3, #8]
}
 8009310:	bf00      	nop
 8009312:	3714      	adds	r7, #20
 8009314:	46bd      	mov	sp, r7
 8009316:	bc80      	pop	{r7}
 8009318:	4770      	bx	lr

0800931a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800931a:	b480      	push	{r7}
 800931c:	b087      	sub	sp, #28
 800931e:	af00      	add	r7, sp, #0
 8009320:	60f8      	str	r0, [r7, #12]
 8009322:	60b9      	str	r1, [r7, #8]
 8009324:	607a      	str	r2, [r7, #4]
 8009326:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009334:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	021a      	lsls	r2, r3, #8
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	431a      	orrs	r2, r3
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	4313      	orrs	r3, r2
 8009342:	697a      	ldr	r2, [r7, #20]
 8009344:	4313      	orrs	r3, r2
 8009346:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	697a      	ldr	r2, [r7, #20]
 800934c:	609a      	str	r2, [r3, #8]
}
 800934e:	bf00      	nop
 8009350:	371c      	adds	r7, #28
 8009352:	46bd      	mov	sp, r7
 8009354:	bc80      	pop	{r7}
 8009356:	4770      	bx	lr

08009358 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009358:	b480      	push	{r7}
 800935a:	b085      	sub	sp, #20
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009368:	2b01      	cmp	r3, #1
 800936a:	d101      	bne.n	8009370 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800936c:	2302      	movs	r3, #2
 800936e:	e050      	b.n	8009412 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2202      	movs	r2, #2
 800937c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009396:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	68fa      	ldr	r2, [r7, #12]
 800939e:	4313      	orrs	r3, r2
 80093a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68fa      	ldr	r2, [r7, #12]
 80093a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a1b      	ldr	r2, [pc, #108]	; (800941c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d018      	beq.n	80093e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a19      	ldr	r2, [pc, #100]	; (8009420 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d013      	beq.n	80093e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093c6:	d00e      	beq.n	80093e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a15      	ldr	r2, [pc, #84]	; (8009424 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d009      	beq.n	80093e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a14      	ldr	r2, [pc, #80]	; (8009428 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d004      	beq.n	80093e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a12      	ldr	r2, [pc, #72]	; (800942c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d10c      	bne.n	8009400 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	68ba      	ldr	r2, [r7, #8]
 80093f4:	4313      	orrs	r3, r2
 80093f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	68ba      	ldr	r2, [r7, #8]
 80093fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009410:	2300      	movs	r3, #0
}
 8009412:	4618      	mov	r0, r3
 8009414:	3714      	adds	r7, #20
 8009416:	46bd      	mov	sp, r7
 8009418:	bc80      	pop	{r7}
 800941a:	4770      	bx	lr
 800941c:	40012c00 	.word	0x40012c00
 8009420:	40013400 	.word	0x40013400
 8009424:	40000400 	.word	0x40000400
 8009428:	40000800 	.word	0x40000800
 800942c:	40000c00 	.word	0x40000c00

08009430 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009438:	bf00      	nop
 800943a:	370c      	adds	r7, #12
 800943c:	46bd      	mov	sp, r7
 800943e:	bc80      	pop	{r7}
 8009440:	4770      	bx	lr

08009442 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009442:	b480      	push	{r7}
 8009444:	b083      	sub	sp, #12
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800944a:	bf00      	nop
 800944c:	370c      	adds	r7, #12
 800944e:	46bd      	mov	sp, r7
 8009450:	bc80      	pop	{r7}
 8009452:	4770      	bx	lr

08009454 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d101      	bne.n	8009466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	e03f      	b.n	80094e6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800946c:	b2db      	uxtb	r3, r3
 800946e:	2b00      	cmp	r3, #0
 8009470:	d106      	bne.n	8009480 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2200      	movs	r2, #0
 8009476:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f7fe f9de 	bl	800783c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2224      	movs	r2, #36	; 0x24
 8009484:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	68da      	ldr	r2, [r3, #12]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009496:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 fb83 	bl	8009ba4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	691a      	ldr	r2, [r3, #16]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80094ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	695a      	ldr	r2, [r3, #20]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80094bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	68da      	ldr	r2, [r3, #12]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80094cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2220      	movs	r2, #32
 80094d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2220      	movs	r2, #32
 80094e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80094e4:	2300      	movs	r3, #0
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3708      	adds	r7, #8
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}

080094ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094ee:	b580      	push	{r7, lr}
 80094f0:	b08a      	sub	sp, #40	; 0x28
 80094f2:	af02      	add	r7, sp, #8
 80094f4:	60f8      	str	r0, [r7, #12]
 80094f6:	60b9      	str	r1, [r7, #8]
 80094f8:	603b      	str	r3, [r7, #0]
 80094fa:	4613      	mov	r3, r2
 80094fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80094fe:	2300      	movs	r3, #0
 8009500:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009508:	b2db      	uxtb	r3, r3
 800950a:	2b20      	cmp	r3, #32
 800950c:	d17c      	bne.n	8009608 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d002      	beq.n	800951a <HAL_UART_Transmit+0x2c>
 8009514:	88fb      	ldrh	r3, [r7, #6]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d101      	bne.n	800951e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800951a:	2301      	movs	r3, #1
 800951c:	e075      	b.n	800960a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009524:	2b01      	cmp	r3, #1
 8009526:	d101      	bne.n	800952c <HAL_UART_Transmit+0x3e>
 8009528:	2302      	movs	r3, #2
 800952a:	e06e      	b.n	800960a <HAL_UART_Transmit+0x11c>
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2201      	movs	r2, #1
 8009530:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2200      	movs	r2, #0
 8009538:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2221      	movs	r2, #33	; 0x21
 800953e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8009542:	f7fe fb35 	bl	8007bb0 <HAL_GetTick>
 8009546:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	88fa      	ldrh	r2, [r7, #6]
 800954c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	88fa      	ldrh	r2, [r7, #6]
 8009552:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800955c:	d108      	bne.n	8009570 <HAL_UART_Transmit+0x82>
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	691b      	ldr	r3, [r3, #16]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d104      	bne.n	8009570 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009566:	2300      	movs	r3, #0
 8009568:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	61bb      	str	r3, [r7, #24]
 800956e:	e003      	b.n	8009578 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009574:	2300      	movs	r3, #0
 8009576:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8009580:	e02a      	b.n	80095d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	9300      	str	r3, [sp, #0]
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	2200      	movs	r2, #0
 800958a:	2180      	movs	r1, #128	; 0x80
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f000 f9a7 	bl	80098e0 <UART_WaitOnFlagUntilTimeout>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d001      	beq.n	800959c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009598:	2303      	movs	r3, #3
 800959a:	e036      	b.n	800960a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800959c:	69fb      	ldr	r3, [r7, #28]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d10b      	bne.n	80095ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80095a2:	69bb      	ldr	r3, [r7, #24]
 80095a4:	881b      	ldrh	r3, [r3, #0]
 80095a6:	461a      	mov	r2, r3
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80095b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	3302      	adds	r3, #2
 80095b6:	61bb      	str	r3, [r7, #24]
 80095b8:	e007      	b.n	80095ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80095ba:	69fb      	ldr	r3, [r7, #28]
 80095bc:	781a      	ldrb	r2, [r3, #0]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	3301      	adds	r3, #1
 80095c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	3b01      	subs	r3, #1
 80095d2:	b29a      	uxth	r2, r3
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80095dc:	b29b      	uxth	r3, r3
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d1cf      	bne.n	8009582 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	9300      	str	r3, [sp, #0]
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	2200      	movs	r2, #0
 80095ea:	2140      	movs	r1, #64	; 0x40
 80095ec:	68f8      	ldr	r0, [r7, #12]
 80095ee:	f000 f977 	bl	80098e0 <UART_WaitOnFlagUntilTimeout>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d001      	beq.n	80095fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80095f8:	2303      	movs	r3, #3
 80095fa:	e006      	b.n	800960a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2220      	movs	r2, #32
 8009600:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8009604:	2300      	movs	r3, #0
 8009606:	e000      	b.n	800960a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009608:	2302      	movs	r3, #2
  }
}
 800960a:	4618      	mov	r0, r3
 800960c:	3720      	adds	r7, #32
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009612:	b480      	push	{r7}
 8009614:	b085      	sub	sp, #20
 8009616:	af00      	add	r7, sp, #0
 8009618:	60f8      	str	r0, [r7, #12]
 800961a:	60b9      	str	r1, [r7, #8]
 800961c:	4613      	mov	r3, r2
 800961e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009626:	b2db      	uxtb	r3, r3
 8009628:	2b20      	cmp	r3, #32
 800962a:	d140      	bne.n	80096ae <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d002      	beq.n	8009638 <HAL_UART_Receive_IT+0x26>
 8009632:	88fb      	ldrh	r3, [r7, #6]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d101      	bne.n	800963c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009638:	2301      	movs	r3, #1
 800963a:	e039      	b.n	80096b0 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009642:	2b01      	cmp	r3, #1
 8009644:	d101      	bne.n	800964a <HAL_UART_Receive_IT+0x38>
 8009646:	2302      	movs	r3, #2
 8009648:	e032      	b.n	80096b0 <HAL_UART_Receive_IT+0x9e>
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2201      	movs	r2, #1
 800964e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	68ba      	ldr	r2, [r7, #8]
 8009656:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	88fa      	ldrh	r2, [r7, #6]
 800965c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	88fa      	ldrh	r2, [r7, #6]
 8009662:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2200      	movs	r2, #0
 8009668:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2222      	movs	r2, #34	; 0x22
 800966e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2200      	movs	r2, #0
 8009676:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	68da      	ldr	r2, [r3, #12]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009688:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	695a      	ldr	r2, [r3, #20]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f042 0201 	orr.w	r2, r2, #1
 8009698:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	68da      	ldr	r2, [r3, #12]
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f042 0220 	orr.w	r2, r2, #32
 80096a8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80096aa:	2300      	movs	r3, #0
 80096ac:	e000      	b.n	80096b0 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80096ae:	2302      	movs	r3, #2
  }
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3714      	adds	r7, #20
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bc80      	pop	{r7}
 80096b8:	4770      	bx	lr
	...

080096bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b088      	sub	sp, #32
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	695b      	ldr	r3, [r3, #20]
 80096da:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80096dc:	2300      	movs	r3, #0
 80096de:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80096e0:	2300      	movs	r3, #0
 80096e2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80096e4:	69fb      	ldr	r3, [r7, #28]
 80096e6:	f003 030f 	and.w	r3, r3, #15
 80096ea:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d10d      	bne.n	800970e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80096f2:	69fb      	ldr	r3, [r7, #28]
 80096f4:	f003 0320 	and.w	r3, r3, #32
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d008      	beq.n	800970e <HAL_UART_IRQHandler+0x52>
 80096fc:	69bb      	ldr	r3, [r7, #24]
 80096fe:	f003 0320 	and.w	r3, r3, #32
 8009702:	2b00      	cmp	r3, #0
 8009704:	d003      	beq.n	800970e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 f9cc 	bl	8009aa4 <UART_Receive_IT>
      return;
 800970c:	e0d1      	b.n	80098b2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	2b00      	cmp	r3, #0
 8009712:	f000 80b0 	beq.w	8009876 <HAL_UART_IRQHandler+0x1ba>
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	f003 0301 	and.w	r3, r3, #1
 800971c:	2b00      	cmp	r3, #0
 800971e:	d105      	bne.n	800972c <HAL_UART_IRQHandler+0x70>
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009726:	2b00      	cmp	r3, #0
 8009728:	f000 80a5 	beq.w	8009876 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	f003 0301 	and.w	r3, r3, #1
 8009732:	2b00      	cmp	r3, #0
 8009734:	d00a      	beq.n	800974c <HAL_UART_IRQHandler+0x90>
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800973c:	2b00      	cmp	r3, #0
 800973e:	d005      	beq.n	800974c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009744:	f043 0201 	orr.w	r2, r3, #1
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800974c:	69fb      	ldr	r3, [r7, #28]
 800974e:	f003 0304 	and.w	r3, r3, #4
 8009752:	2b00      	cmp	r3, #0
 8009754:	d00a      	beq.n	800976c <HAL_UART_IRQHandler+0xb0>
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	f003 0301 	and.w	r3, r3, #1
 800975c:	2b00      	cmp	r3, #0
 800975e:	d005      	beq.n	800976c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009764:	f043 0202 	orr.w	r2, r3, #2
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	f003 0302 	and.w	r3, r3, #2
 8009772:	2b00      	cmp	r3, #0
 8009774:	d00a      	beq.n	800978c <HAL_UART_IRQHandler+0xd0>
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	f003 0301 	and.w	r3, r3, #1
 800977c:	2b00      	cmp	r3, #0
 800977e:	d005      	beq.n	800978c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009784:	f043 0204 	orr.w	r2, r3, #4
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800978c:	69fb      	ldr	r3, [r7, #28]
 800978e:	f003 0308 	and.w	r3, r3, #8
 8009792:	2b00      	cmp	r3, #0
 8009794:	d00f      	beq.n	80097b6 <HAL_UART_IRQHandler+0xfa>
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	f003 0320 	and.w	r3, r3, #32
 800979c:	2b00      	cmp	r3, #0
 800979e:	d104      	bne.n	80097aa <HAL_UART_IRQHandler+0xee>
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	f003 0301 	and.w	r3, r3, #1
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d005      	beq.n	80097b6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097ae:	f043 0208 	orr.w	r2, r3, #8
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d078      	beq.n	80098b0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	f003 0320 	and.w	r3, r3, #32
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d007      	beq.n	80097d8 <HAL_UART_IRQHandler+0x11c>
 80097c8:	69bb      	ldr	r3, [r7, #24]
 80097ca:	f003 0320 	and.w	r3, r3, #32
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d002      	beq.n	80097d8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 f966 	bl	8009aa4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	695b      	ldr	r3, [r3, #20]
 80097de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	bf14      	ite	ne
 80097e6:	2301      	movne	r3, #1
 80097e8:	2300      	moveq	r3, #0
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097f2:	f003 0308 	and.w	r3, r3, #8
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d102      	bne.n	8009800 <HAL_UART_IRQHandler+0x144>
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d031      	beq.n	8009864 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 f8b7 	bl	8009974 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	695b      	ldr	r3, [r3, #20]
 800980c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009810:	2b00      	cmp	r3, #0
 8009812:	d023      	beq.n	800985c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	695a      	ldr	r2, [r3, #20]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009822:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009828:	2b00      	cmp	r3, #0
 800982a:	d013      	beq.n	8009854 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009830:	4a21      	ldr	r2, [pc, #132]	; (80098b8 <HAL_UART_IRQHandler+0x1fc>)
 8009832:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009838:	4618      	mov	r0, r3
 800983a:	f7fe faf3 	bl	8007e24 <HAL_DMA_Abort_IT>
 800983e:	4603      	mov	r3, r0
 8009840:	2b00      	cmp	r3, #0
 8009842:	d016      	beq.n	8009872 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800984e:	4610      	mov	r0, r2
 8009850:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009852:	e00e      	b.n	8009872 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 f83a 	bl	80098ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800985a:	e00a      	b.n	8009872 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 f836 	bl	80098ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009862:	e006      	b.n	8009872 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 f832 	bl	80098ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8009870:	e01e      	b.n	80098b0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009872:	bf00      	nop
    return;
 8009874:	e01c      	b.n	80098b0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009876:	69fb      	ldr	r3, [r7, #28]
 8009878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800987c:	2b00      	cmp	r3, #0
 800987e:	d008      	beq.n	8009892 <HAL_UART_IRQHandler+0x1d6>
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009886:	2b00      	cmp	r3, #0
 8009888:	d003      	beq.n	8009892 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 f8a3 	bl	80099d6 <UART_Transmit_IT>
    return;
 8009890:	e00f      	b.n	80098b2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009898:	2b00      	cmp	r3, #0
 800989a:	d00a      	beq.n	80098b2 <HAL_UART_IRQHandler+0x1f6>
 800989c:	69bb      	ldr	r3, [r7, #24]
 800989e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d005      	beq.n	80098b2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 f8e4 	bl	8009a74 <UART_EndTransmit_IT>
    return;
 80098ac:	bf00      	nop
 80098ae:	e000      	b.n	80098b2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80098b0:	bf00      	nop
  }
}
 80098b2:	3720      	adds	r7, #32
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	080099af 	.word	0x080099af

080098bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80098c4:	bf00      	nop
 80098c6:	370c      	adds	r7, #12
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bc80      	pop	{r7}
 80098cc:	4770      	bx	lr

080098ce <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80098ce:	b480      	push	{r7}
 80098d0:	b083      	sub	sp, #12
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80098d6:	bf00      	nop
 80098d8:	370c      	adds	r7, #12
 80098da:	46bd      	mov	sp, r7
 80098dc:	bc80      	pop	{r7}
 80098de:	4770      	bx	lr

080098e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	603b      	str	r3, [r7, #0]
 80098ec:	4613      	mov	r3, r2
 80098ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098f0:	e02c      	b.n	800994c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098f8:	d028      	beq.n	800994c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80098fa:	69bb      	ldr	r3, [r7, #24]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d007      	beq.n	8009910 <UART_WaitOnFlagUntilTimeout+0x30>
 8009900:	f7fe f956 	bl	8007bb0 <HAL_GetTick>
 8009904:	4602      	mov	r2, r0
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	1ad3      	subs	r3, r2, r3
 800990a:	69ba      	ldr	r2, [r7, #24]
 800990c:	429a      	cmp	r2, r3
 800990e:	d21d      	bcs.n	800994c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	68da      	ldr	r2, [r3, #12]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800991e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	695a      	ldr	r2, [r3, #20]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f022 0201 	bic.w	r2, r2, #1
 800992e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2220      	movs	r2, #32
 8009934:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2220      	movs	r2, #32
 800993c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2200      	movs	r2, #0
 8009944:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8009948:	2303      	movs	r3, #3
 800994a:	e00f      	b.n	800996c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	681a      	ldr	r2, [r3, #0]
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	4013      	ands	r3, r2
 8009956:	68ba      	ldr	r2, [r7, #8]
 8009958:	429a      	cmp	r2, r3
 800995a:	bf0c      	ite	eq
 800995c:	2301      	moveq	r3, #1
 800995e:	2300      	movne	r3, #0
 8009960:	b2db      	uxtb	r3, r3
 8009962:	461a      	mov	r2, r3
 8009964:	79fb      	ldrb	r3, [r7, #7]
 8009966:	429a      	cmp	r2, r3
 8009968:	d0c3      	beq.n	80098f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800996a:	2300      	movs	r3, #0
}
 800996c:	4618      	mov	r0, r3
 800996e:	3710      	adds	r7, #16
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	68da      	ldr	r2, [r3, #12]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800998a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	695a      	ldr	r2, [r3, #20]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f022 0201 	bic.w	r2, r2, #1
 800999a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2220      	movs	r2, #32
 80099a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80099a4:	bf00      	nop
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bc80      	pop	{r7}
 80099ac:	4770      	bx	lr

080099ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b084      	sub	sp, #16
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2200      	movs	r2, #0
 80099c0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2200      	movs	r2, #0
 80099c6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80099c8:	68f8      	ldr	r0, [r7, #12]
 80099ca:	f7ff ff80 	bl	80098ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099ce:	bf00      	nop
 80099d0:	3710      	adds	r7, #16
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80099d6:	b480      	push	{r7}
 80099d8:	b085      	sub	sp, #20
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	2b21      	cmp	r3, #33	; 0x21
 80099e8:	d13e      	bne.n	8009a68 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099f2:	d114      	bne.n	8009a1e <UART_Transmit_IT+0x48>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	691b      	ldr	r3, [r3, #16]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d110      	bne.n	8009a1e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6a1b      	ldr	r3, [r3, #32]
 8009a00:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	881b      	ldrh	r3, [r3, #0]
 8009a06:	461a      	mov	r2, r3
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a10:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6a1b      	ldr	r3, [r3, #32]
 8009a16:	1c9a      	adds	r2, r3, #2
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	621a      	str	r2, [r3, #32]
 8009a1c:	e008      	b.n	8009a30 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6a1b      	ldr	r3, [r3, #32]
 8009a22:	1c59      	adds	r1, r3, #1
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	6211      	str	r1, [r2, #32]
 8009a28:	781a      	ldrb	r2, [r3, #0]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	3b01      	subs	r3, #1
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d10f      	bne.n	8009a64 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	68da      	ldr	r2, [r3, #12]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a52:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	68da      	ldr	r2, [r3, #12]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a62:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009a64:	2300      	movs	r3, #0
 8009a66:	e000      	b.n	8009a6a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009a68:	2302      	movs	r3, #2
  }
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3714      	adds	r7, #20
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bc80      	pop	{r7}
 8009a72:	4770      	bx	lr

08009a74 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	68da      	ldr	r2, [r3, #12]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a8a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2220      	movs	r2, #32
 8009a90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f7ff ff11 	bl	80098bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009a9a:	2300      	movs	r3, #0
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3708      	adds	r7, #8
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	2b22      	cmp	r3, #34	; 0x22
 8009ab6:	d170      	bne.n	8009b9a <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ac0:	d117      	bne.n	8009af2 <UART_Receive_IT+0x4e>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	691b      	ldr	r3, [r3, #16]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d113      	bne.n	8009af2 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8009aca:	2300      	movs	r3, #0
 8009acc:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ad2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ae0:	b29a      	uxth	r2, r3
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aea:	1c9a      	adds	r2, r3, #2
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	629a      	str	r2, [r3, #40]	; 0x28
 8009af0:	e026      	b.n	8009b40 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009af6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8009af8:	2300      	movs	r3, #0
 8009afa:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	689b      	ldr	r3, [r3, #8]
 8009b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b04:	d007      	beq.n	8009b16 <UART_Receive_IT+0x72>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d10a      	bne.n	8009b24 <UART_Receive_IT+0x80>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	691b      	ldr	r3, [r3, #16]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d106      	bne.n	8009b24 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	b2da      	uxtb	r2, r3
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	701a      	strb	r2, [r3, #0]
 8009b22:	e008      	b.n	8009b36 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	b2db      	uxtb	r3, r3
 8009b2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b30:	b2da      	uxtb	r2, r3
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b3a:	1c5a      	adds	r2, r3, #1
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	3b01      	subs	r3, #1
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	687a      	ldr	r2, [r7, #4]
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d120      	bne.n	8009b96 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	68da      	ldr	r2, [r3, #12]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f022 0220 	bic.w	r2, r2, #32
 8009b62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	68da      	ldr	r2, [r3, #12]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	695a      	ldr	r2, [r3, #20]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f022 0201 	bic.w	r2, r2, #1
 8009b82:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2220      	movs	r2, #32
 8009b88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f7fc fc69 	bl	8006464 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009b92:	2300      	movs	r3, #0
 8009b94:	e002      	b.n	8009b9c <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8009b96:	2300      	movs	r3, #0
 8009b98:	e000      	b.n	8009b9c <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8009b9a:	2302      	movs	r3, #2
  }
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3710      	adds	r7, #16
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	691b      	ldr	r3, [r3, #16]
 8009bb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	68da      	ldr	r2, [r3, #12]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	430a      	orrs	r2, r1
 8009bc0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	689a      	ldr	r2, [r3, #8]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	691b      	ldr	r3, [r3, #16]
 8009bca:	431a      	orrs	r2, r3
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	695b      	ldr	r3, [r3, #20]
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009bde:	f023 030c 	bic.w	r3, r3, #12
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	6812      	ldr	r2, [r2, #0]
 8009be6:	68b9      	ldr	r1, [r7, #8]
 8009be8:	430b      	orrs	r3, r1
 8009bea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	695b      	ldr	r3, [r3, #20]
 8009bf2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	699a      	ldr	r2, [r3, #24]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	430a      	orrs	r2, r1
 8009c00:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a2c      	ldr	r2, [pc, #176]	; (8009cb8 <UART_SetConfig+0x114>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d103      	bne.n	8009c14 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009c0c:	f7fe ffc6 	bl	8008b9c <HAL_RCC_GetPCLK2Freq>
 8009c10:	60f8      	str	r0, [r7, #12]
 8009c12:	e002      	b.n	8009c1a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009c14:	f7fe ffae 	bl	8008b74 <HAL_RCC_GetPCLK1Freq>
 8009c18:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009c1a:	68fa      	ldr	r2, [r7, #12]
 8009c1c:	4613      	mov	r3, r2
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	4413      	add	r3, r2
 8009c22:	009a      	lsls	r2, r3, #2
 8009c24:	441a      	add	r2, r3
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c30:	4a22      	ldr	r2, [pc, #136]	; (8009cbc <UART_SetConfig+0x118>)
 8009c32:	fba2 2303 	umull	r2, r3, r2, r3
 8009c36:	095b      	lsrs	r3, r3, #5
 8009c38:	0119      	lsls	r1, r3, #4
 8009c3a:	68fa      	ldr	r2, [r7, #12]
 8009c3c:	4613      	mov	r3, r2
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	4413      	add	r3, r2
 8009c42:	009a      	lsls	r2, r3, #2
 8009c44:	441a      	add	r2, r3
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c50:	4b1a      	ldr	r3, [pc, #104]	; (8009cbc <UART_SetConfig+0x118>)
 8009c52:	fba3 0302 	umull	r0, r3, r3, r2
 8009c56:	095b      	lsrs	r3, r3, #5
 8009c58:	2064      	movs	r0, #100	; 0x64
 8009c5a:	fb00 f303 	mul.w	r3, r0, r3
 8009c5e:	1ad3      	subs	r3, r2, r3
 8009c60:	011b      	lsls	r3, r3, #4
 8009c62:	3332      	adds	r3, #50	; 0x32
 8009c64:	4a15      	ldr	r2, [pc, #84]	; (8009cbc <UART_SetConfig+0x118>)
 8009c66:	fba2 2303 	umull	r2, r3, r2, r3
 8009c6a:	095b      	lsrs	r3, r3, #5
 8009c6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c70:	4419      	add	r1, r3
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	4613      	mov	r3, r2
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	4413      	add	r3, r2
 8009c7a:	009a      	lsls	r2, r3, #2
 8009c7c:	441a      	add	r2, r3
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c88:	4b0c      	ldr	r3, [pc, #48]	; (8009cbc <UART_SetConfig+0x118>)
 8009c8a:	fba3 0302 	umull	r0, r3, r3, r2
 8009c8e:	095b      	lsrs	r3, r3, #5
 8009c90:	2064      	movs	r0, #100	; 0x64
 8009c92:	fb00 f303 	mul.w	r3, r0, r3
 8009c96:	1ad3      	subs	r3, r2, r3
 8009c98:	011b      	lsls	r3, r3, #4
 8009c9a:	3332      	adds	r3, #50	; 0x32
 8009c9c:	4a07      	ldr	r2, [pc, #28]	; (8009cbc <UART_SetConfig+0x118>)
 8009c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8009ca2:	095b      	lsrs	r3, r3, #5
 8009ca4:	f003 020f 	and.w	r2, r3, #15
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	440a      	add	r2, r1
 8009cae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009cb0:	bf00      	nop
 8009cb2:	3710      	adds	r7, #16
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	40013800 	.word	0x40013800
 8009cbc:	51eb851f 	.word	0x51eb851f

08009cc0 <__errno>:
 8009cc0:	4b01      	ldr	r3, [pc, #4]	; (8009cc8 <__errno+0x8>)
 8009cc2:	6818      	ldr	r0, [r3, #0]
 8009cc4:	4770      	bx	lr
 8009cc6:	bf00      	nop
 8009cc8:	2000007c 	.word	0x2000007c

08009ccc <__libc_init_array>:
 8009ccc:	b570      	push	{r4, r5, r6, lr}
 8009cce:	2500      	movs	r5, #0
 8009cd0:	4e0c      	ldr	r6, [pc, #48]	; (8009d04 <__libc_init_array+0x38>)
 8009cd2:	4c0d      	ldr	r4, [pc, #52]	; (8009d08 <__libc_init_array+0x3c>)
 8009cd4:	1ba4      	subs	r4, r4, r6
 8009cd6:	10a4      	asrs	r4, r4, #2
 8009cd8:	42a5      	cmp	r5, r4
 8009cda:	d109      	bne.n	8009cf0 <__libc_init_array+0x24>
 8009cdc:	f002 f85e 	bl	800bd9c <_init>
 8009ce0:	2500      	movs	r5, #0
 8009ce2:	4e0a      	ldr	r6, [pc, #40]	; (8009d0c <__libc_init_array+0x40>)
 8009ce4:	4c0a      	ldr	r4, [pc, #40]	; (8009d10 <__libc_init_array+0x44>)
 8009ce6:	1ba4      	subs	r4, r4, r6
 8009ce8:	10a4      	asrs	r4, r4, #2
 8009cea:	42a5      	cmp	r5, r4
 8009cec:	d105      	bne.n	8009cfa <__libc_init_array+0x2e>
 8009cee:	bd70      	pop	{r4, r5, r6, pc}
 8009cf0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009cf4:	4798      	blx	r3
 8009cf6:	3501      	adds	r5, #1
 8009cf8:	e7ee      	b.n	8009cd8 <__libc_init_array+0xc>
 8009cfa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009cfe:	4798      	blx	r3
 8009d00:	3501      	adds	r5, #1
 8009d02:	e7f2      	b.n	8009cea <__libc_init_array+0x1e>
 8009d04:	0800d828 	.word	0x0800d828
 8009d08:	0800d828 	.word	0x0800d828
 8009d0c:	0800d828 	.word	0x0800d828
 8009d10:	0800d82c 	.word	0x0800d82c

08009d14 <memset>:
 8009d14:	4603      	mov	r3, r0
 8009d16:	4402      	add	r2, r0
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d100      	bne.n	8009d1e <memset+0xa>
 8009d1c:	4770      	bx	lr
 8009d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8009d22:	e7f9      	b.n	8009d18 <memset+0x4>

08009d24 <__cvt>:
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d2a:	461e      	mov	r6, r3
 8009d2c:	bfbb      	ittet	lt
 8009d2e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009d32:	461e      	movlt	r6, r3
 8009d34:	2300      	movge	r3, #0
 8009d36:	232d      	movlt	r3, #45	; 0x2d
 8009d38:	b088      	sub	sp, #32
 8009d3a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009d3c:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8009d40:	f027 0720 	bic.w	r7, r7, #32
 8009d44:	2f46      	cmp	r7, #70	; 0x46
 8009d46:	4614      	mov	r4, r2
 8009d48:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009d4a:	700b      	strb	r3, [r1, #0]
 8009d4c:	d004      	beq.n	8009d58 <__cvt+0x34>
 8009d4e:	2f45      	cmp	r7, #69	; 0x45
 8009d50:	d100      	bne.n	8009d54 <__cvt+0x30>
 8009d52:	3501      	adds	r5, #1
 8009d54:	2302      	movs	r3, #2
 8009d56:	e000      	b.n	8009d5a <__cvt+0x36>
 8009d58:	2303      	movs	r3, #3
 8009d5a:	aa07      	add	r2, sp, #28
 8009d5c:	9204      	str	r2, [sp, #16]
 8009d5e:	aa06      	add	r2, sp, #24
 8009d60:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009d64:	e9cd 3500 	strd	r3, r5, [sp]
 8009d68:	4622      	mov	r2, r4
 8009d6a:	4633      	mov	r3, r6
 8009d6c:	f000 fcd8 	bl	800a720 <_dtoa_r>
 8009d70:	2f47      	cmp	r7, #71	; 0x47
 8009d72:	4680      	mov	r8, r0
 8009d74:	d102      	bne.n	8009d7c <__cvt+0x58>
 8009d76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d78:	07db      	lsls	r3, r3, #31
 8009d7a:	d526      	bpl.n	8009dca <__cvt+0xa6>
 8009d7c:	2f46      	cmp	r7, #70	; 0x46
 8009d7e:	eb08 0905 	add.w	r9, r8, r5
 8009d82:	d111      	bne.n	8009da8 <__cvt+0x84>
 8009d84:	f898 3000 	ldrb.w	r3, [r8]
 8009d88:	2b30      	cmp	r3, #48	; 0x30
 8009d8a:	d10a      	bne.n	8009da2 <__cvt+0x7e>
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	2300      	movs	r3, #0
 8009d90:	4620      	mov	r0, r4
 8009d92:	4631      	mov	r1, r6
 8009d94:	f7f6 fe74 	bl	8000a80 <__aeabi_dcmpeq>
 8009d98:	b918      	cbnz	r0, 8009da2 <__cvt+0x7e>
 8009d9a:	f1c5 0501 	rsb	r5, r5, #1
 8009d9e:	f8ca 5000 	str.w	r5, [sl]
 8009da2:	f8da 3000 	ldr.w	r3, [sl]
 8009da6:	4499      	add	r9, r3
 8009da8:	2200      	movs	r2, #0
 8009daa:	2300      	movs	r3, #0
 8009dac:	4620      	mov	r0, r4
 8009dae:	4631      	mov	r1, r6
 8009db0:	f7f6 fe66 	bl	8000a80 <__aeabi_dcmpeq>
 8009db4:	b938      	cbnz	r0, 8009dc6 <__cvt+0xa2>
 8009db6:	2230      	movs	r2, #48	; 0x30
 8009db8:	9b07      	ldr	r3, [sp, #28]
 8009dba:	454b      	cmp	r3, r9
 8009dbc:	d205      	bcs.n	8009dca <__cvt+0xa6>
 8009dbe:	1c59      	adds	r1, r3, #1
 8009dc0:	9107      	str	r1, [sp, #28]
 8009dc2:	701a      	strb	r2, [r3, #0]
 8009dc4:	e7f8      	b.n	8009db8 <__cvt+0x94>
 8009dc6:	f8cd 901c 	str.w	r9, [sp, #28]
 8009dca:	4640      	mov	r0, r8
 8009dcc:	9b07      	ldr	r3, [sp, #28]
 8009dce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009dd0:	eba3 0308 	sub.w	r3, r3, r8
 8009dd4:	6013      	str	r3, [r2, #0]
 8009dd6:	b008      	add	sp, #32
 8009dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009ddc <__exponent>:
 8009ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009dde:	2900      	cmp	r1, #0
 8009de0:	bfb4      	ite	lt
 8009de2:	232d      	movlt	r3, #45	; 0x2d
 8009de4:	232b      	movge	r3, #43	; 0x2b
 8009de6:	4604      	mov	r4, r0
 8009de8:	bfb8      	it	lt
 8009dea:	4249      	neglt	r1, r1
 8009dec:	2909      	cmp	r1, #9
 8009dee:	f804 2b02 	strb.w	r2, [r4], #2
 8009df2:	7043      	strb	r3, [r0, #1]
 8009df4:	dd21      	ble.n	8009e3a <__exponent+0x5e>
 8009df6:	f10d 0307 	add.w	r3, sp, #7
 8009dfa:	461f      	mov	r7, r3
 8009dfc:	260a      	movs	r6, #10
 8009dfe:	fb91 f5f6 	sdiv	r5, r1, r6
 8009e02:	fb06 1115 	mls	r1, r6, r5, r1
 8009e06:	2d09      	cmp	r5, #9
 8009e08:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8009e0c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009e10:	f103 32ff 	add.w	r2, r3, #4294967295
 8009e14:	4629      	mov	r1, r5
 8009e16:	dc09      	bgt.n	8009e2c <__exponent+0x50>
 8009e18:	3130      	adds	r1, #48	; 0x30
 8009e1a:	3b02      	subs	r3, #2
 8009e1c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009e20:	42bb      	cmp	r3, r7
 8009e22:	4622      	mov	r2, r4
 8009e24:	d304      	bcc.n	8009e30 <__exponent+0x54>
 8009e26:	1a10      	subs	r0, r2, r0
 8009e28:	b003      	add	sp, #12
 8009e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e2c:	4613      	mov	r3, r2
 8009e2e:	e7e6      	b.n	8009dfe <__exponent+0x22>
 8009e30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e34:	f804 2b01 	strb.w	r2, [r4], #1
 8009e38:	e7f2      	b.n	8009e20 <__exponent+0x44>
 8009e3a:	2330      	movs	r3, #48	; 0x30
 8009e3c:	4419      	add	r1, r3
 8009e3e:	7083      	strb	r3, [r0, #2]
 8009e40:	1d02      	adds	r2, r0, #4
 8009e42:	70c1      	strb	r1, [r0, #3]
 8009e44:	e7ef      	b.n	8009e26 <__exponent+0x4a>
	...

08009e48 <_printf_float>:
 8009e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e4c:	b091      	sub	sp, #68	; 0x44
 8009e4e:	460c      	mov	r4, r1
 8009e50:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8009e52:	4693      	mov	fp, r2
 8009e54:	461e      	mov	r6, r3
 8009e56:	4605      	mov	r5, r0
 8009e58:	f001 fa16 	bl	800b288 <_localeconv_r>
 8009e5c:	6803      	ldr	r3, [r0, #0]
 8009e5e:	4618      	mov	r0, r3
 8009e60:	9309      	str	r3, [sp, #36]	; 0x24
 8009e62:	f7f6 f9e1 	bl	8000228 <strlen>
 8009e66:	2300      	movs	r3, #0
 8009e68:	930e      	str	r3, [sp, #56]	; 0x38
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	900a      	str	r0, [sp, #40]	; 0x28
 8009e6e:	3307      	adds	r3, #7
 8009e70:	f023 0307 	bic.w	r3, r3, #7
 8009e74:	f103 0208 	add.w	r2, r3, #8
 8009e78:	f894 8018 	ldrb.w	r8, [r4, #24]
 8009e7c:	f8d4 a000 	ldr.w	sl, [r4]
 8009e80:	603a      	str	r2, [r7, #0]
 8009e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e86:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009e8a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8009e8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009e92:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e94:	f04f 32ff 	mov.w	r2, #4294967295
 8009e98:	4ba6      	ldr	r3, [pc, #664]	; (800a134 <_printf_float+0x2ec>)
 8009e9a:	4638      	mov	r0, r7
 8009e9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e9e:	f7f6 fe21 	bl	8000ae4 <__aeabi_dcmpun>
 8009ea2:	bb68      	cbnz	r0, 8009f00 <_printf_float+0xb8>
 8009ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ea8:	4ba2      	ldr	r3, [pc, #648]	; (800a134 <_printf_float+0x2ec>)
 8009eaa:	4638      	mov	r0, r7
 8009eac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009eae:	f7f6 fdfb 	bl	8000aa8 <__aeabi_dcmple>
 8009eb2:	bb28      	cbnz	r0, 8009f00 <_printf_float+0xb8>
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	4638      	mov	r0, r7
 8009eba:	4649      	mov	r1, r9
 8009ebc:	f7f6 fdea 	bl	8000a94 <__aeabi_dcmplt>
 8009ec0:	b110      	cbz	r0, 8009ec8 <_printf_float+0x80>
 8009ec2:	232d      	movs	r3, #45	; 0x2d
 8009ec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ec8:	4f9b      	ldr	r7, [pc, #620]	; (800a138 <_printf_float+0x2f0>)
 8009eca:	4b9c      	ldr	r3, [pc, #624]	; (800a13c <_printf_float+0x2f4>)
 8009ecc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009ed0:	bf98      	it	ls
 8009ed2:	461f      	movls	r7, r3
 8009ed4:	2303      	movs	r3, #3
 8009ed6:	f04f 0900 	mov.w	r9, #0
 8009eda:	6123      	str	r3, [r4, #16]
 8009edc:	f02a 0304 	bic.w	r3, sl, #4
 8009ee0:	6023      	str	r3, [r4, #0]
 8009ee2:	9600      	str	r6, [sp, #0]
 8009ee4:	465b      	mov	r3, fp
 8009ee6:	aa0f      	add	r2, sp, #60	; 0x3c
 8009ee8:	4621      	mov	r1, r4
 8009eea:	4628      	mov	r0, r5
 8009eec:	f000 f9e2 	bl	800a2b4 <_printf_common>
 8009ef0:	3001      	adds	r0, #1
 8009ef2:	f040 8090 	bne.w	800a016 <_printf_float+0x1ce>
 8009ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8009efa:	b011      	add	sp, #68	; 0x44
 8009efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f00:	463a      	mov	r2, r7
 8009f02:	464b      	mov	r3, r9
 8009f04:	4638      	mov	r0, r7
 8009f06:	4649      	mov	r1, r9
 8009f08:	f7f6 fdec 	bl	8000ae4 <__aeabi_dcmpun>
 8009f0c:	b110      	cbz	r0, 8009f14 <_printf_float+0xcc>
 8009f0e:	4f8c      	ldr	r7, [pc, #560]	; (800a140 <_printf_float+0x2f8>)
 8009f10:	4b8c      	ldr	r3, [pc, #560]	; (800a144 <_printf_float+0x2fc>)
 8009f12:	e7db      	b.n	8009ecc <_printf_float+0x84>
 8009f14:	6863      	ldr	r3, [r4, #4]
 8009f16:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8009f1a:	1c59      	adds	r1, r3, #1
 8009f1c:	a80d      	add	r0, sp, #52	; 0x34
 8009f1e:	a90e      	add	r1, sp, #56	; 0x38
 8009f20:	d140      	bne.n	8009fa4 <_printf_float+0x15c>
 8009f22:	2306      	movs	r3, #6
 8009f24:	6063      	str	r3, [r4, #4]
 8009f26:	f04f 0c00 	mov.w	ip, #0
 8009f2a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8009f2e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8009f32:	6863      	ldr	r3, [r4, #4]
 8009f34:	6022      	str	r2, [r4, #0]
 8009f36:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8009f3a:	9300      	str	r3, [sp, #0]
 8009f3c:	463a      	mov	r2, r7
 8009f3e:	464b      	mov	r3, r9
 8009f40:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8009f44:	4628      	mov	r0, r5
 8009f46:	f7ff feed 	bl	8009d24 <__cvt>
 8009f4a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8009f4e:	2b47      	cmp	r3, #71	; 0x47
 8009f50:	4607      	mov	r7, r0
 8009f52:	d109      	bne.n	8009f68 <_printf_float+0x120>
 8009f54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f56:	1cd8      	adds	r0, r3, #3
 8009f58:	db02      	blt.n	8009f60 <_printf_float+0x118>
 8009f5a:	6862      	ldr	r2, [r4, #4]
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	dd47      	ble.n	8009ff0 <_printf_float+0x1a8>
 8009f60:	f1a8 0802 	sub.w	r8, r8, #2
 8009f64:	fa5f f888 	uxtb.w	r8, r8
 8009f68:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8009f6c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009f6e:	d824      	bhi.n	8009fba <_printf_float+0x172>
 8009f70:	3901      	subs	r1, #1
 8009f72:	4642      	mov	r2, r8
 8009f74:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009f78:	910d      	str	r1, [sp, #52]	; 0x34
 8009f7a:	f7ff ff2f 	bl	8009ddc <__exponent>
 8009f7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f80:	4681      	mov	r9, r0
 8009f82:	1813      	adds	r3, r2, r0
 8009f84:	2a01      	cmp	r2, #1
 8009f86:	6123      	str	r3, [r4, #16]
 8009f88:	dc02      	bgt.n	8009f90 <_printf_float+0x148>
 8009f8a:	6822      	ldr	r2, [r4, #0]
 8009f8c:	07d1      	lsls	r1, r2, #31
 8009f8e:	d501      	bpl.n	8009f94 <_printf_float+0x14c>
 8009f90:	3301      	adds	r3, #1
 8009f92:	6123      	str	r3, [r4, #16]
 8009f94:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d0a2      	beq.n	8009ee2 <_printf_float+0x9a>
 8009f9c:	232d      	movs	r3, #45	; 0x2d
 8009f9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fa2:	e79e      	b.n	8009ee2 <_printf_float+0x9a>
 8009fa4:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8009fa8:	f000 816e 	beq.w	800a288 <_printf_float+0x440>
 8009fac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009fb0:	d1b9      	bne.n	8009f26 <_printf_float+0xde>
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d1b7      	bne.n	8009f26 <_printf_float+0xde>
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e7b4      	b.n	8009f24 <_printf_float+0xdc>
 8009fba:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8009fbe:	d119      	bne.n	8009ff4 <_printf_float+0x1ac>
 8009fc0:	2900      	cmp	r1, #0
 8009fc2:	6863      	ldr	r3, [r4, #4]
 8009fc4:	dd0c      	ble.n	8009fe0 <_printf_float+0x198>
 8009fc6:	6121      	str	r1, [r4, #16]
 8009fc8:	b913      	cbnz	r3, 8009fd0 <_printf_float+0x188>
 8009fca:	6822      	ldr	r2, [r4, #0]
 8009fcc:	07d2      	lsls	r2, r2, #31
 8009fce:	d502      	bpl.n	8009fd6 <_printf_float+0x18e>
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	440b      	add	r3, r1
 8009fd4:	6123      	str	r3, [r4, #16]
 8009fd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fd8:	f04f 0900 	mov.w	r9, #0
 8009fdc:	65a3      	str	r3, [r4, #88]	; 0x58
 8009fde:	e7d9      	b.n	8009f94 <_printf_float+0x14c>
 8009fe0:	b913      	cbnz	r3, 8009fe8 <_printf_float+0x1a0>
 8009fe2:	6822      	ldr	r2, [r4, #0]
 8009fe4:	07d0      	lsls	r0, r2, #31
 8009fe6:	d501      	bpl.n	8009fec <_printf_float+0x1a4>
 8009fe8:	3302      	adds	r3, #2
 8009fea:	e7f3      	b.n	8009fd4 <_printf_float+0x18c>
 8009fec:	2301      	movs	r3, #1
 8009fee:	e7f1      	b.n	8009fd4 <_printf_float+0x18c>
 8009ff0:	f04f 0867 	mov.w	r8, #103	; 0x67
 8009ff4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	db05      	blt.n	800a008 <_printf_float+0x1c0>
 8009ffc:	6822      	ldr	r2, [r4, #0]
 8009ffe:	6123      	str	r3, [r4, #16]
 800a000:	07d1      	lsls	r1, r2, #31
 800a002:	d5e8      	bpl.n	8009fd6 <_printf_float+0x18e>
 800a004:	3301      	adds	r3, #1
 800a006:	e7e5      	b.n	8009fd4 <_printf_float+0x18c>
 800a008:	2b00      	cmp	r3, #0
 800a00a:	bfcc      	ite	gt
 800a00c:	2301      	movgt	r3, #1
 800a00e:	f1c3 0302 	rsble	r3, r3, #2
 800a012:	4413      	add	r3, r2
 800a014:	e7de      	b.n	8009fd4 <_printf_float+0x18c>
 800a016:	6823      	ldr	r3, [r4, #0]
 800a018:	055a      	lsls	r2, r3, #21
 800a01a:	d407      	bmi.n	800a02c <_printf_float+0x1e4>
 800a01c:	6923      	ldr	r3, [r4, #16]
 800a01e:	463a      	mov	r2, r7
 800a020:	4659      	mov	r1, fp
 800a022:	4628      	mov	r0, r5
 800a024:	47b0      	blx	r6
 800a026:	3001      	adds	r0, #1
 800a028:	d129      	bne.n	800a07e <_printf_float+0x236>
 800a02a:	e764      	b.n	8009ef6 <_printf_float+0xae>
 800a02c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800a030:	f240 80d7 	bls.w	800a1e2 <_printf_float+0x39a>
 800a034:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a038:	2200      	movs	r2, #0
 800a03a:	2300      	movs	r3, #0
 800a03c:	f7f6 fd20 	bl	8000a80 <__aeabi_dcmpeq>
 800a040:	b388      	cbz	r0, 800a0a6 <_printf_float+0x25e>
 800a042:	2301      	movs	r3, #1
 800a044:	4a40      	ldr	r2, [pc, #256]	; (800a148 <_printf_float+0x300>)
 800a046:	4659      	mov	r1, fp
 800a048:	4628      	mov	r0, r5
 800a04a:	47b0      	blx	r6
 800a04c:	3001      	adds	r0, #1
 800a04e:	f43f af52 	beq.w	8009ef6 <_printf_float+0xae>
 800a052:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a056:	429a      	cmp	r2, r3
 800a058:	db02      	blt.n	800a060 <_printf_float+0x218>
 800a05a:	6823      	ldr	r3, [r4, #0]
 800a05c:	07d8      	lsls	r0, r3, #31
 800a05e:	d50e      	bpl.n	800a07e <_printf_float+0x236>
 800a060:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a064:	4659      	mov	r1, fp
 800a066:	4628      	mov	r0, r5
 800a068:	47b0      	blx	r6
 800a06a:	3001      	adds	r0, #1
 800a06c:	f43f af43 	beq.w	8009ef6 <_printf_float+0xae>
 800a070:	2700      	movs	r7, #0
 800a072:	f104 081a 	add.w	r8, r4, #26
 800a076:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a078:	3b01      	subs	r3, #1
 800a07a:	42bb      	cmp	r3, r7
 800a07c:	dc09      	bgt.n	800a092 <_printf_float+0x24a>
 800a07e:	6823      	ldr	r3, [r4, #0]
 800a080:	079f      	lsls	r7, r3, #30
 800a082:	f100 80fd 	bmi.w	800a280 <_printf_float+0x438>
 800a086:	68e0      	ldr	r0, [r4, #12]
 800a088:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a08a:	4298      	cmp	r0, r3
 800a08c:	bfb8      	it	lt
 800a08e:	4618      	movlt	r0, r3
 800a090:	e733      	b.n	8009efa <_printf_float+0xb2>
 800a092:	2301      	movs	r3, #1
 800a094:	4642      	mov	r2, r8
 800a096:	4659      	mov	r1, fp
 800a098:	4628      	mov	r0, r5
 800a09a:	47b0      	blx	r6
 800a09c:	3001      	adds	r0, #1
 800a09e:	f43f af2a 	beq.w	8009ef6 <_printf_float+0xae>
 800a0a2:	3701      	adds	r7, #1
 800a0a4:	e7e7      	b.n	800a076 <_printf_float+0x22e>
 800a0a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	dc2b      	bgt.n	800a104 <_printf_float+0x2bc>
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	4a26      	ldr	r2, [pc, #152]	; (800a148 <_printf_float+0x300>)
 800a0b0:	4659      	mov	r1, fp
 800a0b2:	4628      	mov	r0, r5
 800a0b4:	47b0      	blx	r6
 800a0b6:	3001      	adds	r0, #1
 800a0b8:	f43f af1d 	beq.w	8009ef6 <_printf_float+0xae>
 800a0bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0be:	b923      	cbnz	r3, 800a0ca <_printf_float+0x282>
 800a0c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0c2:	b913      	cbnz	r3, 800a0ca <_printf_float+0x282>
 800a0c4:	6823      	ldr	r3, [r4, #0]
 800a0c6:	07d9      	lsls	r1, r3, #31
 800a0c8:	d5d9      	bpl.n	800a07e <_printf_float+0x236>
 800a0ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a0ce:	4659      	mov	r1, fp
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	47b0      	blx	r6
 800a0d4:	3001      	adds	r0, #1
 800a0d6:	f43f af0e 	beq.w	8009ef6 <_printf_float+0xae>
 800a0da:	f04f 0800 	mov.w	r8, #0
 800a0de:	f104 091a 	add.w	r9, r4, #26
 800a0e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0e4:	425b      	negs	r3, r3
 800a0e6:	4543      	cmp	r3, r8
 800a0e8:	dc01      	bgt.n	800a0ee <_printf_float+0x2a6>
 800a0ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0ec:	e797      	b.n	800a01e <_printf_float+0x1d6>
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	464a      	mov	r2, r9
 800a0f2:	4659      	mov	r1, fp
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	47b0      	blx	r6
 800a0f8:	3001      	adds	r0, #1
 800a0fa:	f43f aefc 	beq.w	8009ef6 <_printf_float+0xae>
 800a0fe:	f108 0801 	add.w	r8, r8, #1
 800a102:	e7ee      	b.n	800a0e2 <_printf_float+0x29a>
 800a104:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a106:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a108:	429a      	cmp	r2, r3
 800a10a:	bfa8      	it	ge
 800a10c:	461a      	movge	r2, r3
 800a10e:	2a00      	cmp	r2, #0
 800a110:	4690      	mov	r8, r2
 800a112:	dd07      	ble.n	800a124 <_printf_float+0x2dc>
 800a114:	4613      	mov	r3, r2
 800a116:	4659      	mov	r1, fp
 800a118:	463a      	mov	r2, r7
 800a11a:	4628      	mov	r0, r5
 800a11c:	47b0      	blx	r6
 800a11e:	3001      	adds	r0, #1
 800a120:	f43f aee9 	beq.w	8009ef6 <_printf_float+0xae>
 800a124:	f104 031a 	add.w	r3, r4, #26
 800a128:	f04f 0a00 	mov.w	sl, #0
 800a12c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800a130:	930b      	str	r3, [sp, #44]	; 0x2c
 800a132:	e015      	b.n	800a160 <_printf_float+0x318>
 800a134:	7fefffff 	.word	0x7fefffff
 800a138:	0800d5cc 	.word	0x0800d5cc
 800a13c:	0800d5c8 	.word	0x0800d5c8
 800a140:	0800d5d4 	.word	0x0800d5d4
 800a144:	0800d5d0 	.word	0x0800d5d0
 800a148:	0800d5d8 	.word	0x0800d5d8
 800a14c:	2301      	movs	r3, #1
 800a14e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a150:	4659      	mov	r1, fp
 800a152:	4628      	mov	r0, r5
 800a154:	47b0      	blx	r6
 800a156:	3001      	adds	r0, #1
 800a158:	f43f aecd 	beq.w	8009ef6 <_printf_float+0xae>
 800a15c:	f10a 0a01 	add.w	sl, sl, #1
 800a160:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800a164:	eba9 0308 	sub.w	r3, r9, r8
 800a168:	4553      	cmp	r3, sl
 800a16a:	dcef      	bgt.n	800a14c <_printf_float+0x304>
 800a16c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a170:	429a      	cmp	r2, r3
 800a172:	444f      	add	r7, r9
 800a174:	db14      	blt.n	800a1a0 <_printf_float+0x358>
 800a176:	6823      	ldr	r3, [r4, #0]
 800a178:	07da      	lsls	r2, r3, #31
 800a17a:	d411      	bmi.n	800a1a0 <_printf_float+0x358>
 800a17c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a17e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a180:	eba3 0209 	sub.w	r2, r3, r9
 800a184:	eba3 0901 	sub.w	r9, r3, r1
 800a188:	4591      	cmp	r9, r2
 800a18a:	bfa8      	it	ge
 800a18c:	4691      	movge	r9, r2
 800a18e:	f1b9 0f00 	cmp.w	r9, #0
 800a192:	dc0d      	bgt.n	800a1b0 <_printf_float+0x368>
 800a194:	2700      	movs	r7, #0
 800a196:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a19a:	f104 081a 	add.w	r8, r4, #26
 800a19e:	e018      	b.n	800a1d2 <_printf_float+0x38a>
 800a1a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1a4:	4659      	mov	r1, fp
 800a1a6:	4628      	mov	r0, r5
 800a1a8:	47b0      	blx	r6
 800a1aa:	3001      	adds	r0, #1
 800a1ac:	d1e6      	bne.n	800a17c <_printf_float+0x334>
 800a1ae:	e6a2      	b.n	8009ef6 <_printf_float+0xae>
 800a1b0:	464b      	mov	r3, r9
 800a1b2:	463a      	mov	r2, r7
 800a1b4:	4659      	mov	r1, fp
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	47b0      	blx	r6
 800a1ba:	3001      	adds	r0, #1
 800a1bc:	d1ea      	bne.n	800a194 <_printf_float+0x34c>
 800a1be:	e69a      	b.n	8009ef6 <_printf_float+0xae>
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	4642      	mov	r2, r8
 800a1c4:	4659      	mov	r1, fp
 800a1c6:	4628      	mov	r0, r5
 800a1c8:	47b0      	blx	r6
 800a1ca:	3001      	adds	r0, #1
 800a1cc:	f43f ae93 	beq.w	8009ef6 <_printf_float+0xae>
 800a1d0:	3701      	adds	r7, #1
 800a1d2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a1d6:	1a9b      	subs	r3, r3, r2
 800a1d8:	eba3 0309 	sub.w	r3, r3, r9
 800a1dc:	42bb      	cmp	r3, r7
 800a1de:	dcef      	bgt.n	800a1c0 <_printf_float+0x378>
 800a1e0:	e74d      	b.n	800a07e <_printf_float+0x236>
 800a1e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a1e4:	2a01      	cmp	r2, #1
 800a1e6:	dc01      	bgt.n	800a1ec <_printf_float+0x3a4>
 800a1e8:	07db      	lsls	r3, r3, #31
 800a1ea:	d538      	bpl.n	800a25e <_printf_float+0x416>
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	463a      	mov	r2, r7
 800a1f0:	4659      	mov	r1, fp
 800a1f2:	4628      	mov	r0, r5
 800a1f4:	47b0      	blx	r6
 800a1f6:	3001      	adds	r0, #1
 800a1f8:	f43f ae7d 	beq.w	8009ef6 <_printf_float+0xae>
 800a1fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a200:	4659      	mov	r1, fp
 800a202:	4628      	mov	r0, r5
 800a204:	47b0      	blx	r6
 800a206:	3001      	adds	r0, #1
 800a208:	f107 0701 	add.w	r7, r7, #1
 800a20c:	f43f ae73 	beq.w	8009ef6 <_printf_float+0xae>
 800a210:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a214:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a216:	2200      	movs	r2, #0
 800a218:	f103 38ff 	add.w	r8, r3, #4294967295
 800a21c:	2300      	movs	r3, #0
 800a21e:	f7f6 fc2f 	bl	8000a80 <__aeabi_dcmpeq>
 800a222:	b9c0      	cbnz	r0, 800a256 <_printf_float+0x40e>
 800a224:	4643      	mov	r3, r8
 800a226:	463a      	mov	r2, r7
 800a228:	4659      	mov	r1, fp
 800a22a:	4628      	mov	r0, r5
 800a22c:	47b0      	blx	r6
 800a22e:	3001      	adds	r0, #1
 800a230:	d10d      	bne.n	800a24e <_printf_float+0x406>
 800a232:	e660      	b.n	8009ef6 <_printf_float+0xae>
 800a234:	2301      	movs	r3, #1
 800a236:	4642      	mov	r2, r8
 800a238:	4659      	mov	r1, fp
 800a23a:	4628      	mov	r0, r5
 800a23c:	47b0      	blx	r6
 800a23e:	3001      	adds	r0, #1
 800a240:	f43f ae59 	beq.w	8009ef6 <_printf_float+0xae>
 800a244:	3701      	adds	r7, #1
 800a246:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a248:	3b01      	subs	r3, #1
 800a24a:	42bb      	cmp	r3, r7
 800a24c:	dcf2      	bgt.n	800a234 <_printf_float+0x3ec>
 800a24e:	464b      	mov	r3, r9
 800a250:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a254:	e6e4      	b.n	800a020 <_printf_float+0x1d8>
 800a256:	2700      	movs	r7, #0
 800a258:	f104 081a 	add.w	r8, r4, #26
 800a25c:	e7f3      	b.n	800a246 <_printf_float+0x3fe>
 800a25e:	2301      	movs	r3, #1
 800a260:	e7e1      	b.n	800a226 <_printf_float+0x3de>
 800a262:	2301      	movs	r3, #1
 800a264:	4642      	mov	r2, r8
 800a266:	4659      	mov	r1, fp
 800a268:	4628      	mov	r0, r5
 800a26a:	47b0      	blx	r6
 800a26c:	3001      	adds	r0, #1
 800a26e:	f43f ae42 	beq.w	8009ef6 <_printf_float+0xae>
 800a272:	3701      	adds	r7, #1
 800a274:	68e3      	ldr	r3, [r4, #12]
 800a276:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a278:	1a9b      	subs	r3, r3, r2
 800a27a:	42bb      	cmp	r3, r7
 800a27c:	dcf1      	bgt.n	800a262 <_printf_float+0x41a>
 800a27e:	e702      	b.n	800a086 <_printf_float+0x23e>
 800a280:	2700      	movs	r7, #0
 800a282:	f104 0819 	add.w	r8, r4, #25
 800a286:	e7f5      	b.n	800a274 <_printf_float+0x42c>
 800a288:	2b00      	cmp	r3, #0
 800a28a:	f43f ae94 	beq.w	8009fb6 <_printf_float+0x16e>
 800a28e:	f04f 0c00 	mov.w	ip, #0
 800a292:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800a296:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800a29a:	6022      	str	r2, [r4, #0]
 800a29c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800a2a0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800a2a4:	9300      	str	r3, [sp, #0]
 800a2a6:	463a      	mov	r2, r7
 800a2a8:	464b      	mov	r3, r9
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	f7ff fd3a 	bl	8009d24 <__cvt>
 800a2b0:	4607      	mov	r7, r0
 800a2b2:	e64f      	b.n	8009f54 <_printf_float+0x10c>

0800a2b4 <_printf_common>:
 800a2b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2b8:	4691      	mov	r9, r2
 800a2ba:	461f      	mov	r7, r3
 800a2bc:	688a      	ldr	r2, [r1, #8]
 800a2be:	690b      	ldr	r3, [r1, #16]
 800a2c0:	4606      	mov	r6, r0
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	bfb8      	it	lt
 800a2c6:	4613      	movlt	r3, r2
 800a2c8:	f8c9 3000 	str.w	r3, [r9]
 800a2cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a2d0:	460c      	mov	r4, r1
 800a2d2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a2d6:	b112      	cbz	r2, 800a2de <_printf_common+0x2a>
 800a2d8:	3301      	adds	r3, #1
 800a2da:	f8c9 3000 	str.w	r3, [r9]
 800a2de:	6823      	ldr	r3, [r4, #0]
 800a2e0:	0699      	lsls	r1, r3, #26
 800a2e2:	bf42      	ittt	mi
 800a2e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a2e8:	3302      	addmi	r3, #2
 800a2ea:	f8c9 3000 	strmi.w	r3, [r9]
 800a2ee:	6825      	ldr	r5, [r4, #0]
 800a2f0:	f015 0506 	ands.w	r5, r5, #6
 800a2f4:	d107      	bne.n	800a306 <_printf_common+0x52>
 800a2f6:	f104 0a19 	add.w	sl, r4, #25
 800a2fa:	68e3      	ldr	r3, [r4, #12]
 800a2fc:	f8d9 2000 	ldr.w	r2, [r9]
 800a300:	1a9b      	subs	r3, r3, r2
 800a302:	42ab      	cmp	r3, r5
 800a304:	dc29      	bgt.n	800a35a <_printf_common+0xa6>
 800a306:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a30a:	6822      	ldr	r2, [r4, #0]
 800a30c:	3300      	adds	r3, #0
 800a30e:	bf18      	it	ne
 800a310:	2301      	movne	r3, #1
 800a312:	0692      	lsls	r2, r2, #26
 800a314:	d42e      	bmi.n	800a374 <_printf_common+0xc0>
 800a316:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a31a:	4639      	mov	r1, r7
 800a31c:	4630      	mov	r0, r6
 800a31e:	47c0      	blx	r8
 800a320:	3001      	adds	r0, #1
 800a322:	d021      	beq.n	800a368 <_printf_common+0xb4>
 800a324:	6823      	ldr	r3, [r4, #0]
 800a326:	68e5      	ldr	r5, [r4, #12]
 800a328:	f003 0306 	and.w	r3, r3, #6
 800a32c:	2b04      	cmp	r3, #4
 800a32e:	bf18      	it	ne
 800a330:	2500      	movne	r5, #0
 800a332:	f8d9 2000 	ldr.w	r2, [r9]
 800a336:	f04f 0900 	mov.w	r9, #0
 800a33a:	bf08      	it	eq
 800a33c:	1aad      	subeq	r5, r5, r2
 800a33e:	68a3      	ldr	r3, [r4, #8]
 800a340:	6922      	ldr	r2, [r4, #16]
 800a342:	bf08      	it	eq
 800a344:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a348:	4293      	cmp	r3, r2
 800a34a:	bfc4      	itt	gt
 800a34c:	1a9b      	subgt	r3, r3, r2
 800a34e:	18ed      	addgt	r5, r5, r3
 800a350:	341a      	adds	r4, #26
 800a352:	454d      	cmp	r5, r9
 800a354:	d11a      	bne.n	800a38c <_printf_common+0xd8>
 800a356:	2000      	movs	r0, #0
 800a358:	e008      	b.n	800a36c <_printf_common+0xb8>
 800a35a:	2301      	movs	r3, #1
 800a35c:	4652      	mov	r2, sl
 800a35e:	4639      	mov	r1, r7
 800a360:	4630      	mov	r0, r6
 800a362:	47c0      	blx	r8
 800a364:	3001      	adds	r0, #1
 800a366:	d103      	bne.n	800a370 <_printf_common+0xbc>
 800a368:	f04f 30ff 	mov.w	r0, #4294967295
 800a36c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a370:	3501      	adds	r5, #1
 800a372:	e7c2      	b.n	800a2fa <_printf_common+0x46>
 800a374:	2030      	movs	r0, #48	; 0x30
 800a376:	18e1      	adds	r1, r4, r3
 800a378:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a37c:	1c5a      	adds	r2, r3, #1
 800a37e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a382:	4422      	add	r2, r4
 800a384:	3302      	adds	r3, #2
 800a386:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a38a:	e7c4      	b.n	800a316 <_printf_common+0x62>
 800a38c:	2301      	movs	r3, #1
 800a38e:	4622      	mov	r2, r4
 800a390:	4639      	mov	r1, r7
 800a392:	4630      	mov	r0, r6
 800a394:	47c0      	blx	r8
 800a396:	3001      	adds	r0, #1
 800a398:	d0e6      	beq.n	800a368 <_printf_common+0xb4>
 800a39a:	f109 0901 	add.w	r9, r9, #1
 800a39e:	e7d8      	b.n	800a352 <_printf_common+0x9e>

0800a3a0 <_printf_i>:
 800a3a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a3a8:	460c      	mov	r4, r1
 800a3aa:	7e09      	ldrb	r1, [r1, #24]
 800a3ac:	b085      	sub	sp, #20
 800a3ae:	296e      	cmp	r1, #110	; 0x6e
 800a3b0:	4617      	mov	r7, r2
 800a3b2:	4606      	mov	r6, r0
 800a3b4:	4698      	mov	r8, r3
 800a3b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3b8:	f000 80b3 	beq.w	800a522 <_printf_i+0x182>
 800a3bc:	d822      	bhi.n	800a404 <_printf_i+0x64>
 800a3be:	2963      	cmp	r1, #99	; 0x63
 800a3c0:	d036      	beq.n	800a430 <_printf_i+0x90>
 800a3c2:	d80a      	bhi.n	800a3da <_printf_i+0x3a>
 800a3c4:	2900      	cmp	r1, #0
 800a3c6:	f000 80b9 	beq.w	800a53c <_printf_i+0x19c>
 800a3ca:	2958      	cmp	r1, #88	; 0x58
 800a3cc:	f000 8083 	beq.w	800a4d6 <_printf_i+0x136>
 800a3d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a3d8:	e032      	b.n	800a440 <_printf_i+0xa0>
 800a3da:	2964      	cmp	r1, #100	; 0x64
 800a3dc:	d001      	beq.n	800a3e2 <_printf_i+0x42>
 800a3de:	2969      	cmp	r1, #105	; 0x69
 800a3e0:	d1f6      	bne.n	800a3d0 <_printf_i+0x30>
 800a3e2:	6820      	ldr	r0, [r4, #0]
 800a3e4:	6813      	ldr	r3, [r2, #0]
 800a3e6:	0605      	lsls	r5, r0, #24
 800a3e8:	f103 0104 	add.w	r1, r3, #4
 800a3ec:	d52a      	bpl.n	800a444 <_printf_i+0xa4>
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	6011      	str	r1, [r2, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	da03      	bge.n	800a3fe <_printf_i+0x5e>
 800a3f6:	222d      	movs	r2, #45	; 0x2d
 800a3f8:	425b      	negs	r3, r3
 800a3fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a3fe:	486f      	ldr	r0, [pc, #444]	; (800a5bc <_printf_i+0x21c>)
 800a400:	220a      	movs	r2, #10
 800a402:	e039      	b.n	800a478 <_printf_i+0xd8>
 800a404:	2973      	cmp	r1, #115	; 0x73
 800a406:	f000 809d 	beq.w	800a544 <_printf_i+0x1a4>
 800a40a:	d808      	bhi.n	800a41e <_printf_i+0x7e>
 800a40c:	296f      	cmp	r1, #111	; 0x6f
 800a40e:	d020      	beq.n	800a452 <_printf_i+0xb2>
 800a410:	2970      	cmp	r1, #112	; 0x70
 800a412:	d1dd      	bne.n	800a3d0 <_printf_i+0x30>
 800a414:	6823      	ldr	r3, [r4, #0]
 800a416:	f043 0320 	orr.w	r3, r3, #32
 800a41a:	6023      	str	r3, [r4, #0]
 800a41c:	e003      	b.n	800a426 <_printf_i+0x86>
 800a41e:	2975      	cmp	r1, #117	; 0x75
 800a420:	d017      	beq.n	800a452 <_printf_i+0xb2>
 800a422:	2978      	cmp	r1, #120	; 0x78
 800a424:	d1d4      	bne.n	800a3d0 <_printf_i+0x30>
 800a426:	2378      	movs	r3, #120	; 0x78
 800a428:	4865      	ldr	r0, [pc, #404]	; (800a5c0 <_printf_i+0x220>)
 800a42a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a42e:	e055      	b.n	800a4dc <_printf_i+0x13c>
 800a430:	6813      	ldr	r3, [r2, #0]
 800a432:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a436:	1d19      	adds	r1, r3, #4
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	6011      	str	r1, [r2, #0]
 800a43c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a440:	2301      	movs	r3, #1
 800a442:	e08c      	b.n	800a55e <_printf_i+0x1be>
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a44a:	6011      	str	r1, [r2, #0]
 800a44c:	bf18      	it	ne
 800a44e:	b21b      	sxthne	r3, r3
 800a450:	e7cf      	b.n	800a3f2 <_printf_i+0x52>
 800a452:	6813      	ldr	r3, [r2, #0]
 800a454:	6825      	ldr	r5, [r4, #0]
 800a456:	1d18      	adds	r0, r3, #4
 800a458:	6010      	str	r0, [r2, #0]
 800a45a:	0628      	lsls	r0, r5, #24
 800a45c:	d501      	bpl.n	800a462 <_printf_i+0xc2>
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	e002      	b.n	800a468 <_printf_i+0xc8>
 800a462:	0668      	lsls	r0, r5, #25
 800a464:	d5fb      	bpl.n	800a45e <_printf_i+0xbe>
 800a466:	881b      	ldrh	r3, [r3, #0]
 800a468:	296f      	cmp	r1, #111	; 0x6f
 800a46a:	bf14      	ite	ne
 800a46c:	220a      	movne	r2, #10
 800a46e:	2208      	moveq	r2, #8
 800a470:	4852      	ldr	r0, [pc, #328]	; (800a5bc <_printf_i+0x21c>)
 800a472:	2100      	movs	r1, #0
 800a474:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a478:	6865      	ldr	r5, [r4, #4]
 800a47a:	2d00      	cmp	r5, #0
 800a47c:	60a5      	str	r5, [r4, #8]
 800a47e:	f2c0 8095 	blt.w	800a5ac <_printf_i+0x20c>
 800a482:	6821      	ldr	r1, [r4, #0]
 800a484:	f021 0104 	bic.w	r1, r1, #4
 800a488:	6021      	str	r1, [r4, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d13d      	bne.n	800a50a <_printf_i+0x16a>
 800a48e:	2d00      	cmp	r5, #0
 800a490:	f040 808e 	bne.w	800a5b0 <_printf_i+0x210>
 800a494:	4665      	mov	r5, ip
 800a496:	2a08      	cmp	r2, #8
 800a498:	d10b      	bne.n	800a4b2 <_printf_i+0x112>
 800a49a:	6823      	ldr	r3, [r4, #0]
 800a49c:	07db      	lsls	r3, r3, #31
 800a49e:	d508      	bpl.n	800a4b2 <_printf_i+0x112>
 800a4a0:	6923      	ldr	r3, [r4, #16]
 800a4a2:	6862      	ldr	r2, [r4, #4]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	bfde      	ittt	le
 800a4a8:	2330      	movle	r3, #48	; 0x30
 800a4aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a4ae:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a4b2:	ebac 0305 	sub.w	r3, ip, r5
 800a4b6:	6123      	str	r3, [r4, #16]
 800a4b8:	f8cd 8000 	str.w	r8, [sp]
 800a4bc:	463b      	mov	r3, r7
 800a4be:	aa03      	add	r2, sp, #12
 800a4c0:	4621      	mov	r1, r4
 800a4c2:	4630      	mov	r0, r6
 800a4c4:	f7ff fef6 	bl	800a2b4 <_printf_common>
 800a4c8:	3001      	adds	r0, #1
 800a4ca:	d14d      	bne.n	800a568 <_printf_i+0x1c8>
 800a4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a4d0:	b005      	add	sp, #20
 800a4d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4d6:	4839      	ldr	r0, [pc, #228]	; (800a5bc <_printf_i+0x21c>)
 800a4d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a4dc:	6813      	ldr	r3, [r2, #0]
 800a4de:	6821      	ldr	r1, [r4, #0]
 800a4e0:	1d1d      	adds	r5, r3, #4
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	6015      	str	r5, [r2, #0]
 800a4e6:	060a      	lsls	r2, r1, #24
 800a4e8:	d50b      	bpl.n	800a502 <_printf_i+0x162>
 800a4ea:	07ca      	lsls	r2, r1, #31
 800a4ec:	bf44      	itt	mi
 800a4ee:	f041 0120 	orrmi.w	r1, r1, #32
 800a4f2:	6021      	strmi	r1, [r4, #0]
 800a4f4:	b91b      	cbnz	r3, 800a4fe <_printf_i+0x15e>
 800a4f6:	6822      	ldr	r2, [r4, #0]
 800a4f8:	f022 0220 	bic.w	r2, r2, #32
 800a4fc:	6022      	str	r2, [r4, #0]
 800a4fe:	2210      	movs	r2, #16
 800a500:	e7b7      	b.n	800a472 <_printf_i+0xd2>
 800a502:	064d      	lsls	r5, r1, #25
 800a504:	bf48      	it	mi
 800a506:	b29b      	uxthmi	r3, r3
 800a508:	e7ef      	b.n	800a4ea <_printf_i+0x14a>
 800a50a:	4665      	mov	r5, ip
 800a50c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a510:	fb02 3311 	mls	r3, r2, r1, r3
 800a514:	5cc3      	ldrb	r3, [r0, r3]
 800a516:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a51a:	460b      	mov	r3, r1
 800a51c:	2900      	cmp	r1, #0
 800a51e:	d1f5      	bne.n	800a50c <_printf_i+0x16c>
 800a520:	e7b9      	b.n	800a496 <_printf_i+0xf6>
 800a522:	6813      	ldr	r3, [r2, #0]
 800a524:	6825      	ldr	r5, [r4, #0]
 800a526:	1d18      	adds	r0, r3, #4
 800a528:	6961      	ldr	r1, [r4, #20]
 800a52a:	6010      	str	r0, [r2, #0]
 800a52c:	0628      	lsls	r0, r5, #24
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	d501      	bpl.n	800a536 <_printf_i+0x196>
 800a532:	6019      	str	r1, [r3, #0]
 800a534:	e002      	b.n	800a53c <_printf_i+0x19c>
 800a536:	066a      	lsls	r2, r5, #25
 800a538:	d5fb      	bpl.n	800a532 <_printf_i+0x192>
 800a53a:	8019      	strh	r1, [r3, #0]
 800a53c:	2300      	movs	r3, #0
 800a53e:	4665      	mov	r5, ip
 800a540:	6123      	str	r3, [r4, #16]
 800a542:	e7b9      	b.n	800a4b8 <_printf_i+0x118>
 800a544:	6813      	ldr	r3, [r2, #0]
 800a546:	1d19      	adds	r1, r3, #4
 800a548:	6011      	str	r1, [r2, #0]
 800a54a:	681d      	ldr	r5, [r3, #0]
 800a54c:	6862      	ldr	r2, [r4, #4]
 800a54e:	2100      	movs	r1, #0
 800a550:	4628      	mov	r0, r5
 800a552:	f000 feaf 	bl	800b2b4 <memchr>
 800a556:	b108      	cbz	r0, 800a55c <_printf_i+0x1bc>
 800a558:	1b40      	subs	r0, r0, r5
 800a55a:	6060      	str	r0, [r4, #4]
 800a55c:	6863      	ldr	r3, [r4, #4]
 800a55e:	6123      	str	r3, [r4, #16]
 800a560:	2300      	movs	r3, #0
 800a562:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a566:	e7a7      	b.n	800a4b8 <_printf_i+0x118>
 800a568:	6923      	ldr	r3, [r4, #16]
 800a56a:	462a      	mov	r2, r5
 800a56c:	4639      	mov	r1, r7
 800a56e:	4630      	mov	r0, r6
 800a570:	47c0      	blx	r8
 800a572:	3001      	adds	r0, #1
 800a574:	d0aa      	beq.n	800a4cc <_printf_i+0x12c>
 800a576:	6823      	ldr	r3, [r4, #0]
 800a578:	079b      	lsls	r3, r3, #30
 800a57a:	d413      	bmi.n	800a5a4 <_printf_i+0x204>
 800a57c:	68e0      	ldr	r0, [r4, #12]
 800a57e:	9b03      	ldr	r3, [sp, #12]
 800a580:	4298      	cmp	r0, r3
 800a582:	bfb8      	it	lt
 800a584:	4618      	movlt	r0, r3
 800a586:	e7a3      	b.n	800a4d0 <_printf_i+0x130>
 800a588:	2301      	movs	r3, #1
 800a58a:	464a      	mov	r2, r9
 800a58c:	4639      	mov	r1, r7
 800a58e:	4630      	mov	r0, r6
 800a590:	47c0      	blx	r8
 800a592:	3001      	adds	r0, #1
 800a594:	d09a      	beq.n	800a4cc <_printf_i+0x12c>
 800a596:	3501      	adds	r5, #1
 800a598:	68e3      	ldr	r3, [r4, #12]
 800a59a:	9a03      	ldr	r2, [sp, #12]
 800a59c:	1a9b      	subs	r3, r3, r2
 800a59e:	42ab      	cmp	r3, r5
 800a5a0:	dcf2      	bgt.n	800a588 <_printf_i+0x1e8>
 800a5a2:	e7eb      	b.n	800a57c <_printf_i+0x1dc>
 800a5a4:	2500      	movs	r5, #0
 800a5a6:	f104 0919 	add.w	r9, r4, #25
 800a5aa:	e7f5      	b.n	800a598 <_printf_i+0x1f8>
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d1ac      	bne.n	800a50a <_printf_i+0x16a>
 800a5b0:	7803      	ldrb	r3, [r0, #0]
 800a5b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a5ba:	e76c      	b.n	800a496 <_printf_i+0xf6>
 800a5bc:	0800d5da 	.word	0x0800d5da
 800a5c0:	0800d5eb 	.word	0x0800d5eb

0800a5c4 <siprintf>:
 800a5c4:	b40e      	push	{r1, r2, r3}
 800a5c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a5ca:	b500      	push	{lr}
 800a5cc:	b09c      	sub	sp, #112	; 0x70
 800a5ce:	ab1d      	add	r3, sp, #116	; 0x74
 800a5d0:	9002      	str	r0, [sp, #8]
 800a5d2:	9006      	str	r0, [sp, #24]
 800a5d4:	9107      	str	r1, [sp, #28]
 800a5d6:	9104      	str	r1, [sp, #16]
 800a5d8:	4808      	ldr	r0, [pc, #32]	; (800a5fc <siprintf+0x38>)
 800a5da:	4909      	ldr	r1, [pc, #36]	; (800a600 <siprintf+0x3c>)
 800a5dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5e0:	9105      	str	r1, [sp, #20]
 800a5e2:	6800      	ldr	r0, [r0, #0]
 800a5e4:	a902      	add	r1, sp, #8
 800a5e6:	9301      	str	r3, [sp, #4]
 800a5e8:	f001 fa68 	bl	800babc <_svfiprintf_r>
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	9b02      	ldr	r3, [sp, #8]
 800a5f0:	701a      	strb	r2, [r3, #0]
 800a5f2:	b01c      	add	sp, #112	; 0x70
 800a5f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5f8:	b003      	add	sp, #12
 800a5fa:	4770      	bx	lr
 800a5fc:	2000007c 	.word	0x2000007c
 800a600:	ffff0208 	.word	0xffff0208

0800a604 <quorem>:
 800a604:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a608:	6903      	ldr	r3, [r0, #16]
 800a60a:	690c      	ldr	r4, [r1, #16]
 800a60c:	4680      	mov	r8, r0
 800a60e:	42a3      	cmp	r3, r4
 800a610:	f2c0 8084 	blt.w	800a71c <quorem+0x118>
 800a614:	3c01      	subs	r4, #1
 800a616:	f101 0714 	add.w	r7, r1, #20
 800a61a:	f100 0614 	add.w	r6, r0, #20
 800a61e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a622:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a626:	3501      	adds	r5, #1
 800a628:	fbb0 f5f5 	udiv	r5, r0, r5
 800a62c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a630:	eb06 030c 	add.w	r3, r6, ip
 800a634:	eb07 090c 	add.w	r9, r7, ip
 800a638:	9301      	str	r3, [sp, #4]
 800a63a:	b39d      	cbz	r5, 800a6a4 <quorem+0xa0>
 800a63c:	f04f 0a00 	mov.w	sl, #0
 800a640:	4638      	mov	r0, r7
 800a642:	46b6      	mov	lr, r6
 800a644:	46d3      	mov	fp, sl
 800a646:	f850 2b04 	ldr.w	r2, [r0], #4
 800a64a:	b293      	uxth	r3, r2
 800a64c:	fb05 a303 	mla	r3, r5, r3, sl
 800a650:	0c12      	lsrs	r2, r2, #16
 800a652:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a656:	fb05 a202 	mla	r2, r5, r2, sl
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	ebab 0303 	sub.w	r3, fp, r3
 800a660:	f8de b000 	ldr.w	fp, [lr]
 800a664:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a668:	fa1f fb8b 	uxth.w	fp, fp
 800a66c:	445b      	add	r3, fp
 800a66e:	fa1f fb82 	uxth.w	fp, r2
 800a672:	f8de 2000 	ldr.w	r2, [lr]
 800a676:	4581      	cmp	r9, r0
 800a678:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a67c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a680:	b29b      	uxth	r3, r3
 800a682:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a686:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a68a:	f84e 3b04 	str.w	r3, [lr], #4
 800a68e:	d2da      	bcs.n	800a646 <quorem+0x42>
 800a690:	f856 300c 	ldr.w	r3, [r6, ip]
 800a694:	b933      	cbnz	r3, 800a6a4 <quorem+0xa0>
 800a696:	9b01      	ldr	r3, [sp, #4]
 800a698:	3b04      	subs	r3, #4
 800a69a:	429e      	cmp	r6, r3
 800a69c:	461a      	mov	r2, r3
 800a69e:	d331      	bcc.n	800a704 <quorem+0x100>
 800a6a0:	f8c8 4010 	str.w	r4, [r8, #16]
 800a6a4:	4640      	mov	r0, r8
 800a6a6:	f001 f833 	bl	800b710 <__mcmp>
 800a6aa:	2800      	cmp	r0, #0
 800a6ac:	db26      	blt.n	800a6fc <quorem+0xf8>
 800a6ae:	4630      	mov	r0, r6
 800a6b0:	f04f 0c00 	mov.w	ip, #0
 800a6b4:	3501      	adds	r5, #1
 800a6b6:	f857 1b04 	ldr.w	r1, [r7], #4
 800a6ba:	f8d0 e000 	ldr.w	lr, [r0]
 800a6be:	b28b      	uxth	r3, r1
 800a6c0:	ebac 0303 	sub.w	r3, ip, r3
 800a6c4:	fa1f f28e 	uxth.w	r2, lr
 800a6c8:	4413      	add	r3, r2
 800a6ca:	0c0a      	lsrs	r2, r1, #16
 800a6cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a6d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6da:	45b9      	cmp	r9, r7
 800a6dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a6e0:	f840 3b04 	str.w	r3, [r0], #4
 800a6e4:	d2e7      	bcs.n	800a6b6 <quorem+0xb2>
 800a6e6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a6ea:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a6ee:	b92a      	cbnz	r2, 800a6fc <quorem+0xf8>
 800a6f0:	3b04      	subs	r3, #4
 800a6f2:	429e      	cmp	r6, r3
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	d30b      	bcc.n	800a710 <quorem+0x10c>
 800a6f8:	f8c8 4010 	str.w	r4, [r8, #16]
 800a6fc:	4628      	mov	r0, r5
 800a6fe:	b003      	add	sp, #12
 800a700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a704:	6812      	ldr	r2, [r2, #0]
 800a706:	3b04      	subs	r3, #4
 800a708:	2a00      	cmp	r2, #0
 800a70a:	d1c9      	bne.n	800a6a0 <quorem+0x9c>
 800a70c:	3c01      	subs	r4, #1
 800a70e:	e7c4      	b.n	800a69a <quorem+0x96>
 800a710:	6812      	ldr	r2, [r2, #0]
 800a712:	3b04      	subs	r3, #4
 800a714:	2a00      	cmp	r2, #0
 800a716:	d1ef      	bne.n	800a6f8 <quorem+0xf4>
 800a718:	3c01      	subs	r4, #1
 800a71a:	e7ea      	b.n	800a6f2 <quorem+0xee>
 800a71c:	2000      	movs	r0, #0
 800a71e:	e7ee      	b.n	800a6fe <quorem+0xfa>

0800a720 <_dtoa_r>:
 800a720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a724:	4616      	mov	r6, r2
 800a726:	461f      	mov	r7, r3
 800a728:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a72a:	b095      	sub	sp, #84	; 0x54
 800a72c:	4604      	mov	r4, r0
 800a72e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800a732:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a736:	b93d      	cbnz	r5, 800a748 <_dtoa_r+0x28>
 800a738:	2010      	movs	r0, #16
 800a73a:	f000 fdb3 	bl	800b2a4 <malloc>
 800a73e:	6260      	str	r0, [r4, #36]	; 0x24
 800a740:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a744:	6005      	str	r5, [r0, #0]
 800a746:	60c5      	str	r5, [r0, #12]
 800a748:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a74a:	6819      	ldr	r1, [r3, #0]
 800a74c:	b151      	cbz	r1, 800a764 <_dtoa_r+0x44>
 800a74e:	685a      	ldr	r2, [r3, #4]
 800a750:	2301      	movs	r3, #1
 800a752:	4093      	lsls	r3, r2
 800a754:	604a      	str	r2, [r1, #4]
 800a756:	608b      	str	r3, [r1, #8]
 800a758:	4620      	mov	r0, r4
 800a75a:	f000 fdf8 	bl	800b34e <_Bfree>
 800a75e:	2200      	movs	r2, #0
 800a760:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a762:	601a      	str	r2, [r3, #0]
 800a764:	1e3b      	subs	r3, r7, #0
 800a766:	bfaf      	iteee	ge
 800a768:	2300      	movge	r3, #0
 800a76a:	2201      	movlt	r2, #1
 800a76c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a770:	9303      	strlt	r3, [sp, #12]
 800a772:	bfac      	ite	ge
 800a774:	f8c8 3000 	strge.w	r3, [r8]
 800a778:	f8c8 2000 	strlt.w	r2, [r8]
 800a77c:	4bae      	ldr	r3, [pc, #696]	; (800aa38 <_dtoa_r+0x318>)
 800a77e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a782:	ea33 0308 	bics.w	r3, r3, r8
 800a786:	d11b      	bne.n	800a7c0 <_dtoa_r+0xa0>
 800a788:	f242 730f 	movw	r3, #9999	; 0x270f
 800a78c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a78e:	6013      	str	r3, [r2, #0]
 800a790:	9b02      	ldr	r3, [sp, #8]
 800a792:	b923      	cbnz	r3, 800a79e <_dtoa_r+0x7e>
 800a794:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a798:	2800      	cmp	r0, #0
 800a79a:	f000 8545 	beq.w	800b228 <_dtoa_r+0xb08>
 800a79e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a7a0:	b953      	cbnz	r3, 800a7b8 <_dtoa_r+0x98>
 800a7a2:	4ba6      	ldr	r3, [pc, #664]	; (800aa3c <_dtoa_r+0x31c>)
 800a7a4:	e021      	b.n	800a7ea <_dtoa_r+0xca>
 800a7a6:	4ba6      	ldr	r3, [pc, #664]	; (800aa40 <_dtoa_r+0x320>)
 800a7a8:	9306      	str	r3, [sp, #24]
 800a7aa:	3308      	adds	r3, #8
 800a7ac:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a7ae:	6013      	str	r3, [r2, #0]
 800a7b0:	9806      	ldr	r0, [sp, #24]
 800a7b2:	b015      	add	sp, #84	; 0x54
 800a7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7b8:	4ba0      	ldr	r3, [pc, #640]	; (800aa3c <_dtoa_r+0x31c>)
 800a7ba:	9306      	str	r3, [sp, #24]
 800a7bc:	3303      	adds	r3, #3
 800a7be:	e7f5      	b.n	800a7ac <_dtoa_r+0x8c>
 800a7c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	4630      	mov	r0, r6
 800a7ca:	4639      	mov	r1, r7
 800a7cc:	f7f6 f958 	bl	8000a80 <__aeabi_dcmpeq>
 800a7d0:	4682      	mov	sl, r0
 800a7d2:	b160      	cbz	r0, 800a7ee <_dtoa_r+0xce>
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a7d8:	6013      	str	r3, [r2, #0]
 800a7da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	f000 8520 	beq.w	800b222 <_dtoa_r+0xb02>
 800a7e2:	4b98      	ldr	r3, [pc, #608]	; (800aa44 <_dtoa_r+0x324>)
 800a7e4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a7e6:	6013      	str	r3, [r2, #0]
 800a7e8:	3b01      	subs	r3, #1
 800a7ea:	9306      	str	r3, [sp, #24]
 800a7ec:	e7e0      	b.n	800a7b0 <_dtoa_r+0x90>
 800a7ee:	ab12      	add	r3, sp, #72	; 0x48
 800a7f0:	9301      	str	r3, [sp, #4]
 800a7f2:	ab13      	add	r3, sp, #76	; 0x4c
 800a7f4:	9300      	str	r3, [sp, #0]
 800a7f6:	4632      	mov	r2, r6
 800a7f8:	463b      	mov	r3, r7
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	f001 f800 	bl	800b800 <__d2b>
 800a800:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a804:	4683      	mov	fp, r0
 800a806:	2d00      	cmp	r5, #0
 800a808:	d07d      	beq.n	800a906 <_dtoa_r+0x1e6>
 800a80a:	46b0      	mov	r8, r6
 800a80c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a810:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800a814:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800a818:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a81c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800a820:	2200      	movs	r2, #0
 800a822:	4b89      	ldr	r3, [pc, #548]	; (800aa48 <_dtoa_r+0x328>)
 800a824:	4640      	mov	r0, r8
 800a826:	4649      	mov	r1, r9
 800a828:	f7f5 fd0a 	bl	8000240 <__aeabi_dsub>
 800a82c:	a37c      	add	r3, pc, #496	; (adr r3, 800aa20 <_dtoa_r+0x300>)
 800a82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a832:	f7f5 febd 	bl	80005b0 <__aeabi_dmul>
 800a836:	a37c      	add	r3, pc, #496	; (adr r3, 800aa28 <_dtoa_r+0x308>)
 800a838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83c:	f7f5 fd02 	bl	8000244 <__adddf3>
 800a840:	4606      	mov	r6, r0
 800a842:	4628      	mov	r0, r5
 800a844:	460f      	mov	r7, r1
 800a846:	f7f5 fe49 	bl	80004dc <__aeabi_i2d>
 800a84a:	a379      	add	r3, pc, #484	; (adr r3, 800aa30 <_dtoa_r+0x310>)
 800a84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a850:	f7f5 feae 	bl	80005b0 <__aeabi_dmul>
 800a854:	4602      	mov	r2, r0
 800a856:	460b      	mov	r3, r1
 800a858:	4630      	mov	r0, r6
 800a85a:	4639      	mov	r1, r7
 800a85c:	f7f5 fcf2 	bl	8000244 <__adddf3>
 800a860:	4606      	mov	r6, r0
 800a862:	460f      	mov	r7, r1
 800a864:	f7f6 f954 	bl	8000b10 <__aeabi_d2iz>
 800a868:	2200      	movs	r2, #0
 800a86a:	4682      	mov	sl, r0
 800a86c:	2300      	movs	r3, #0
 800a86e:	4630      	mov	r0, r6
 800a870:	4639      	mov	r1, r7
 800a872:	f7f6 f90f 	bl	8000a94 <__aeabi_dcmplt>
 800a876:	b148      	cbz	r0, 800a88c <_dtoa_r+0x16c>
 800a878:	4650      	mov	r0, sl
 800a87a:	f7f5 fe2f 	bl	80004dc <__aeabi_i2d>
 800a87e:	4632      	mov	r2, r6
 800a880:	463b      	mov	r3, r7
 800a882:	f7f6 f8fd 	bl	8000a80 <__aeabi_dcmpeq>
 800a886:	b908      	cbnz	r0, 800a88c <_dtoa_r+0x16c>
 800a888:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a88c:	f1ba 0f16 	cmp.w	sl, #22
 800a890:	d85a      	bhi.n	800a948 <_dtoa_r+0x228>
 800a892:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a896:	496d      	ldr	r1, [pc, #436]	; (800aa4c <_dtoa_r+0x32c>)
 800a898:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a89c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8a0:	f7f6 f916 	bl	8000ad0 <__aeabi_dcmpgt>
 800a8a4:	2800      	cmp	r0, #0
 800a8a6:	d051      	beq.n	800a94c <_dtoa_r+0x22c>
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8ae:	930d      	str	r3, [sp, #52]	; 0x34
 800a8b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a8b2:	1b5d      	subs	r5, r3, r5
 800a8b4:	1e6b      	subs	r3, r5, #1
 800a8b6:	9307      	str	r3, [sp, #28]
 800a8b8:	bf43      	ittte	mi
 800a8ba:	2300      	movmi	r3, #0
 800a8bc:	f1c5 0901 	rsbmi	r9, r5, #1
 800a8c0:	9307      	strmi	r3, [sp, #28]
 800a8c2:	f04f 0900 	movpl.w	r9, #0
 800a8c6:	f1ba 0f00 	cmp.w	sl, #0
 800a8ca:	db41      	blt.n	800a950 <_dtoa_r+0x230>
 800a8cc:	9b07      	ldr	r3, [sp, #28]
 800a8ce:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800a8d2:	4453      	add	r3, sl
 800a8d4:	9307      	str	r3, [sp, #28]
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	9308      	str	r3, [sp, #32]
 800a8da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a8dc:	2b09      	cmp	r3, #9
 800a8de:	f200 808f 	bhi.w	800aa00 <_dtoa_r+0x2e0>
 800a8e2:	2b05      	cmp	r3, #5
 800a8e4:	bfc4      	itt	gt
 800a8e6:	3b04      	subgt	r3, #4
 800a8e8:	931e      	strgt	r3, [sp, #120]	; 0x78
 800a8ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a8ec:	bfc8      	it	gt
 800a8ee:	2500      	movgt	r5, #0
 800a8f0:	f1a3 0302 	sub.w	r3, r3, #2
 800a8f4:	bfd8      	it	le
 800a8f6:	2501      	movle	r5, #1
 800a8f8:	2b03      	cmp	r3, #3
 800a8fa:	f200 808d 	bhi.w	800aa18 <_dtoa_r+0x2f8>
 800a8fe:	e8df f003 	tbb	[pc, r3]
 800a902:	7d7b      	.short	0x7d7b
 800a904:	6f2f      	.short	0x6f2f
 800a906:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a90a:	441d      	add	r5, r3
 800a90c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a910:	2820      	cmp	r0, #32
 800a912:	dd13      	ble.n	800a93c <_dtoa_r+0x21c>
 800a914:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a918:	9b02      	ldr	r3, [sp, #8]
 800a91a:	fa08 f800 	lsl.w	r8, r8, r0
 800a91e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a922:	fa23 f000 	lsr.w	r0, r3, r0
 800a926:	ea48 0000 	orr.w	r0, r8, r0
 800a92a:	f7f5 fdc7 	bl	80004bc <__aeabi_ui2d>
 800a92e:	2301      	movs	r3, #1
 800a930:	4680      	mov	r8, r0
 800a932:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800a936:	3d01      	subs	r5, #1
 800a938:	9310      	str	r3, [sp, #64]	; 0x40
 800a93a:	e771      	b.n	800a820 <_dtoa_r+0x100>
 800a93c:	9b02      	ldr	r3, [sp, #8]
 800a93e:	f1c0 0020 	rsb	r0, r0, #32
 800a942:	fa03 f000 	lsl.w	r0, r3, r0
 800a946:	e7f0      	b.n	800a92a <_dtoa_r+0x20a>
 800a948:	2301      	movs	r3, #1
 800a94a:	e7b0      	b.n	800a8ae <_dtoa_r+0x18e>
 800a94c:	900d      	str	r0, [sp, #52]	; 0x34
 800a94e:	e7af      	b.n	800a8b0 <_dtoa_r+0x190>
 800a950:	f1ca 0300 	rsb	r3, sl, #0
 800a954:	9308      	str	r3, [sp, #32]
 800a956:	2300      	movs	r3, #0
 800a958:	eba9 090a 	sub.w	r9, r9, sl
 800a95c:	930c      	str	r3, [sp, #48]	; 0x30
 800a95e:	e7bc      	b.n	800a8da <_dtoa_r+0x1ba>
 800a960:	2301      	movs	r3, #1
 800a962:	9309      	str	r3, [sp, #36]	; 0x24
 800a964:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a966:	2b00      	cmp	r3, #0
 800a968:	dd74      	ble.n	800aa54 <_dtoa_r+0x334>
 800a96a:	4698      	mov	r8, r3
 800a96c:	9304      	str	r3, [sp, #16]
 800a96e:	2200      	movs	r2, #0
 800a970:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a972:	6072      	str	r2, [r6, #4]
 800a974:	2204      	movs	r2, #4
 800a976:	f102 0014 	add.w	r0, r2, #20
 800a97a:	4298      	cmp	r0, r3
 800a97c:	6871      	ldr	r1, [r6, #4]
 800a97e:	d96e      	bls.n	800aa5e <_dtoa_r+0x33e>
 800a980:	4620      	mov	r0, r4
 800a982:	f000 fcb0 	bl	800b2e6 <_Balloc>
 800a986:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a988:	6030      	str	r0, [r6, #0]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f1b8 0f0e 	cmp.w	r8, #14
 800a990:	9306      	str	r3, [sp, #24]
 800a992:	f200 80ed 	bhi.w	800ab70 <_dtoa_r+0x450>
 800a996:	2d00      	cmp	r5, #0
 800a998:	f000 80ea 	beq.w	800ab70 <_dtoa_r+0x450>
 800a99c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9a0:	f1ba 0f00 	cmp.w	sl, #0
 800a9a4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a9a8:	dd77      	ble.n	800aa9a <_dtoa_r+0x37a>
 800a9aa:	4a28      	ldr	r2, [pc, #160]	; (800aa4c <_dtoa_r+0x32c>)
 800a9ac:	f00a 030f 	and.w	r3, sl, #15
 800a9b0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a9b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a9b8:	06f0      	lsls	r0, r6, #27
 800a9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9be:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a9c2:	d568      	bpl.n	800aa96 <_dtoa_r+0x376>
 800a9c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a9c8:	4b21      	ldr	r3, [pc, #132]	; (800aa50 <_dtoa_r+0x330>)
 800a9ca:	2503      	movs	r5, #3
 800a9cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a9d0:	f7f5 ff18 	bl	8000804 <__aeabi_ddiv>
 800a9d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9d8:	f006 060f 	and.w	r6, r6, #15
 800a9dc:	4f1c      	ldr	r7, [pc, #112]	; (800aa50 <_dtoa_r+0x330>)
 800a9de:	e04f      	b.n	800aa80 <_dtoa_r+0x360>
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	9309      	str	r3, [sp, #36]	; 0x24
 800a9e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a9e6:	4453      	add	r3, sl
 800a9e8:	f103 0801 	add.w	r8, r3, #1
 800a9ec:	9304      	str	r3, [sp, #16]
 800a9ee:	4643      	mov	r3, r8
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	bfb8      	it	lt
 800a9f4:	2301      	movlt	r3, #1
 800a9f6:	e7ba      	b.n	800a96e <_dtoa_r+0x24e>
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	e7b2      	b.n	800a962 <_dtoa_r+0x242>
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	e7f0      	b.n	800a9e2 <_dtoa_r+0x2c2>
 800aa00:	2501      	movs	r5, #1
 800aa02:	2300      	movs	r3, #0
 800aa04:	9509      	str	r5, [sp, #36]	; 0x24
 800aa06:	931e      	str	r3, [sp, #120]	; 0x78
 800aa08:	f04f 33ff 	mov.w	r3, #4294967295
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	9304      	str	r3, [sp, #16]
 800aa10:	4698      	mov	r8, r3
 800aa12:	2312      	movs	r3, #18
 800aa14:	921f      	str	r2, [sp, #124]	; 0x7c
 800aa16:	e7aa      	b.n	800a96e <_dtoa_r+0x24e>
 800aa18:	2301      	movs	r3, #1
 800aa1a:	9309      	str	r3, [sp, #36]	; 0x24
 800aa1c:	e7f4      	b.n	800aa08 <_dtoa_r+0x2e8>
 800aa1e:	bf00      	nop
 800aa20:	636f4361 	.word	0x636f4361
 800aa24:	3fd287a7 	.word	0x3fd287a7
 800aa28:	8b60c8b3 	.word	0x8b60c8b3
 800aa2c:	3fc68a28 	.word	0x3fc68a28
 800aa30:	509f79fb 	.word	0x509f79fb
 800aa34:	3fd34413 	.word	0x3fd34413
 800aa38:	7ff00000 	.word	0x7ff00000
 800aa3c:	0800d605 	.word	0x0800d605
 800aa40:	0800d5fc 	.word	0x0800d5fc
 800aa44:	0800d5d9 	.word	0x0800d5d9
 800aa48:	3ff80000 	.word	0x3ff80000
 800aa4c:	0800d638 	.word	0x0800d638
 800aa50:	0800d610 	.word	0x0800d610
 800aa54:	2301      	movs	r3, #1
 800aa56:	9304      	str	r3, [sp, #16]
 800aa58:	4698      	mov	r8, r3
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	e7da      	b.n	800aa14 <_dtoa_r+0x2f4>
 800aa5e:	3101      	adds	r1, #1
 800aa60:	6071      	str	r1, [r6, #4]
 800aa62:	0052      	lsls	r2, r2, #1
 800aa64:	e787      	b.n	800a976 <_dtoa_r+0x256>
 800aa66:	07f1      	lsls	r1, r6, #31
 800aa68:	d508      	bpl.n	800aa7c <_dtoa_r+0x35c>
 800aa6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aa6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa72:	f7f5 fd9d 	bl	80005b0 <__aeabi_dmul>
 800aa76:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800aa7a:	3501      	adds	r5, #1
 800aa7c:	1076      	asrs	r6, r6, #1
 800aa7e:	3708      	adds	r7, #8
 800aa80:	2e00      	cmp	r6, #0
 800aa82:	d1f0      	bne.n	800aa66 <_dtoa_r+0x346>
 800aa84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800aa88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa8c:	f7f5 feba 	bl	8000804 <__aeabi_ddiv>
 800aa90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa94:	e01b      	b.n	800aace <_dtoa_r+0x3ae>
 800aa96:	2502      	movs	r5, #2
 800aa98:	e7a0      	b.n	800a9dc <_dtoa_r+0x2bc>
 800aa9a:	f000 80a4 	beq.w	800abe6 <_dtoa_r+0x4c6>
 800aa9e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800aaa2:	f1ca 0600 	rsb	r6, sl, #0
 800aaa6:	4ba0      	ldr	r3, [pc, #640]	; (800ad28 <_dtoa_r+0x608>)
 800aaa8:	f006 020f 	and.w	r2, r6, #15
 800aaac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab4:	f7f5 fd7c 	bl	80005b0 <__aeabi_dmul>
 800aab8:	2502      	movs	r5, #2
 800aaba:	2300      	movs	r3, #0
 800aabc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aac0:	4f9a      	ldr	r7, [pc, #616]	; (800ad2c <_dtoa_r+0x60c>)
 800aac2:	1136      	asrs	r6, r6, #4
 800aac4:	2e00      	cmp	r6, #0
 800aac6:	f040 8083 	bne.w	800abd0 <_dtoa_r+0x4b0>
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d1e0      	bne.n	800aa90 <_dtoa_r+0x370>
 800aace:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	f000 808a 	beq.w	800abea <_dtoa_r+0x4ca>
 800aad6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aada:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800aade:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aae2:	2200      	movs	r2, #0
 800aae4:	4b92      	ldr	r3, [pc, #584]	; (800ad30 <_dtoa_r+0x610>)
 800aae6:	f7f5 ffd5 	bl	8000a94 <__aeabi_dcmplt>
 800aaea:	2800      	cmp	r0, #0
 800aaec:	d07d      	beq.n	800abea <_dtoa_r+0x4ca>
 800aaee:	f1b8 0f00 	cmp.w	r8, #0
 800aaf2:	d07a      	beq.n	800abea <_dtoa_r+0x4ca>
 800aaf4:	9b04      	ldr	r3, [sp, #16]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	dd36      	ble.n	800ab68 <_dtoa_r+0x448>
 800aafa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aafe:	2200      	movs	r2, #0
 800ab00:	4b8c      	ldr	r3, [pc, #560]	; (800ad34 <_dtoa_r+0x614>)
 800ab02:	f7f5 fd55 	bl	80005b0 <__aeabi_dmul>
 800ab06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab0a:	9e04      	ldr	r6, [sp, #16]
 800ab0c:	f10a 37ff 	add.w	r7, sl, #4294967295
 800ab10:	3501      	adds	r5, #1
 800ab12:	4628      	mov	r0, r5
 800ab14:	f7f5 fce2 	bl	80004dc <__aeabi_i2d>
 800ab18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab1c:	f7f5 fd48 	bl	80005b0 <__aeabi_dmul>
 800ab20:	2200      	movs	r2, #0
 800ab22:	4b85      	ldr	r3, [pc, #532]	; (800ad38 <_dtoa_r+0x618>)
 800ab24:	f7f5 fb8e 	bl	8000244 <__adddf3>
 800ab28:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800ab2c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ab30:	950b      	str	r5, [sp, #44]	; 0x2c
 800ab32:	2e00      	cmp	r6, #0
 800ab34:	d15c      	bne.n	800abf0 <_dtoa_r+0x4d0>
 800ab36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	4b7f      	ldr	r3, [pc, #508]	; (800ad3c <_dtoa_r+0x61c>)
 800ab3e:	f7f5 fb7f 	bl	8000240 <__aeabi_dsub>
 800ab42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab44:	462b      	mov	r3, r5
 800ab46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab4a:	f7f5 ffc1 	bl	8000ad0 <__aeabi_dcmpgt>
 800ab4e:	2800      	cmp	r0, #0
 800ab50:	f040 8281 	bne.w	800b056 <_dtoa_r+0x936>
 800ab54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab5a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ab5e:	f7f5 ff99 	bl	8000a94 <__aeabi_dcmplt>
 800ab62:	2800      	cmp	r0, #0
 800ab64:	f040 8275 	bne.w	800b052 <_dtoa_r+0x932>
 800ab68:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ab6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ab70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	f2c0 814b 	blt.w	800ae0e <_dtoa_r+0x6ee>
 800ab78:	f1ba 0f0e 	cmp.w	sl, #14
 800ab7c:	f300 8147 	bgt.w	800ae0e <_dtoa_r+0x6ee>
 800ab80:	4b69      	ldr	r3, [pc, #420]	; (800ad28 <_dtoa_r+0x608>)
 800ab82:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ab86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ab8e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	f280 80d7 	bge.w	800ad44 <_dtoa_r+0x624>
 800ab96:	f1b8 0f00 	cmp.w	r8, #0
 800ab9a:	f300 80d3 	bgt.w	800ad44 <_dtoa_r+0x624>
 800ab9e:	f040 8257 	bne.w	800b050 <_dtoa_r+0x930>
 800aba2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aba6:	2200      	movs	r2, #0
 800aba8:	4b64      	ldr	r3, [pc, #400]	; (800ad3c <_dtoa_r+0x61c>)
 800abaa:	f7f5 fd01 	bl	80005b0 <__aeabi_dmul>
 800abae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800abb2:	f7f5 ff83 	bl	8000abc <__aeabi_dcmpge>
 800abb6:	4646      	mov	r6, r8
 800abb8:	4647      	mov	r7, r8
 800abba:	2800      	cmp	r0, #0
 800abbc:	f040 822d 	bne.w	800b01a <_dtoa_r+0x8fa>
 800abc0:	9b06      	ldr	r3, [sp, #24]
 800abc2:	9a06      	ldr	r2, [sp, #24]
 800abc4:	1c5d      	adds	r5, r3, #1
 800abc6:	2331      	movs	r3, #49	; 0x31
 800abc8:	f10a 0a01 	add.w	sl, sl, #1
 800abcc:	7013      	strb	r3, [r2, #0]
 800abce:	e228      	b.n	800b022 <_dtoa_r+0x902>
 800abd0:	07f2      	lsls	r2, r6, #31
 800abd2:	d505      	bpl.n	800abe0 <_dtoa_r+0x4c0>
 800abd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abd8:	f7f5 fcea 	bl	80005b0 <__aeabi_dmul>
 800abdc:	2301      	movs	r3, #1
 800abde:	3501      	adds	r5, #1
 800abe0:	1076      	asrs	r6, r6, #1
 800abe2:	3708      	adds	r7, #8
 800abe4:	e76e      	b.n	800aac4 <_dtoa_r+0x3a4>
 800abe6:	2502      	movs	r5, #2
 800abe8:	e771      	b.n	800aace <_dtoa_r+0x3ae>
 800abea:	4657      	mov	r7, sl
 800abec:	4646      	mov	r6, r8
 800abee:	e790      	b.n	800ab12 <_dtoa_r+0x3f2>
 800abf0:	4b4d      	ldr	r3, [pc, #308]	; (800ad28 <_dtoa_r+0x608>)
 800abf2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800abf6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800abfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d048      	beq.n	800ac92 <_dtoa_r+0x572>
 800ac00:	4602      	mov	r2, r0
 800ac02:	460b      	mov	r3, r1
 800ac04:	2000      	movs	r0, #0
 800ac06:	494e      	ldr	r1, [pc, #312]	; (800ad40 <_dtoa_r+0x620>)
 800ac08:	f7f5 fdfc 	bl	8000804 <__aeabi_ddiv>
 800ac0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ac10:	f7f5 fb16 	bl	8000240 <__aeabi_dsub>
 800ac14:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ac18:	9d06      	ldr	r5, [sp, #24]
 800ac1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac1e:	f7f5 ff77 	bl	8000b10 <__aeabi_d2iz>
 800ac22:	9011      	str	r0, [sp, #68]	; 0x44
 800ac24:	f7f5 fc5a 	bl	80004dc <__aeabi_i2d>
 800ac28:	4602      	mov	r2, r0
 800ac2a:	460b      	mov	r3, r1
 800ac2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac30:	f7f5 fb06 	bl	8000240 <__aeabi_dsub>
 800ac34:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ac36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac3a:	3330      	adds	r3, #48	; 0x30
 800ac3c:	f805 3b01 	strb.w	r3, [r5], #1
 800ac40:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ac44:	f7f5 ff26 	bl	8000a94 <__aeabi_dcmplt>
 800ac48:	2800      	cmp	r0, #0
 800ac4a:	d163      	bne.n	800ad14 <_dtoa_r+0x5f4>
 800ac4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac50:	2000      	movs	r0, #0
 800ac52:	4937      	ldr	r1, [pc, #220]	; (800ad30 <_dtoa_r+0x610>)
 800ac54:	f7f5 faf4 	bl	8000240 <__aeabi_dsub>
 800ac58:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ac5c:	f7f5 ff1a 	bl	8000a94 <__aeabi_dcmplt>
 800ac60:	2800      	cmp	r0, #0
 800ac62:	f040 80b5 	bne.w	800add0 <_dtoa_r+0x6b0>
 800ac66:	9b06      	ldr	r3, [sp, #24]
 800ac68:	1aeb      	subs	r3, r5, r3
 800ac6a:	429e      	cmp	r6, r3
 800ac6c:	f77f af7c 	ble.w	800ab68 <_dtoa_r+0x448>
 800ac70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ac74:	2200      	movs	r2, #0
 800ac76:	4b2f      	ldr	r3, [pc, #188]	; (800ad34 <_dtoa_r+0x614>)
 800ac78:	f7f5 fc9a 	bl	80005b0 <__aeabi_dmul>
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ac82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac86:	4b2b      	ldr	r3, [pc, #172]	; (800ad34 <_dtoa_r+0x614>)
 800ac88:	f7f5 fc92 	bl	80005b0 <__aeabi_dmul>
 800ac8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac90:	e7c3      	b.n	800ac1a <_dtoa_r+0x4fa>
 800ac92:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ac96:	f7f5 fc8b 	bl	80005b0 <__aeabi_dmul>
 800ac9a:	9b06      	ldr	r3, [sp, #24]
 800ac9c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800aca0:	199d      	adds	r5, r3, r6
 800aca2:	461e      	mov	r6, r3
 800aca4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aca8:	f7f5 ff32 	bl	8000b10 <__aeabi_d2iz>
 800acac:	9011      	str	r0, [sp, #68]	; 0x44
 800acae:	f7f5 fc15 	bl	80004dc <__aeabi_i2d>
 800acb2:	4602      	mov	r2, r0
 800acb4:	460b      	mov	r3, r1
 800acb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acba:	f7f5 fac1 	bl	8000240 <__aeabi_dsub>
 800acbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800acc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acc4:	3330      	adds	r3, #48	; 0x30
 800acc6:	f806 3b01 	strb.w	r3, [r6], #1
 800acca:	42ae      	cmp	r6, r5
 800accc:	f04f 0200 	mov.w	r2, #0
 800acd0:	d124      	bne.n	800ad1c <_dtoa_r+0x5fc>
 800acd2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800acd6:	4b1a      	ldr	r3, [pc, #104]	; (800ad40 <_dtoa_r+0x620>)
 800acd8:	f7f5 fab4 	bl	8000244 <__adddf3>
 800acdc:	4602      	mov	r2, r0
 800acde:	460b      	mov	r3, r1
 800ace0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ace4:	f7f5 fef4 	bl	8000ad0 <__aeabi_dcmpgt>
 800ace8:	2800      	cmp	r0, #0
 800acea:	d171      	bne.n	800add0 <_dtoa_r+0x6b0>
 800acec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800acf0:	2000      	movs	r0, #0
 800acf2:	4913      	ldr	r1, [pc, #76]	; (800ad40 <_dtoa_r+0x620>)
 800acf4:	f7f5 faa4 	bl	8000240 <__aeabi_dsub>
 800acf8:	4602      	mov	r2, r0
 800acfa:	460b      	mov	r3, r1
 800acfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad00:	f7f5 fec8 	bl	8000a94 <__aeabi_dcmplt>
 800ad04:	2800      	cmp	r0, #0
 800ad06:	f43f af2f 	beq.w	800ab68 <_dtoa_r+0x448>
 800ad0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ad0e:	1e6a      	subs	r2, r5, #1
 800ad10:	2b30      	cmp	r3, #48	; 0x30
 800ad12:	d001      	beq.n	800ad18 <_dtoa_r+0x5f8>
 800ad14:	46ba      	mov	sl, r7
 800ad16:	e04a      	b.n	800adae <_dtoa_r+0x68e>
 800ad18:	4615      	mov	r5, r2
 800ad1a:	e7f6      	b.n	800ad0a <_dtoa_r+0x5ea>
 800ad1c:	4b05      	ldr	r3, [pc, #20]	; (800ad34 <_dtoa_r+0x614>)
 800ad1e:	f7f5 fc47 	bl	80005b0 <__aeabi_dmul>
 800ad22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad26:	e7bd      	b.n	800aca4 <_dtoa_r+0x584>
 800ad28:	0800d638 	.word	0x0800d638
 800ad2c:	0800d610 	.word	0x0800d610
 800ad30:	3ff00000 	.word	0x3ff00000
 800ad34:	40240000 	.word	0x40240000
 800ad38:	401c0000 	.word	0x401c0000
 800ad3c:	40140000 	.word	0x40140000
 800ad40:	3fe00000 	.word	0x3fe00000
 800ad44:	9d06      	ldr	r5, [sp, #24]
 800ad46:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ad4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad4e:	4630      	mov	r0, r6
 800ad50:	4639      	mov	r1, r7
 800ad52:	f7f5 fd57 	bl	8000804 <__aeabi_ddiv>
 800ad56:	f7f5 fedb 	bl	8000b10 <__aeabi_d2iz>
 800ad5a:	4681      	mov	r9, r0
 800ad5c:	f7f5 fbbe 	bl	80004dc <__aeabi_i2d>
 800ad60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad64:	f7f5 fc24 	bl	80005b0 <__aeabi_dmul>
 800ad68:	4602      	mov	r2, r0
 800ad6a:	460b      	mov	r3, r1
 800ad6c:	4630      	mov	r0, r6
 800ad6e:	4639      	mov	r1, r7
 800ad70:	f7f5 fa66 	bl	8000240 <__aeabi_dsub>
 800ad74:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800ad78:	f805 6b01 	strb.w	r6, [r5], #1
 800ad7c:	9e06      	ldr	r6, [sp, #24]
 800ad7e:	4602      	mov	r2, r0
 800ad80:	1bae      	subs	r6, r5, r6
 800ad82:	45b0      	cmp	r8, r6
 800ad84:	460b      	mov	r3, r1
 800ad86:	d135      	bne.n	800adf4 <_dtoa_r+0x6d4>
 800ad88:	f7f5 fa5c 	bl	8000244 <__adddf3>
 800ad8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad90:	4606      	mov	r6, r0
 800ad92:	460f      	mov	r7, r1
 800ad94:	f7f5 fe9c 	bl	8000ad0 <__aeabi_dcmpgt>
 800ad98:	b9c8      	cbnz	r0, 800adce <_dtoa_r+0x6ae>
 800ad9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad9e:	4630      	mov	r0, r6
 800ada0:	4639      	mov	r1, r7
 800ada2:	f7f5 fe6d 	bl	8000a80 <__aeabi_dcmpeq>
 800ada6:	b110      	cbz	r0, 800adae <_dtoa_r+0x68e>
 800ada8:	f019 0f01 	tst.w	r9, #1
 800adac:	d10f      	bne.n	800adce <_dtoa_r+0x6ae>
 800adae:	4659      	mov	r1, fp
 800adb0:	4620      	mov	r0, r4
 800adb2:	f000 facc 	bl	800b34e <_Bfree>
 800adb6:	2300      	movs	r3, #0
 800adb8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800adba:	702b      	strb	r3, [r5, #0]
 800adbc:	f10a 0301 	add.w	r3, sl, #1
 800adc0:	6013      	str	r3, [r2, #0]
 800adc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	f43f acf3 	beq.w	800a7b0 <_dtoa_r+0x90>
 800adca:	601d      	str	r5, [r3, #0]
 800adcc:	e4f0      	b.n	800a7b0 <_dtoa_r+0x90>
 800adce:	4657      	mov	r7, sl
 800add0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800add4:	1e6b      	subs	r3, r5, #1
 800add6:	2a39      	cmp	r2, #57	; 0x39
 800add8:	d106      	bne.n	800ade8 <_dtoa_r+0x6c8>
 800adda:	9a06      	ldr	r2, [sp, #24]
 800addc:	429a      	cmp	r2, r3
 800adde:	d107      	bne.n	800adf0 <_dtoa_r+0x6d0>
 800ade0:	2330      	movs	r3, #48	; 0x30
 800ade2:	7013      	strb	r3, [r2, #0]
 800ade4:	4613      	mov	r3, r2
 800ade6:	3701      	adds	r7, #1
 800ade8:	781a      	ldrb	r2, [r3, #0]
 800adea:	3201      	adds	r2, #1
 800adec:	701a      	strb	r2, [r3, #0]
 800adee:	e791      	b.n	800ad14 <_dtoa_r+0x5f4>
 800adf0:	461d      	mov	r5, r3
 800adf2:	e7ed      	b.n	800add0 <_dtoa_r+0x6b0>
 800adf4:	2200      	movs	r2, #0
 800adf6:	4b99      	ldr	r3, [pc, #612]	; (800b05c <_dtoa_r+0x93c>)
 800adf8:	f7f5 fbda 	bl	80005b0 <__aeabi_dmul>
 800adfc:	2200      	movs	r2, #0
 800adfe:	2300      	movs	r3, #0
 800ae00:	4606      	mov	r6, r0
 800ae02:	460f      	mov	r7, r1
 800ae04:	f7f5 fe3c 	bl	8000a80 <__aeabi_dcmpeq>
 800ae08:	2800      	cmp	r0, #0
 800ae0a:	d09e      	beq.n	800ad4a <_dtoa_r+0x62a>
 800ae0c:	e7cf      	b.n	800adae <_dtoa_r+0x68e>
 800ae0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae10:	2a00      	cmp	r2, #0
 800ae12:	f000 8088 	beq.w	800af26 <_dtoa_r+0x806>
 800ae16:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ae18:	2a01      	cmp	r2, #1
 800ae1a:	dc6d      	bgt.n	800aef8 <_dtoa_r+0x7d8>
 800ae1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ae1e:	2a00      	cmp	r2, #0
 800ae20:	d066      	beq.n	800aef0 <_dtoa_r+0x7d0>
 800ae22:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ae26:	464d      	mov	r5, r9
 800ae28:	9e08      	ldr	r6, [sp, #32]
 800ae2a:	9a07      	ldr	r2, [sp, #28]
 800ae2c:	2101      	movs	r1, #1
 800ae2e:	441a      	add	r2, r3
 800ae30:	4620      	mov	r0, r4
 800ae32:	4499      	add	r9, r3
 800ae34:	9207      	str	r2, [sp, #28]
 800ae36:	f000 fb2a 	bl	800b48e <__i2b>
 800ae3a:	4607      	mov	r7, r0
 800ae3c:	2d00      	cmp	r5, #0
 800ae3e:	dd0b      	ble.n	800ae58 <_dtoa_r+0x738>
 800ae40:	9b07      	ldr	r3, [sp, #28]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	dd08      	ble.n	800ae58 <_dtoa_r+0x738>
 800ae46:	42ab      	cmp	r3, r5
 800ae48:	bfa8      	it	ge
 800ae4a:	462b      	movge	r3, r5
 800ae4c:	9a07      	ldr	r2, [sp, #28]
 800ae4e:	eba9 0903 	sub.w	r9, r9, r3
 800ae52:	1aed      	subs	r5, r5, r3
 800ae54:	1ad3      	subs	r3, r2, r3
 800ae56:	9307      	str	r3, [sp, #28]
 800ae58:	9b08      	ldr	r3, [sp, #32]
 800ae5a:	b1eb      	cbz	r3, 800ae98 <_dtoa_r+0x778>
 800ae5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d065      	beq.n	800af2e <_dtoa_r+0x80e>
 800ae62:	b18e      	cbz	r6, 800ae88 <_dtoa_r+0x768>
 800ae64:	4639      	mov	r1, r7
 800ae66:	4632      	mov	r2, r6
 800ae68:	4620      	mov	r0, r4
 800ae6a:	f000 fbaf 	bl	800b5cc <__pow5mult>
 800ae6e:	465a      	mov	r2, fp
 800ae70:	4601      	mov	r1, r0
 800ae72:	4607      	mov	r7, r0
 800ae74:	4620      	mov	r0, r4
 800ae76:	f000 fb13 	bl	800b4a0 <__multiply>
 800ae7a:	4659      	mov	r1, fp
 800ae7c:	900a      	str	r0, [sp, #40]	; 0x28
 800ae7e:	4620      	mov	r0, r4
 800ae80:	f000 fa65 	bl	800b34e <_Bfree>
 800ae84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae86:	469b      	mov	fp, r3
 800ae88:	9b08      	ldr	r3, [sp, #32]
 800ae8a:	1b9a      	subs	r2, r3, r6
 800ae8c:	d004      	beq.n	800ae98 <_dtoa_r+0x778>
 800ae8e:	4659      	mov	r1, fp
 800ae90:	4620      	mov	r0, r4
 800ae92:	f000 fb9b 	bl	800b5cc <__pow5mult>
 800ae96:	4683      	mov	fp, r0
 800ae98:	2101      	movs	r1, #1
 800ae9a:	4620      	mov	r0, r4
 800ae9c:	f000 faf7 	bl	800b48e <__i2b>
 800aea0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aea2:	4606      	mov	r6, r0
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	f000 81c6 	beq.w	800b236 <_dtoa_r+0xb16>
 800aeaa:	461a      	mov	r2, r3
 800aeac:	4601      	mov	r1, r0
 800aeae:	4620      	mov	r0, r4
 800aeb0:	f000 fb8c 	bl	800b5cc <__pow5mult>
 800aeb4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800aeb6:	4606      	mov	r6, r0
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	dc3e      	bgt.n	800af3a <_dtoa_r+0x81a>
 800aebc:	9b02      	ldr	r3, [sp, #8]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d137      	bne.n	800af32 <_dtoa_r+0x812>
 800aec2:	9b03      	ldr	r3, [sp, #12]
 800aec4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d134      	bne.n	800af36 <_dtoa_r+0x816>
 800aecc:	9b03      	ldr	r3, [sp, #12]
 800aece:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aed2:	0d1b      	lsrs	r3, r3, #20
 800aed4:	051b      	lsls	r3, r3, #20
 800aed6:	b12b      	cbz	r3, 800aee4 <_dtoa_r+0x7c4>
 800aed8:	9b07      	ldr	r3, [sp, #28]
 800aeda:	f109 0901 	add.w	r9, r9, #1
 800aede:	3301      	adds	r3, #1
 800aee0:	9307      	str	r3, [sp, #28]
 800aee2:	2301      	movs	r3, #1
 800aee4:	9308      	str	r3, [sp, #32]
 800aee6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d128      	bne.n	800af3e <_dtoa_r+0x81e>
 800aeec:	2001      	movs	r0, #1
 800aeee:	e02e      	b.n	800af4e <_dtoa_r+0x82e>
 800aef0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aef2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aef6:	e796      	b.n	800ae26 <_dtoa_r+0x706>
 800aef8:	9b08      	ldr	r3, [sp, #32]
 800aefa:	f108 36ff 	add.w	r6, r8, #4294967295
 800aefe:	42b3      	cmp	r3, r6
 800af00:	bfb7      	itett	lt
 800af02:	9b08      	ldrlt	r3, [sp, #32]
 800af04:	1b9e      	subge	r6, r3, r6
 800af06:	1af2      	sublt	r2, r6, r3
 800af08:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800af0a:	bfbf      	itttt	lt
 800af0c:	9608      	strlt	r6, [sp, #32]
 800af0e:	189b      	addlt	r3, r3, r2
 800af10:	930c      	strlt	r3, [sp, #48]	; 0x30
 800af12:	2600      	movlt	r6, #0
 800af14:	f1b8 0f00 	cmp.w	r8, #0
 800af18:	bfb9      	ittee	lt
 800af1a:	eba9 0508 	sublt.w	r5, r9, r8
 800af1e:	2300      	movlt	r3, #0
 800af20:	464d      	movge	r5, r9
 800af22:	4643      	movge	r3, r8
 800af24:	e781      	b.n	800ae2a <_dtoa_r+0x70a>
 800af26:	9e08      	ldr	r6, [sp, #32]
 800af28:	464d      	mov	r5, r9
 800af2a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800af2c:	e786      	b.n	800ae3c <_dtoa_r+0x71c>
 800af2e:	9a08      	ldr	r2, [sp, #32]
 800af30:	e7ad      	b.n	800ae8e <_dtoa_r+0x76e>
 800af32:	2300      	movs	r3, #0
 800af34:	e7d6      	b.n	800aee4 <_dtoa_r+0x7c4>
 800af36:	9b02      	ldr	r3, [sp, #8]
 800af38:	e7d4      	b.n	800aee4 <_dtoa_r+0x7c4>
 800af3a:	2300      	movs	r3, #0
 800af3c:	9308      	str	r3, [sp, #32]
 800af3e:	6933      	ldr	r3, [r6, #16]
 800af40:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800af44:	6918      	ldr	r0, [r3, #16]
 800af46:	f000 fa54 	bl	800b3f2 <__hi0bits>
 800af4a:	f1c0 0020 	rsb	r0, r0, #32
 800af4e:	9b07      	ldr	r3, [sp, #28]
 800af50:	4418      	add	r0, r3
 800af52:	f010 001f 	ands.w	r0, r0, #31
 800af56:	d047      	beq.n	800afe8 <_dtoa_r+0x8c8>
 800af58:	f1c0 0320 	rsb	r3, r0, #32
 800af5c:	2b04      	cmp	r3, #4
 800af5e:	dd3b      	ble.n	800afd8 <_dtoa_r+0x8b8>
 800af60:	9b07      	ldr	r3, [sp, #28]
 800af62:	f1c0 001c 	rsb	r0, r0, #28
 800af66:	4481      	add	r9, r0
 800af68:	4405      	add	r5, r0
 800af6a:	4403      	add	r3, r0
 800af6c:	9307      	str	r3, [sp, #28]
 800af6e:	f1b9 0f00 	cmp.w	r9, #0
 800af72:	dd05      	ble.n	800af80 <_dtoa_r+0x860>
 800af74:	4659      	mov	r1, fp
 800af76:	464a      	mov	r2, r9
 800af78:	4620      	mov	r0, r4
 800af7a:	f000 fb75 	bl	800b668 <__lshift>
 800af7e:	4683      	mov	fp, r0
 800af80:	9b07      	ldr	r3, [sp, #28]
 800af82:	2b00      	cmp	r3, #0
 800af84:	dd05      	ble.n	800af92 <_dtoa_r+0x872>
 800af86:	4631      	mov	r1, r6
 800af88:	461a      	mov	r2, r3
 800af8a:	4620      	mov	r0, r4
 800af8c:	f000 fb6c 	bl	800b668 <__lshift>
 800af90:	4606      	mov	r6, r0
 800af92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af94:	b353      	cbz	r3, 800afec <_dtoa_r+0x8cc>
 800af96:	4631      	mov	r1, r6
 800af98:	4658      	mov	r0, fp
 800af9a:	f000 fbb9 	bl	800b710 <__mcmp>
 800af9e:	2800      	cmp	r0, #0
 800afa0:	da24      	bge.n	800afec <_dtoa_r+0x8cc>
 800afa2:	2300      	movs	r3, #0
 800afa4:	4659      	mov	r1, fp
 800afa6:	220a      	movs	r2, #10
 800afa8:	4620      	mov	r0, r4
 800afaa:	f000 f9e7 	bl	800b37c <__multadd>
 800afae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afb0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800afb4:	4683      	mov	fp, r0
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	f000 8144 	beq.w	800b244 <_dtoa_r+0xb24>
 800afbc:	2300      	movs	r3, #0
 800afbe:	4639      	mov	r1, r7
 800afc0:	220a      	movs	r2, #10
 800afc2:	4620      	mov	r0, r4
 800afc4:	f000 f9da 	bl	800b37c <__multadd>
 800afc8:	9b04      	ldr	r3, [sp, #16]
 800afca:	4607      	mov	r7, r0
 800afcc:	2b00      	cmp	r3, #0
 800afce:	dc4d      	bgt.n	800b06c <_dtoa_r+0x94c>
 800afd0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800afd2:	2b02      	cmp	r3, #2
 800afd4:	dd4a      	ble.n	800b06c <_dtoa_r+0x94c>
 800afd6:	e011      	b.n	800affc <_dtoa_r+0x8dc>
 800afd8:	d0c9      	beq.n	800af6e <_dtoa_r+0x84e>
 800afda:	9a07      	ldr	r2, [sp, #28]
 800afdc:	331c      	adds	r3, #28
 800afde:	441a      	add	r2, r3
 800afe0:	4499      	add	r9, r3
 800afe2:	441d      	add	r5, r3
 800afe4:	4613      	mov	r3, r2
 800afe6:	e7c1      	b.n	800af6c <_dtoa_r+0x84c>
 800afe8:	4603      	mov	r3, r0
 800afea:	e7f6      	b.n	800afda <_dtoa_r+0x8ba>
 800afec:	f1b8 0f00 	cmp.w	r8, #0
 800aff0:	dc36      	bgt.n	800b060 <_dtoa_r+0x940>
 800aff2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800aff4:	2b02      	cmp	r3, #2
 800aff6:	dd33      	ble.n	800b060 <_dtoa_r+0x940>
 800aff8:	f8cd 8010 	str.w	r8, [sp, #16]
 800affc:	9b04      	ldr	r3, [sp, #16]
 800affe:	b963      	cbnz	r3, 800b01a <_dtoa_r+0x8fa>
 800b000:	4631      	mov	r1, r6
 800b002:	2205      	movs	r2, #5
 800b004:	4620      	mov	r0, r4
 800b006:	f000 f9b9 	bl	800b37c <__multadd>
 800b00a:	4601      	mov	r1, r0
 800b00c:	4606      	mov	r6, r0
 800b00e:	4658      	mov	r0, fp
 800b010:	f000 fb7e 	bl	800b710 <__mcmp>
 800b014:	2800      	cmp	r0, #0
 800b016:	f73f add3 	bgt.w	800abc0 <_dtoa_r+0x4a0>
 800b01a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b01c:	9d06      	ldr	r5, [sp, #24]
 800b01e:	ea6f 0a03 	mvn.w	sl, r3
 800b022:	f04f 0900 	mov.w	r9, #0
 800b026:	4631      	mov	r1, r6
 800b028:	4620      	mov	r0, r4
 800b02a:	f000 f990 	bl	800b34e <_Bfree>
 800b02e:	2f00      	cmp	r7, #0
 800b030:	f43f aebd 	beq.w	800adae <_dtoa_r+0x68e>
 800b034:	f1b9 0f00 	cmp.w	r9, #0
 800b038:	d005      	beq.n	800b046 <_dtoa_r+0x926>
 800b03a:	45b9      	cmp	r9, r7
 800b03c:	d003      	beq.n	800b046 <_dtoa_r+0x926>
 800b03e:	4649      	mov	r1, r9
 800b040:	4620      	mov	r0, r4
 800b042:	f000 f984 	bl	800b34e <_Bfree>
 800b046:	4639      	mov	r1, r7
 800b048:	4620      	mov	r0, r4
 800b04a:	f000 f980 	bl	800b34e <_Bfree>
 800b04e:	e6ae      	b.n	800adae <_dtoa_r+0x68e>
 800b050:	2600      	movs	r6, #0
 800b052:	4637      	mov	r7, r6
 800b054:	e7e1      	b.n	800b01a <_dtoa_r+0x8fa>
 800b056:	46ba      	mov	sl, r7
 800b058:	4637      	mov	r7, r6
 800b05a:	e5b1      	b.n	800abc0 <_dtoa_r+0x4a0>
 800b05c:	40240000 	.word	0x40240000
 800b060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b062:	f8cd 8010 	str.w	r8, [sp, #16]
 800b066:	2b00      	cmp	r3, #0
 800b068:	f000 80f3 	beq.w	800b252 <_dtoa_r+0xb32>
 800b06c:	2d00      	cmp	r5, #0
 800b06e:	dd05      	ble.n	800b07c <_dtoa_r+0x95c>
 800b070:	4639      	mov	r1, r7
 800b072:	462a      	mov	r2, r5
 800b074:	4620      	mov	r0, r4
 800b076:	f000 faf7 	bl	800b668 <__lshift>
 800b07a:	4607      	mov	r7, r0
 800b07c:	9b08      	ldr	r3, [sp, #32]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d04c      	beq.n	800b11c <_dtoa_r+0x9fc>
 800b082:	6879      	ldr	r1, [r7, #4]
 800b084:	4620      	mov	r0, r4
 800b086:	f000 f92e 	bl	800b2e6 <_Balloc>
 800b08a:	4605      	mov	r5, r0
 800b08c:	693a      	ldr	r2, [r7, #16]
 800b08e:	f107 010c 	add.w	r1, r7, #12
 800b092:	3202      	adds	r2, #2
 800b094:	0092      	lsls	r2, r2, #2
 800b096:	300c      	adds	r0, #12
 800b098:	f000 f91a 	bl	800b2d0 <memcpy>
 800b09c:	2201      	movs	r2, #1
 800b09e:	4629      	mov	r1, r5
 800b0a0:	4620      	mov	r0, r4
 800b0a2:	f000 fae1 	bl	800b668 <__lshift>
 800b0a6:	46b9      	mov	r9, r7
 800b0a8:	4607      	mov	r7, r0
 800b0aa:	9b06      	ldr	r3, [sp, #24]
 800b0ac:	9307      	str	r3, [sp, #28]
 800b0ae:	9b02      	ldr	r3, [sp, #8]
 800b0b0:	f003 0301 	and.w	r3, r3, #1
 800b0b4:	9308      	str	r3, [sp, #32]
 800b0b6:	4631      	mov	r1, r6
 800b0b8:	4658      	mov	r0, fp
 800b0ba:	f7ff faa3 	bl	800a604 <quorem>
 800b0be:	4649      	mov	r1, r9
 800b0c0:	4605      	mov	r5, r0
 800b0c2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b0c6:	4658      	mov	r0, fp
 800b0c8:	f000 fb22 	bl	800b710 <__mcmp>
 800b0cc:	463a      	mov	r2, r7
 800b0ce:	9002      	str	r0, [sp, #8]
 800b0d0:	4631      	mov	r1, r6
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	f000 fb36 	bl	800b744 <__mdiff>
 800b0d8:	68c3      	ldr	r3, [r0, #12]
 800b0da:	4602      	mov	r2, r0
 800b0dc:	bb03      	cbnz	r3, 800b120 <_dtoa_r+0xa00>
 800b0de:	4601      	mov	r1, r0
 800b0e0:	9009      	str	r0, [sp, #36]	; 0x24
 800b0e2:	4658      	mov	r0, fp
 800b0e4:	f000 fb14 	bl	800b710 <__mcmp>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0ec:	4611      	mov	r1, r2
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	9309      	str	r3, [sp, #36]	; 0x24
 800b0f2:	f000 f92c 	bl	800b34e <_Bfree>
 800b0f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0f8:	b9a3      	cbnz	r3, 800b124 <_dtoa_r+0xa04>
 800b0fa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b0fc:	b992      	cbnz	r2, 800b124 <_dtoa_r+0xa04>
 800b0fe:	9a08      	ldr	r2, [sp, #32]
 800b100:	b982      	cbnz	r2, 800b124 <_dtoa_r+0xa04>
 800b102:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b106:	d029      	beq.n	800b15c <_dtoa_r+0xa3c>
 800b108:	9b02      	ldr	r3, [sp, #8]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	dd01      	ble.n	800b112 <_dtoa_r+0x9f2>
 800b10e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800b112:	9b07      	ldr	r3, [sp, #28]
 800b114:	1c5d      	adds	r5, r3, #1
 800b116:	f883 8000 	strb.w	r8, [r3]
 800b11a:	e784      	b.n	800b026 <_dtoa_r+0x906>
 800b11c:	4638      	mov	r0, r7
 800b11e:	e7c2      	b.n	800b0a6 <_dtoa_r+0x986>
 800b120:	2301      	movs	r3, #1
 800b122:	e7e3      	b.n	800b0ec <_dtoa_r+0x9cc>
 800b124:	9a02      	ldr	r2, [sp, #8]
 800b126:	2a00      	cmp	r2, #0
 800b128:	db04      	blt.n	800b134 <_dtoa_r+0xa14>
 800b12a:	d123      	bne.n	800b174 <_dtoa_r+0xa54>
 800b12c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b12e:	bb0a      	cbnz	r2, 800b174 <_dtoa_r+0xa54>
 800b130:	9a08      	ldr	r2, [sp, #32]
 800b132:	b9fa      	cbnz	r2, 800b174 <_dtoa_r+0xa54>
 800b134:	2b00      	cmp	r3, #0
 800b136:	ddec      	ble.n	800b112 <_dtoa_r+0x9f2>
 800b138:	4659      	mov	r1, fp
 800b13a:	2201      	movs	r2, #1
 800b13c:	4620      	mov	r0, r4
 800b13e:	f000 fa93 	bl	800b668 <__lshift>
 800b142:	4631      	mov	r1, r6
 800b144:	4683      	mov	fp, r0
 800b146:	f000 fae3 	bl	800b710 <__mcmp>
 800b14a:	2800      	cmp	r0, #0
 800b14c:	dc03      	bgt.n	800b156 <_dtoa_r+0xa36>
 800b14e:	d1e0      	bne.n	800b112 <_dtoa_r+0x9f2>
 800b150:	f018 0f01 	tst.w	r8, #1
 800b154:	d0dd      	beq.n	800b112 <_dtoa_r+0x9f2>
 800b156:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b15a:	d1d8      	bne.n	800b10e <_dtoa_r+0x9ee>
 800b15c:	9b07      	ldr	r3, [sp, #28]
 800b15e:	9a07      	ldr	r2, [sp, #28]
 800b160:	1c5d      	adds	r5, r3, #1
 800b162:	2339      	movs	r3, #57	; 0x39
 800b164:	7013      	strb	r3, [r2, #0]
 800b166:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b16a:	1e6a      	subs	r2, r5, #1
 800b16c:	2b39      	cmp	r3, #57	; 0x39
 800b16e:	d04d      	beq.n	800b20c <_dtoa_r+0xaec>
 800b170:	3301      	adds	r3, #1
 800b172:	e052      	b.n	800b21a <_dtoa_r+0xafa>
 800b174:	9a07      	ldr	r2, [sp, #28]
 800b176:	2b00      	cmp	r3, #0
 800b178:	f102 0501 	add.w	r5, r2, #1
 800b17c:	dd06      	ble.n	800b18c <_dtoa_r+0xa6c>
 800b17e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b182:	d0eb      	beq.n	800b15c <_dtoa_r+0xa3c>
 800b184:	f108 0801 	add.w	r8, r8, #1
 800b188:	9b07      	ldr	r3, [sp, #28]
 800b18a:	e7c4      	b.n	800b116 <_dtoa_r+0x9f6>
 800b18c:	9b06      	ldr	r3, [sp, #24]
 800b18e:	9a04      	ldr	r2, [sp, #16]
 800b190:	1aeb      	subs	r3, r5, r3
 800b192:	4293      	cmp	r3, r2
 800b194:	f805 8c01 	strb.w	r8, [r5, #-1]
 800b198:	d021      	beq.n	800b1de <_dtoa_r+0xabe>
 800b19a:	4659      	mov	r1, fp
 800b19c:	2300      	movs	r3, #0
 800b19e:	220a      	movs	r2, #10
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	f000 f8eb 	bl	800b37c <__multadd>
 800b1a6:	45b9      	cmp	r9, r7
 800b1a8:	4683      	mov	fp, r0
 800b1aa:	f04f 0300 	mov.w	r3, #0
 800b1ae:	f04f 020a 	mov.w	r2, #10
 800b1b2:	4649      	mov	r1, r9
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	d105      	bne.n	800b1c4 <_dtoa_r+0xaa4>
 800b1b8:	f000 f8e0 	bl	800b37c <__multadd>
 800b1bc:	4681      	mov	r9, r0
 800b1be:	4607      	mov	r7, r0
 800b1c0:	9507      	str	r5, [sp, #28]
 800b1c2:	e778      	b.n	800b0b6 <_dtoa_r+0x996>
 800b1c4:	f000 f8da 	bl	800b37c <__multadd>
 800b1c8:	4639      	mov	r1, r7
 800b1ca:	4681      	mov	r9, r0
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	220a      	movs	r2, #10
 800b1d0:	4620      	mov	r0, r4
 800b1d2:	f000 f8d3 	bl	800b37c <__multadd>
 800b1d6:	4607      	mov	r7, r0
 800b1d8:	e7f2      	b.n	800b1c0 <_dtoa_r+0xaa0>
 800b1da:	f04f 0900 	mov.w	r9, #0
 800b1de:	4659      	mov	r1, fp
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	4620      	mov	r0, r4
 800b1e4:	f000 fa40 	bl	800b668 <__lshift>
 800b1e8:	4631      	mov	r1, r6
 800b1ea:	4683      	mov	fp, r0
 800b1ec:	f000 fa90 	bl	800b710 <__mcmp>
 800b1f0:	2800      	cmp	r0, #0
 800b1f2:	dcb8      	bgt.n	800b166 <_dtoa_r+0xa46>
 800b1f4:	d102      	bne.n	800b1fc <_dtoa_r+0xadc>
 800b1f6:	f018 0f01 	tst.w	r8, #1
 800b1fa:	d1b4      	bne.n	800b166 <_dtoa_r+0xa46>
 800b1fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b200:	1e6a      	subs	r2, r5, #1
 800b202:	2b30      	cmp	r3, #48	; 0x30
 800b204:	f47f af0f 	bne.w	800b026 <_dtoa_r+0x906>
 800b208:	4615      	mov	r5, r2
 800b20a:	e7f7      	b.n	800b1fc <_dtoa_r+0xadc>
 800b20c:	9b06      	ldr	r3, [sp, #24]
 800b20e:	4293      	cmp	r3, r2
 800b210:	d105      	bne.n	800b21e <_dtoa_r+0xafe>
 800b212:	2331      	movs	r3, #49	; 0x31
 800b214:	9a06      	ldr	r2, [sp, #24]
 800b216:	f10a 0a01 	add.w	sl, sl, #1
 800b21a:	7013      	strb	r3, [r2, #0]
 800b21c:	e703      	b.n	800b026 <_dtoa_r+0x906>
 800b21e:	4615      	mov	r5, r2
 800b220:	e7a1      	b.n	800b166 <_dtoa_r+0xa46>
 800b222:	4b17      	ldr	r3, [pc, #92]	; (800b280 <_dtoa_r+0xb60>)
 800b224:	f7ff bae1 	b.w	800a7ea <_dtoa_r+0xca>
 800b228:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	f47f aabb 	bne.w	800a7a6 <_dtoa_r+0x86>
 800b230:	4b14      	ldr	r3, [pc, #80]	; (800b284 <_dtoa_r+0xb64>)
 800b232:	f7ff bada 	b.w	800a7ea <_dtoa_r+0xca>
 800b236:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b238:	2b01      	cmp	r3, #1
 800b23a:	f77f ae3f 	ble.w	800aebc <_dtoa_r+0x79c>
 800b23e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b240:	9308      	str	r3, [sp, #32]
 800b242:	e653      	b.n	800aeec <_dtoa_r+0x7cc>
 800b244:	9b04      	ldr	r3, [sp, #16]
 800b246:	2b00      	cmp	r3, #0
 800b248:	dc03      	bgt.n	800b252 <_dtoa_r+0xb32>
 800b24a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b24c:	2b02      	cmp	r3, #2
 800b24e:	f73f aed5 	bgt.w	800affc <_dtoa_r+0x8dc>
 800b252:	9d06      	ldr	r5, [sp, #24]
 800b254:	4631      	mov	r1, r6
 800b256:	4658      	mov	r0, fp
 800b258:	f7ff f9d4 	bl	800a604 <quorem>
 800b25c:	9b06      	ldr	r3, [sp, #24]
 800b25e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b262:	f805 8b01 	strb.w	r8, [r5], #1
 800b266:	9a04      	ldr	r2, [sp, #16]
 800b268:	1aeb      	subs	r3, r5, r3
 800b26a:	429a      	cmp	r2, r3
 800b26c:	ddb5      	ble.n	800b1da <_dtoa_r+0xaba>
 800b26e:	4659      	mov	r1, fp
 800b270:	2300      	movs	r3, #0
 800b272:	220a      	movs	r2, #10
 800b274:	4620      	mov	r0, r4
 800b276:	f000 f881 	bl	800b37c <__multadd>
 800b27a:	4683      	mov	fp, r0
 800b27c:	e7ea      	b.n	800b254 <_dtoa_r+0xb34>
 800b27e:	bf00      	nop
 800b280:	0800d5d8 	.word	0x0800d5d8
 800b284:	0800d5fc 	.word	0x0800d5fc

0800b288 <_localeconv_r>:
 800b288:	4b04      	ldr	r3, [pc, #16]	; (800b29c <_localeconv_r+0x14>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	6a18      	ldr	r0, [r3, #32]
 800b28e:	4b04      	ldr	r3, [pc, #16]	; (800b2a0 <_localeconv_r+0x18>)
 800b290:	2800      	cmp	r0, #0
 800b292:	bf08      	it	eq
 800b294:	4618      	moveq	r0, r3
 800b296:	30f0      	adds	r0, #240	; 0xf0
 800b298:	4770      	bx	lr
 800b29a:	bf00      	nop
 800b29c:	2000007c 	.word	0x2000007c
 800b2a0:	200000e0 	.word	0x200000e0

0800b2a4 <malloc>:
 800b2a4:	4b02      	ldr	r3, [pc, #8]	; (800b2b0 <malloc+0xc>)
 800b2a6:	4601      	mov	r1, r0
 800b2a8:	6818      	ldr	r0, [r3, #0]
 800b2aa:	f000 bb53 	b.w	800b954 <_malloc_r>
 800b2ae:	bf00      	nop
 800b2b0:	2000007c 	.word	0x2000007c

0800b2b4 <memchr>:
 800b2b4:	b510      	push	{r4, lr}
 800b2b6:	b2c9      	uxtb	r1, r1
 800b2b8:	4402      	add	r2, r0
 800b2ba:	4290      	cmp	r0, r2
 800b2bc:	4603      	mov	r3, r0
 800b2be:	d101      	bne.n	800b2c4 <memchr+0x10>
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	e003      	b.n	800b2cc <memchr+0x18>
 800b2c4:	781c      	ldrb	r4, [r3, #0]
 800b2c6:	3001      	adds	r0, #1
 800b2c8:	428c      	cmp	r4, r1
 800b2ca:	d1f6      	bne.n	800b2ba <memchr+0x6>
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	bd10      	pop	{r4, pc}

0800b2d0 <memcpy>:
 800b2d0:	b510      	push	{r4, lr}
 800b2d2:	1e43      	subs	r3, r0, #1
 800b2d4:	440a      	add	r2, r1
 800b2d6:	4291      	cmp	r1, r2
 800b2d8:	d100      	bne.n	800b2dc <memcpy+0xc>
 800b2da:	bd10      	pop	{r4, pc}
 800b2dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2e4:	e7f7      	b.n	800b2d6 <memcpy+0x6>

0800b2e6 <_Balloc>:
 800b2e6:	b570      	push	{r4, r5, r6, lr}
 800b2e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b2ea:	4604      	mov	r4, r0
 800b2ec:	460e      	mov	r6, r1
 800b2ee:	b93d      	cbnz	r5, 800b300 <_Balloc+0x1a>
 800b2f0:	2010      	movs	r0, #16
 800b2f2:	f7ff ffd7 	bl	800b2a4 <malloc>
 800b2f6:	6260      	str	r0, [r4, #36]	; 0x24
 800b2f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b2fc:	6005      	str	r5, [r0, #0]
 800b2fe:	60c5      	str	r5, [r0, #12]
 800b300:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b302:	68eb      	ldr	r3, [r5, #12]
 800b304:	b183      	cbz	r3, 800b328 <_Balloc+0x42>
 800b306:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b308:	68db      	ldr	r3, [r3, #12]
 800b30a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b30e:	b9b8      	cbnz	r0, 800b340 <_Balloc+0x5a>
 800b310:	2101      	movs	r1, #1
 800b312:	fa01 f506 	lsl.w	r5, r1, r6
 800b316:	1d6a      	adds	r2, r5, #5
 800b318:	0092      	lsls	r2, r2, #2
 800b31a:	4620      	mov	r0, r4
 800b31c:	f000 fabf 	bl	800b89e <_calloc_r>
 800b320:	b160      	cbz	r0, 800b33c <_Balloc+0x56>
 800b322:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b326:	e00e      	b.n	800b346 <_Balloc+0x60>
 800b328:	2221      	movs	r2, #33	; 0x21
 800b32a:	2104      	movs	r1, #4
 800b32c:	4620      	mov	r0, r4
 800b32e:	f000 fab6 	bl	800b89e <_calloc_r>
 800b332:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b334:	60e8      	str	r0, [r5, #12]
 800b336:	68db      	ldr	r3, [r3, #12]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d1e4      	bne.n	800b306 <_Balloc+0x20>
 800b33c:	2000      	movs	r0, #0
 800b33e:	bd70      	pop	{r4, r5, r6, pc}
 800b340:	6802      	ldr	r2, [r0, #0]
 800b342:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b346:	2300      	movs	r3, #0
 800b348:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b34c:	e7f7      	b.n	800b33e <_Balloc+0x58>

0800b34e <_Bfree>:
 800b34e:	b570      	push	{r4, r5, r6, lr}
 800b350:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b352:	4606      	mov	r6, r0
 800b354:	460d      	mov	r5, r1
 800b356:	b93c      	cbnz	r4, 800b368 <_Bfree+0x1a>
 800b358:	2010      	movs	r0, #16
 800b35a:	f7ff ffa3 	bl	800b2a4 <malloc>
 800b35e:	6270      	str	r0, [r6, #36]	; 0x24
 800b360:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b364:	6004      	str	r4, [r0, #0]
 800b366:	60c4      	str	r4, [r0, #12]
 800b368:	b13d      	cbz	r5, 800b37a <_Bfree+0x2c>
 800b36a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b36c:	686a      	ldr	r2, [r5, #4]
 800b36e:	68db      	ldr	r3, [r3, #12]
 800b370:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b374:	6029      	str	r1, [r5, #0]
 800b376:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b37a:	bd70      	pop	{r4, r5, r6, pc}

0800b37c <__multadd>:
 800b37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b380:	461f      	mov	r7, r3
 800b382:	4606      	mov	r6, r0
 800b384:	460c      	mov	r4, r1
 800b386:	2300      	movs	r3, #0
 800b388:	690d      	ldr	r5, [r1, #16]
 800b38a:	f101 0c14 	add.w	ip, r1, #20
 800b38e:	f8dc 0000 	ldr.w	r0, [ip]
 800b392:	3301      	adds	r3, #1
 800b394:	b281      	uxth	r1, r0
 800b396:	fb02 7101 	mla	r1, r2, r1, r7
 800b39a:	0c00      	lsrs	r0, r0, #16
 800b39c:	0c0f      	lsrs	r7, r1, #16
 800b39e:	fb02 7000 	mla	r0, r2, r0, r7
 800b3a2:	b289      	uxth	r1, r1
 800b3a4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b3a8:	429d      	cmp	r5, r3
 800b3aa:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b3ae:	f84c 1b04 	str.w	r1, [ip], #4
 800b3b2:	dcec      	bgt.n	800b38e <__multadd+0x12>
 800b3b4:	b1d7      	cbz	r7, 800b3ec <__multadd+0x70>
 800b3b6:	68a3      	ldr	r3, [r4, #8]
 800b3b8:	42ab      	cmp	r3, r5
 800b3ba:	dc12      	bgt.n	800b3e2 <__multadd+0x66>
 800b3bc:	6861      	ldr	r1, [r4, #4]
 800b3be:	4630      	mov	r0, r6
 800b3c0:	3101      	adds	r1, #1
 800b3c2:	f7ff ff90 	bl	800b2e6 <_Balloc>
 800b3c6:	4680      	mov	r8, r0
 800b3c8:	6922      	ldr	r2, [r4, #16]
 800b3ca:	f104 010c 	add.w	r1, r4, #12
 800b3ce:	3202      	adds	r2, #2
 800b3d0:	0092      	lsls	r2, r2, #2
 800b3d2:	300c      	adds	r0, #12
 800b3d4:	f7ff ff7c 	bl	800b2d0 <memcpy>
 800b3d8:	4621      	mov	r1, r4
 800b3da:	4630      	mov	r0, r6
 800b3dc:	f7ff ffb7 	bl	800b34e <_Bfree>
 800b3e0:	4644      	mov	r4, r8
 800b3e2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b3e6:	3501      	adds	r5, #1
 800b3e8:	615f      	str	r7, [r3, #20]
 800b3ea:	6125      	str	r5, [r4, #16]
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b3f2 <__hi0bits>:
 800b3f2:	0c02      	lsrs	r2, r0, #16
 800b3f4:	0412      	lsls	r2, r2, #16
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	b9b2      	cbnz	r2, 800b428 <__hi0bits+0x36>
 800b3fa:	0403      	lsls	r3, r0, #16
 800b3fc:	2010      	movs	r0, #16
 800b3fe:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b402:	bf04      	itt	eq
 800b404:	021b      	lsleq	r3, r3, #8
 800b406:	3008      	addeq	r0, #8
 800b408:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b40c:	bf04      	itt	eq
 800b40e:	011b      	lsleq	r3, r3, #4
 800b410:	3004      	addeq	r0, #4
 800b412:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b416:	bf04      	itt	eq
 800b418:	009b      	lsleq	r3, r3, #2
 800b41a:	3002      	addeq	r0, #2
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	db06      	blt.n	800b42e <__hi0bits+0x3c>
 800b420:	005b      	lsls	r3, r3, #1
 800b422:	d503      	bpl.n	800b42c <__hi0bits+0x3a>
 800b424:	3001      	adds	r0, #1
 800b426:	4770      	bx	lr
 800b428:	2000      	movs	r0, #0
 800b42a:	e7e8      	b.n	800b3fe <__hi0bits+0xc>
 800b42c:	2020      	movs	r0, #32
 800b42e:	4770      	bx	lr

0800b430 <__lo0bits>:
 800b430:	6803      	ldr	r3, [r0, #0]
 800b432:	4601      	mov	r1, r0
 800b434:	f013 0207 	ands.w	r2, r3, #7
 800b438:	d00b      	beq.n	800b452 <__lo0bits+0x22>
 800b43a:	07da      	lsls	r2, r3, #31
 800b43c:	d423      	bmi.n	800b486 <__lo0bits+0x56>
 800b43e:	0798      	lsls	r0, r3, #30
 800b440:	bf49      	itett	mi
 800b442:	085b      	lsrmi	r3, r3, #1
 800b444:	089b      	lsrpl	r3, r3, #2
 800b446:	2001      	movmi	r0, #1
 800b448:	600b      	strmi	r3, [r1, #0]
 800b44a:	bf5c      	itt	pl
 800b44c:	600b      	strpl	r3, [r1, #0]
 800b44e:	2002      	movpl	r0, #2
 800b450:	4770      	bx	lr
 800b452:	b298      	uxth	r0, r3
 800b454:	b9a8      	cbnz	r0, 800b482 <__lo0bits+0x52>
 800b456:	2010      	movs	r0, #16
 800b458:	0c1b      	lsrs	r3, r3, #16
 800b45a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b45e:	bf04      	itt	eq
 800b460:	0a1b      	lsreq	r3, r3, #8
 800b462:	3008      	addeq	r0, #8
 800b464:	071a      	lsls	r2, r3, #28
 800b466:	bf04      	itt	eq
 800b468:	091b      	lsreq	r3, r3, #4
 800b46a:	3004      	addeq	r0, #4
 800b46c:	079a      	lsls	r2, r3, #30
 800b46e:	bf04      	itt	eq
 800b470:	089b      	lsreq	r3, r3, #2
 800b472:	3002      	addeq	r0, #2
 800b474:	07da      	lsls	r2, r3, #31
 800b476:	d402      	bmi.n	800b47e <__lo0bits+0x4e>
 800b478:	085b      	lsrs	r3, r3, #1
 800b47a:	d006      	beq.n	800b48a <__lo0bits+0x5a>
 800b47c:	3001      	adds	r0, #1
 800b47e:	600b      	str	r3, [r1, #0]
 800b480:	4770      	bx	lr
 800b482:	4610      	mov	r0, r2
 800b484:	e7e9      	b.n	800b45a <__lo0bits+0x2a>
 800b486:	2000      	movs	r0, #0
 800b488:	4770      	bx	lr
 800b48a:	2020      	movs	r0, #32
 800b48c:	4770      	bx	lr

0800b48e <__i2b>:
 800b48e:	b510      	push	{r4, lr}
 800b490:	460c      	mov	r4, r1
 800b492:	2101      	movs	r1, #1
 800b494:	f7ff ff27 	bl	800b2e6 <_Balloc>
 800b498:	2201      	movs	r2, #1
 800b49a:	6144      	str	r4, [r0, #20]
 800b49c:	6102      	str	r2, [r0, #16]
 800b49e:	bd10      	pop	{r4, pc}

0800b4a0 <__multiply>:
 800b4a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4a4:	4614      	mov	r4, r2
 800b4a6:	690a      	ldr	r2, [r1, #16]
 800b4a8:	6923      	ldr	r3, [r4, #16]
 800b4aa:	4688      	mov	r8, r1
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	bfbe      	ittt	lt
 800b4b0:	460b      	movlt	r3, r1
 800b4b2:	46a0      	movlt	r8, r4
 800b4b4:	461c      	movlt	r4, r3
 800b4b6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b4ba:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b4be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b4c2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b4c6:	eb07 0609 	add.w	r6, r7, r9
 800b4ca:	42b3      	cmp	r3, r6
 800b4cc:	bfb8      	it	lt
 800b4ce:	3101      	addlt	r1, #1
 800b4d0:	f7ff ff09 	bl	800b2e6 <_Balloc>
 800b4d4:	f100 0514 	add.w	r5, r0, #20
 800b4d8:	462b      	mov	r3, r5
 800b4da:	2200      	movs	r2, #0
 800b4dc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b4e0:	4573      	cmp	r3, lr
 800b4e2:	d316      	bcc.n	800b512 <__multiply+0x72>
 800b4e4:	f104 0214 	add.w	r2, r4, #20
 800b4e8:	f108 0114 	add.w	r1, r8, #20
 800b4ec:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b4f0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b4f4:	9300      	str	r3, [sp, #0]
 800b4f6:	9b00      	ldr	r3, [sp, #0]
 800b4f8:	9201      	str	r2, [sp, #4]
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d80c      	bhi.n	800b518 <__multiply+0x78>
 800b4fe:	2e00      	cmp	r6, #0
 800b500:	dd03      	ble.n	800b50a <__multiply+0x6a>
 800b502:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b506:	2b00      	cmp	r3, #0
 800b508:	d05d      	beq.n	800b5c6 <__multiply+0x126>
 800b50a:	6106      	str	r6, [r0, #16]
 800b50c:	b003      	add	sp, #12
 800b50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b512:	f843 2b04 	str.w	r2, [r3], #4
 800b516:	e7e3      	b.n	800b4e0 <__multiply+0x40>
 800b518:	f8b2 b000 	ldrh.w	fp, [r2]
 800b51c:	f1bb 0f00 	cmp.w	fp, #0
 800b520:	d023      	beq.n	800b56a <__multiply+0xca>
 800b522:	4689      	mov	r9, r1
 800b524:	46ac      	mov	ip, r5
 800b526:	f04f 0800 	mov.w	r8, #0
 800b52a:	f859 4b04 	ldr.w	r4, [r9], #4
 800b52e:	f8dc a000 	ldr.w	sl, [ip]
 800b532:	b2a3      	uxth	r3, r4
 800b534:	fa1f fa8a 	uxth.w	sl, sl
 800b538:	fb0b a303 	mla	r3, fp, r3, sl
 800b53c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b540:	f8dc 4000 	ldr.w	r4, [ip]
 800b544:	4443      	add	r3, r8
 800b546:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b54a:	fb0b 840a 	mla	r4, fp, sl, r8
 800b54e:	46e2      	mov	sl, ip
 800b550:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b554:	b29b      	uxth	r3, r3
 800b556:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b55a:	454f      	cmp	r7, r9
 800b55c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b560:	f84a 3b04 	str.w	r3, [sl], #4
 800b564:	d82b      	bhi.n	800b5be <__multiply+0x11e>
 800b566:	f8cc 8004 	str.w	r8, [ip, #4]
 800b56a:	9b01      	ldr	r3, [sp, #4]
 800b56c:	3204      	adds	r2, #4
 800b56e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b572:	f1ba 0f00 	cmp.w	sl, #0
 800b576:	d020      	beq.n	800b5ba <__multiply+0x11a>
 800b578:	4689      	mov	r9, r1
 800b57a:	46a8      	mov	r8, r5
 800b57c:	f04f 0b00 	mov.w	fp, #0
 800b580:	682b      	ldr	r3, [r5, #0]
 800b582:	f8b9 c000 	ldrh.w	ip, [r9]
 800b586:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	fb0a 440c 	mla	r4, sl, ip, r4
 800b590:	46c4      	mov	ip, r8
 800b592:	445c      	add	r4, fp
 800b594:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b598:	f84c 3b04 	str.w	r3, [ip], #4
 800b59c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b5a0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b5a4:	0c1b      	lsrs	r3, r3, #16
 800b5a6:	fb0a b303 	mla	r3, sl, r3, fp
 800b5aa:	454f      	cmp	r7, r9
 800b5ac:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b5b0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b5b4:	d805      	bhi.n	800b5c2 <__multiply+0x122>
 800b5b6:	f8c8 3004 	str.w	r3, [r8, #4]
 800b5ba:	3504      	adds	r5, #4
 800b5bc:	e79b      	b.n	800b4f6 <__multiply+0x56>
 800b5be:	46d4      	mov	ip, sl
 800b5c0:	e7b3      	b.n	800b52a <__multiply+0x8a>
 800b5c2:	46e0      	mov	r8, ip
 800b5c4:	e7dd      	b.n	800b582 <__multiply+0xe2>
 800b5c6:	3e01      	subs	r6, #1
 800b5c8:	e799      	b.n	800b4fe <__multiply+0x5e>
	...

0800b5cc <__pow5mult>:
 800b5cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5d0:	4615      	mov	r5, r2
 800b5d2:	f012 0203 	ands.w	r2, r2, #3
 800b5d6:	4606      	mov	r6, r0
 800b5d8:	460f      	mov	r7, r1
 800b5da:	d007      	beq.n	800b5ec <__pow5mult+0x20>
 800b5dc:	4c21      	ldr	r4, [pc, #132]	; (800b664 <__pow5mult+0x98>)
 800b5de:	3a01      	subs	r2, #1
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b5e6:	f7ff fec9 	bl	800b37c <__multadd>
 800b5ea:	4607      	mov	r7, r0
 800b5ec:	10ad      	asrs	r5, r5, #2
 800b5ee:	d035      	beq.n	800b65c <__pow5mult+0x90>
 800b5f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b5f2:	b93c      	cbnz	r4, 800b604 <__pow5mult+0x38>
 800b5f4:	2010      	movs	r0, #16
 800b5f6:	f7ff fe55 	bl	800b2a4 <malloc>
 800b5fa:	6270      	str	r0, [r6, #36]	; 0x24
 800b5fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b600:	6004      	str	r4, [r0, #0]
 800b602:	60c4      	str	r4, [r0, #12]
 800b604:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b608:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b60c:	b94c      	cbnz	r4, 800b622 <__pow5mult+0x56>
 800b60e:	f240 2171 	movw	r1, #625	; 0x271
 800b612:	4630      	mov	r0, r6
 800b614:	f7ff ff3b 	bl	800b48e <__i2b>
 800b618:	2300      	movs	r3, #0
 800b61a:	4604      	mov	r4, r0
 800b61c:	f8c8 0008 	str.w	r0, [r8, #8]
 800b620:	6003      	str	r3, [r0, #0]
 800b622:	f04f 0800 	mov.w	r8, #0
 800b626:	07eb      	lsls	r3, r5, #31
 800b628:	d50a      	bpl.n	800b640 <__pow5mult+0x74>
 800b62a:	4639      	mov	r1, r7
 800b62c:	4622      	mov	r2, r4
 800b62e:	4630      	mov	r0, r6
 800b630:	f7ff ff36 	bl	800b4a0 <__multiply>
 800b634:	4681      	mov	r9, r0
 800b636:	4639      	mov	r1, r7
 800b638:	4630      	mov	r0, r6
 800b63a:	f7ff fe88 	bl	800b34e <_Bfree>
 800b63e:	464f      	mov	r7, r9
 800b640:	106d      	asrs	r5, r5, #1
 800b642:	d00b      	beq.n	800b65c <__pow5mult+0x90>
 800b644:	6820      	ldr	r0, [r4, #0]
 800b646:	b938      	cbnz	r0, 800b658 <__pow5mult+0x8c>
 800b648:	4622      	mov	r2, r4
 800b64a:	4621      	mov	r1, r4
 800b64c:	4630      	mov	r0, r6
 800b64e:	f7ff ff27 	bl	800b4a0 <__multiply>
 800b652:	6020      	str	r0, [r4, #0]
 800b654:	f8c0 8000 	str.w	r8, [r0]
 800b658:	4604      	mov	r4, r0
 800b65a:	e7e4      	b.n	800b626 <__pow5mult+0x5a>
 800b65c:	4638      	mov	r0, r7
 800b65e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b662:	bf00      	nop
 800b664:	0800d700 	.word	0x0800d700

0800b668 <__lshift>:
 800b668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b66c:	460c      	mov	r4, r1
 800b66e:	4607      	mov	r7, r0
 800b670:	4616      	mov	r6, r2
 800b672:	6923      	ldr	r3, [r4, #16]
 800b674:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b678:	eb0a 0903 	add.w	r9, sl, r3
 800b67c:	6849      	ldr	r1, [r1, #4]
 800b67e:	68a3      	ldr	r3, [r4, #8]
 800b680:	f109 0501 	add.w	r5, r9, #1
 800b684:	42ab      	cmp	r3, r5
 800b686:	db32      	blt.n	800b6ee <__lshift+0x86>
 800b688:	4638      	mov	r0, r7
 800b68a:	f7ff fe2c 	bl	800b2e6 <_Balloc>
 800b68e:	2300      	movs	r3, #0
 800b690:	4680      	mov	r8, r0
 800b692:	461a      	mov	r2, r3
 800b694:	f100 0114 	add.w	r1, r0, #20
 800b698:	4553      	cmp	r3, sl
 800b69a:	db2b      	blt.n	800b6f4 <__lshift+0x8c>
 800b69c:	6920      	ldr	r0, [r4, #16]
 800b69e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b6a2:	f104 0314 	add.w	r3, r4, #20
 800b6a6:	f016 021f 	ands.w	r2, r6, #31
 800b6aa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b6ae:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b6b2:	d025      	beq.n	800b700 <__lshift+0x98>
 800b6b4:	2000      	movs	r0, #0
 800b6b6:	f1c2 0e20 	rsb	lr, r2, #32
 800b6ba:	468a      	mov	sl, r1
 800b6bc:	681e      	ldr	r6, [r3, #0]
 800b6be:	4096      	lsls	r6, r2
 800b6c0:	4330      	orrs	r0, r6
 800b6c2:	f84a 0b04 	str.w	r0, [sl], #4
 800b6c6:	f853 0b04 	ldr.w	r0, [r3], #4
 800b6ca:	459c      	cmp	ip, r3
 800b6cc:	fa20 f00e 	lsr.w	r0, r0, lr
 800b6d0:	d814      	bhi.n	800b6fc <__lshift+0x94>
 800b6d2:	6048      	str	r0, [r1, #4]
 800b6d4:	b108      	cbz	r0, 800b6da <__lshift+0x72>
 800b6d6:	f109 0502 	add.w	r5, r9, #2
 800b6da:	3d01      	subs	r5, #1
 800b6dc:	4638      	mov	r0, r7
 800b6de:	f8c8 5010 	str.w	r5, [r8, #16]
 800b6e2:	4621      	mov	r1, r4
 800b6e4:	f7ff fe33 	bl	800b34e <_Bfree>
 800b6e8:	4640      	mov	r0, r8
 800b6ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6ee:	3101      	adds	r1, #1
 800b6f0:	005b      	lsls	r3, r3, #1
 800b6f2:	e7c7      	b.n	800b684 <__lshift+0x1c>
 800b6f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	e7cd      	b.n	800b698 <__lshift+0x30>
 800b6fc:	4651      	mov	r1, sl
 800b6fe:	e7dc      	b.n	800b6ba <__lshift+0x52>
 800b700:	3904      	subs	r1, #4
 800b702:	f853 2b04 	ldr.w	r2, [r3], #4
 800b706:	459c      	cmp	ip, r3
 800b708:	f841 2f04 	str.w	r2, [r1, #4]!
 800b70c:	d8f9      	bhi.n	800b702 <__lshift+0x9a>
 800b70e:	e7e4      	b.n	800b6da <__lshift+0x72>

0800b710 <__mcmp>:
 800b710:	6903      	ldr	r3, [r0, #16]
 800b712:	690a      	ldr	r2, [r1, #16]
 800b714:	b530      	push	{r4, r5, lr}
 800b716:	1a9b      	subs	r3, r3, r2
 800b718:	d10c      	bne.n	800b734 <__mcmp+0x24>
 800b71a:	0092      	lsls	r2, r2, #2
 800b71c:	3014      	adds	r0, #20
 800b71e:	3114      	adds	r1, #20
 800b720:	1884      	adds	r4, r0, r2
 800b722:	4411      	add	r1, r2
 800b724:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b728:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b72c:	4295      	cmp	r5, r2
 800b72e:	d003      	beq.n	800b738 <__mcmp+0x28>
 800b730:	d305      	bcc.n	800b73e <__mcmp+0x2e>
 800b732:	2301      	movs	r3, #1
 800b734:	4618      	mov	r0, r3
 800b736:	bd30      	pop	{r4, r5, pc}
 800b738:	42a0      	cmp	r0, r4
 800b73a:	d3f3      	bcc.n	800b724 <__mcmp+0x14>
 800b73c:	e7fa      	b.n	800b734 <__mcmp+0x24>
 800b73e:	f04f 33ff 	mov.w	r3, #4294967295
 800b742:	e7f7      	b.n	800b734 <__mcmp+0x24>

0800b744 <__mdiff>:
 800b744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b748:	460d      	mov	r5, r1
 800b74a:	4607      	mov	r7, r0
 800b74c:	4611      	mov	r1, r2
 800b74e:	4628      	mov	r0, r5
 800b750:	4614      	mov	r4, r2
 800b752:	f7ff ffdd 	bl	800b710 <__mcmp>
 800b756:	1e06      	subs	r6, r0, #0
 800b758:	d108      	bne.n	800b76c <__mdiff+0x28>
 800b75a:	4631      	mov	r1, r6
 800b75c:	4638      	mov	r0, r7
 800b75e:	f7ff fdc2 	bl	800b2e6 <_Balloc>
 800b762:	2301      	movs	r3, #1
 800b764:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b76c:	bfa4      	itt	ge
 800b76e:	4623      	movge	r3, r4
 800b770:	462c      	movge	r4, r5
 800b772:	4638      	mov	r0, r7
 800b774:	6861      	ldr	r1, [r4, #4]
 800b776:	bfa6      	itte	ge
 800b778:	461d      	movge	r5, r3
 800b77a:	2600      	movge	r6, #0
 800b77c:	2601      	movlt	r6, #1
 800b77e:	f7ff fdb2 	bl	800b2e6 <_Balloc>
 800b782:	f04f 0e00 	mov.w	lr, #0
 800b786:	60c6      	str	r6, [r0, #12]
 800b788:	692b      	ldr	r3, [r5, #16]
 800b78a:	6926      	ldr	r6, [r4, #16]
 800b78c:	f104 0214 	add.w	r2, r4, #20
 800b790:	f105 0914 	add.w	r9, r5, #20
 800b794:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b798:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b79c:	f100 0114 	add.w	r1, r0, #20
 800b7a0:	f852 ab04 	ldr.w	sl, [r2], #4
 800b7a4:	f859 5b04 	ldr.w	r5, [r9], #4
 800b7a8:	fa1f f38a 	uxth.w	r3, sl
 800b7ac:	4473      	add	r3, lr
 800b7ae:	b2ac      	uxth	r4, r5
 800b7b0:	1b1b      	subs	r3, r3, r4
 800b7b2:	0c2c      	lsrs	r4, r5, #16
 800b7b4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800b7b8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800b7c2:	45c8      	cmp	r8, r9
 800b7c4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800b7c8:	4694      	mov	ip, r2
 800b7ca:	f841 4b04 	str.w	r4, [r1], #4
 800b7ce:	d8e7      	bhi.n	800b7a0 <__mdiff+0x5c>
 800b7d0:	45bc      	cmp	ip, r7
 800b7d2:	d304      	bcc.n	800b7de <__mdiff+0x9a>
 800b7d4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b7d8:	b183      	cbz	r3, 800b7fc <__mdiff+0xb8>
 800b7da:	6106      	str	r6, [r0, #16]
 800b7dc:	e7c4      	b.n	800b768 <__mdiff+0x24>
 800b7de:	f85c 4b04 	ldr.w	r4, [ip], #4
 800b7e2:	b2a2      	uxth	r2, r4
 800b7e4:	4472      	add	r2, lr
 800b7e6:	1413      	asrs	r3, r2, #16
 800b7e8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b7ec:	b292      	uxth	r2, r2
 800b7ee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b7f2:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b7f6:	f841 2b04 	str.w	r2, [r1], #4
 800b7fa:	e7e9      	b.n	800b7d0 <__mdiff+0x8c>
 800b7fc:	3e01      	subs	r6, #1
 800b7fe:	e7e9      	b.n	800b7d4 <__mdiff+0x90>

0800b800 <__d2b>:
 800b800:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b804:	461c      	mov	r4, r3
 800b806:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800b80a:	2101      	movs	r1, #1
 800b80c:	4690      	mov	r8, r2
 800b80e:	f7ff fd6a 	bl	800b2e6 <_Balloc>
 800b812:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800b816:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800b81a:	4607      	mov	r7, r0
 800b81c:	bb34      	cbnz	r4, 800b86c <__d2b+0x6c>
 800b81e:	9201      	str	r2, [sp, #4]
 800b820:	f1b8 0200 	subs.w	r2, r8, #0
 800b824:	d027      	beq.n	800b876 <__d2b+0x76>
 800b826:	a802      	add	r0, sp, #8
 800b828:	f840 2d08 	str.w	r2, [r0, #-8]!
 800b82c:	f7ff fe00 	bl	800b430 <__lo0bits>
 800b830:	9900      	ldr	r1, [sp, #0]
 800b832:	b1f0      	cbz	r0, 800b872 <__d2b+0x72>
 800b834:	9a01      	ldr	r2, [sp, #4]
 800b836:	f1c0 0320 	rsb	r3, r0, #32
 800b83a:	fa02 f303 	lsl.w	r3, r2, r3
 800b83e:	430b      	orrs	r3, r1
 800b840:	40c2      	lsrs	r2, r0
 800b842:	617b      	str	r3, [r7, #20]
 800b844:	9201      	str	r2, [sp, #4]
 800b846:	9b01      	ldr	r3, [sp, #4]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	bf14      	ite	ne
 800b84c:	2102      	movne	r1, #2
 800b84e:	2101      	moveq	r1, #1
 800b850:	61bb      	str	r3, [r7, #24]
 800b852:	6139      	str	r1, [r7, #16]
 800b854:	b1c4      	cbz	r4, 800b888 <__d2b+0x88>
 800b856:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b85a:	4404      	add	r4, r0
 800b85c:	6034      	str	r4, [r6, #0]
 800b85e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b862:	6028      	str	r0, [r5, #0]
 800b864:	4638      	mov	r0, r7
 800b866:	b002      	add	sp, #8
 800b868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b86c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b870:	e7d5      	b.n	800b81e <__d2b+0x1e>
 800b872:	6179      	str	r1, [r7, #20]
 800b874:	e7e7      	b.n	800b846 <__d2b+0x46>
 800b876:	a801      	add	r0, sp, #4
 800b878:	f7ff fdda 	bl	800b430 <__lo0bits>
 800b87c:	2101      	movs	r1, #1
 800b87e:	9b01      	ldr	r3, [sp, #4]
 800b880:	6139      	str	r1, [r7, #16]
 800b882:	617b      	str	r3, [r7, #20]
 800b884:	3020      	adds	r0, #32
 800b886:	e7e5      	b.n	800b854 <__d2b+0x54>
 800b888:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b88c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b890:	6030      	str	r0, [r6, #0]
 800b892:	6918      	ldr	r0, [r3, #16]
 800b894:	f7ff fdad 	bl	800b3f2 <__hi0bits>
 800b898:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b89c:	e7e1      	b.n	800b862 <__d2b+0x62>

0800b89e <_calloc_r>:
 800b89e:	b538      	push	{r3, r4, r5, lr}
 800b8a0:	fb02 f401 	mul.w	r4, r2, r1
 800b8a4:	4621      	mov	r1, r4
 800b8a6:	f000 f855 	bl	800b954 <_malloc_r>
 800b8aa:	4605      	mov	r5, r0
 800b8ac:	b118      	cbz	r0, 800b8b6 <_calloc_r+0x18>
 800b8ae:	4622      	mov	r2, r4
 800b8b0:	2100      	movs	r1, #0
 800b8b2:	f7fe fa2f 	bl	8009d14 <memset>
 800b8b6:	4628      	mov	r0, r5
 800b8b8:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b8bc <_free_r>:
 800b8bc:	b538      	push	{r3, r4, r5, lr}
 800b8be:	4605      	mov	r5, r0
 800b8c0:	2900      	cmp	r1, #0
 800b8c2:	d043      	beq.n	800b94c <_free_r+0x90>
 800b8c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8c8:	1f0c      	subs	r4, r1, #4
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	bfb8      	it	lt
 800b8ce:	18e4      	addlt	r4, r4, r3
 800b8d0:	f000 fa27 	bl	800bd22 <__malloc_lock>
 800b8d4:	4a1e      	ldr	r2, [pc, #120]	; (800b950 <_free_r+0x94>)
 800b8d6:	6813      	ldr	r3, [r2, #0]
 800b8d8:	4610      	mov	r0, r2
 800b8da:	b933      	cbnz	r3, 800b8ea <_free_r+0x2e>
 800b8dc:	6063      	str	r3, [r4, #4]
 800b8de:	6014      	str	r4, [r2, #0]
 800b8e0:	4628      	mov	r0, r5
 800b8e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8e6:	f000 ba1d 	b.w	800bd24 <__malloc_unlock>
 800b8ea:	42a3      	cmp	r3, r4
 800b8ec:	d90b      	bls.n	800b906 <_free_r+0x4a>
 800b8ee:	6821      	ldr	r1, [r4, #0]
 800b8f0:	1862      	adds	r2, r4, r1
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	bf01      	itttt	eq
 800b8f6:	681a      	ldreq	r2, [r3, #0]
 800b8f8:	685b      	ldreq	r3, [r3, #4]
 800b8fa:	1852      	addeq	r2, r2, r1
 800b8fc:	6022      	streq	r2, [r4, #0]
 800b8fe:	6063      	str	r3, [r4, #4]
 800b900:	6004      	str	r4, [r0, #0]
 800b902:	e7ed      	b.n	800b8e0 <_free_r+0x24>
 800b904:	4613      	mov	r3, r2
 800b906:	685a      	ldr	r2, [r3, #4]
 800b908:	b10a      	cbz	r2, 800b90e <_free_r+0x52>
 800b90a:	42a2      	cmp	r2, r4
 800b90c:	d9fa      	bls.n	800b904 <_free_r+0x48>
 800b90e:	6819      	ldr	r1, [r3, #0]
 800b910:	1858      	adds	r0, r3, r1
 800b912:	42a0      	cmp	r0, r4
 800b914:	d10b      	bne.n	800b92e <_free_r+0x72>
 800b916:	6820      	ldr	r0, [r4, #0]
 800b918:	4401      	add	r1, r0
 800b91a:	1858      	adds	r0, r3, r1
 800b91c:	4282      	cmp	r2, r0
 800b91e:	6019      	str	r1, [r3, #0]
 800b920:	d1de      	bne.n	800b8e0 <_free_r+0x24>
 800b922:	6810      	ldr	r0, [r2, #0]
 800b924:	6852      	ldr	r2, [r2, #4]
 800b926:	4401      	add	r1, r0
 800b928:	6019      	str	r1, [r3, #0]
 800b92a:	605a      	str	r2, [r3, #4]
 800b92c:	e7d8      	b.n	800b8e0 <_free_r+0x24>
 800b92e:	d902      	bls.n	800b936 <_free_r+0x7a>
 800b930:	230c      	movs	r3, #12
 800b932:	602b      	str	r3, [r5, #0]
 800b934:	e7d4      	b.n	800b8e0 <_free_r+0x24>
 800b936:	6820      	ldr	r0, [r4, #0]
 800b938:	1821      	adds	r1, r4, r0
 800b93a:	428a      	cmp	r2, r1
 800b93c:	bf01      	itttt	eq
 800b93e:	6811      	ldreq	r1, [r2, #0]
 800b940:	6852      	ldreq	r2, [r2, #4]
 800b942:	1809      	addeq	r1, r1, r0
 800b944:	6021      	streq	r1, [r4, #0]
 800b946:	6062      	str	r2, [r4, #4]
 800b948:	605c      	str	r4, [r3, #4]
 800b94a:	e7c9      	b.n	800b8e0 <_free_r+0x24>
 800b94c:	bd38      	pop	{r3, r4, r5, pc}
 800b94e:	bf00      	nop
 800b950:	20005a80 	.word	0x20005a80

0800b954 <_malloc_r>:
 800b954:	b570      	push	{r4, r5, r6, lr}
 800b956:	1ccd      	adds	r5, r1, #3
 800b958:	f025 0503 	bic.w	r5, r5, #3
 800b95c:	3508      	adds	r5, #8
 800b95e:	2d0c      	cmp	r5, #12
 800b960:	bf38      	it	cc
 800b962:	250c      	movcc	r5, #12
 800b964:	2d00      	cmp	r5, #0
 800b966:	4606      	mov	r6, r0
 800b968:	db01      	blt.n	800b96e <_malloc_r+0x1a>
 800b96a:	42a9      	cmp	r1, r5
 800b96c:	d903      	bls.n	800b976 <_malloc_r+0x22>
 800b96e:	230c      	movs	r3, #12
 800b970:	6033      	str	r3, [r6, #0]
 800b972:	2000      	movs	r0, #0
 800b974:	bd70      	pop	{r4, r5, r6, pc}
 800b976:	f000 f9d4 	bl	800bd22 <__malloc_lock>
 800b97a:	4a21      	ldr	r2, [pc, #132]	; (800ba00 <_malloc_r+0xac>)
 800b97c:	6814      	ldr	r4, [r2, #0]
 800b97e:	4621      	mov	r1, r4
 800b980:	b991      	cbnz	r1, 800b9a8 <_malloc_r+0x54>
 800b982:	4c20      	ldr	r4, [pc, #128]	; (800ba04 <_malloc_r+0xb0>)
 800b984:	6823      	ldr	r3, [r4, #0]
 800b986:	b91b      	cbnz	r3, 800b990 <_malloc_r+0x3c>
 800b988:	4630      	mov	r0, r6
 800b98a:	f000 f98f 	bl	800bcac <_sbrk_r>
 800b98e:	6020      	str	r0, [r4, #0]
 800b990:	4629      	mov	r1, r5
 800b992:	4630      	mov	r0, r6
 800b994:	f000 f98a 	bl	800bcac <_sbrk_r>
 800b998:	1c43      	adds	r3, r0, #1
 800b99a:	d124      	bne.n	800b9e6 <_malloc_r+0x92>
 800b99c:	230c      	movs	r3, #12
 800b99e:	4630      	mov	r0, r6
 800b9a0:	6033      	str	r3, [r6, #0]
 800b9a2:	f000 f9bf 	bl	800bd24 <__malloc_unlock>
 800b9a6:	e7e4      	b.n	800b972 <_malloc_r+0x1e>
 800b9a8:	680b      	ldr	r3, [r1, #0]
 800b9aa:	1b5b      	subs	r3, r3, r5
 800b9ac:	d418      	bmi.n	800b9e0 <_malloc_r+0x8c>
 800b9ae:	2b0b      	cmp	r3, #11
 800b9b0:	d90f      	bls.n	800b9d2 <_malloc_r+0x7e>
 800b9b2:	600b      	str	r3, [r1, #0]
 800b9b4:	18cc      	adds	r4, r1, r3
 800b9b6:	50cd      	str	r5, [r1, r3]
 800b9b8:	4630      	mov	r0, r6
 800b9ba:	f000 f9b3 	bl	800bd24 <__malloc_unlock>
 800b9be:	f104 000b 	add.w	r0, r4, #11
 800b9c2:	1d23      	adds	r3, r4, #4
 800b9c4:	f020 0007 	bic.w	r0, r0, #7
 800b9c8:	1ac3      	subs	r3, r0, r3
 800b9ca:	d0d3      	beq.n	800b974 <_malloc_r+0x20>
 800b9cc:	425a      	negs	r2, r3
 800b9ce:	50e2      	str	r2, [r4, r3]
 800b9d0:	e7d0      	b.n	800b974 <_malloc_r+0x20>
 800b9d2:	684b      	ldr	r3, [r1, #4]
 800b9d4:	428c      	cmp	r4, r1
 800b9d6:	bf16      	itet	ne
 800b9d8:	6063      	strne	r3, [r4, #4]
 800b9da:	6013      	streq	r3, [r2, #0]
 800b9dc:	460c      	movne	r4, r1
 800b9de:	e7eb      	b.n	800b9b8 <_malloc_r+0x64>
 800b9e0:	460c      	mov	r4, r1
 800b9e2:	6849      	ldr	r1, [r1, #4]
 800b9e4:	e7cc      	b.n	800b980 <_malloc_r+0x2c>
 800b9e6:	1cc4      	adds	r4, r0, #3
 800b9e8:	f024 0403 	bic.w	r4, r4, #3
 800b9ec:	42a0      	cmp	r0, r4
 800b9ee:	d005      	beq.n	800b9fc <_malloc_r+0xa8>
 800b9f0:	1a21      	subs	r1, r4, r0
 800b9f2:	4630      	mov	r0, r6
 800b9f4:	f000 f95a 	bl	800bcac <_sbrk_r>
 800b9f8:	3001      	adds	r0, #1
 800b9fa:	d0cf      	beq.n	800b99c <_malloc_r+0x48>
 800b9fc:	6025      	str	r5, [r4, #0]
 800b9fe:	e7db      	b.n	800b9b8 <_malloc_r+0x64>
 800ba00:	20005a80 	.word	0x20005a80
 800ba04:	20005a84 	.word	0x20005a84

0800ba08 <__ssputs_r>:
 800ba08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba0c:	688e      	ldr	r6, [r1, #8]
 800ba0e:	4682      	mov	sl, r0
 800ba10:	429e      	cmp	r6, r3
 800ba12:	460c      	mov	r4, r1
 800ba14:	4690      	mov	r8, r2
 800ba16:	4699      	mov	r9, r3
 800ba18:	d837      	bhi.n	800ba8a <__ssputs_r+0x82>
 800ba1a:	898a      	ldrh	r2, [r1, #12]
 800ba1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ba20:	d031      	beq.n	800ba86 <__ssputs_r+0x7e>
 800ba22:	2302      	movs	r3, #2
 800ba24:	6825      	ldr	r5, [r4, #0]
 800ba26:	6909      	ldr	r1, [r1, #16]
 800ba28:	1a6f      	subs	r7, r5, r1
 800ba2a:	6965      	ldr	r5, [r4, #20]
 800ba2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba30:	fb95 f5f3 	sdiv	r5, r5, r3
 800ba34:	f109 0301 	add.w	r3, r9, #1
 800ba38:	443b      	add	r3, r7
 800ba3a:	429d      	cmp	r5, r3
 800ba3c:	bf38      	it	cc
 800ba3e:	461d      	movcc	r5, r3
 800ba40:	0553      	lsls	r3, r2, #21
 800ba42:	d530      	bpl.n	800baa6 <__ssputs_r+0x9e>
 800ba44:	4629      	mov	r1, r5
 800ba46:	f7ff ff85 	bl	800b954 <_malloc_r>
 800ba4a:	4606      	mov	r6, r0
 800ba4c:	b950      	cbnz	r0, 800ba64 <__ssputs_r+0x5c>
 800ba4e:	230c      	movs	r3, #12
 800ba50:	f04f 30ff 	mov.w	r0, #4294967295
 800ba54:	f8ca 3000 	str.w	r3, [sl]
 800ba58:	89a3      	ldrh	r3, [r4, #12]
 800ba5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba5e:	81a3      	strh	r3, [r4, #12]
 800ba60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba64:	463a      	mov	r2, r7
 800ba66:	6921      	ldr	r1, [r4, #16]
 800ba68:	f7ff fc32 	bl	800b2d0 <memcpy>
 800ba6c:	89a3      	ldrh	r3, [r4, #12]
 800ba6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ba72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba76:	81a3      	strh	r3, [r4, #12]
 800ba78:	6126      	str	r6, [r4, #16]
 800ba7a:	443e      	add	r6, r7
 800ba7c:	6026      	str	r6, [r4, #0]
 800ba7e:	464e      	mov	r6, r9
 800ba80:	6165      	str	r5, [r4, #20]
 800ba82:	1bed      	subs	r5, r5, r7
 800ba84:	60a5      	str	r5, [r4, #8]
 800ba86:	454e      	cmp	r6, r9
 800ba88:	d900      	bls.n	800ba8c <__ssputs_r+0x84>
 800ba8a:	464e      	mov	r6, r9
 800ba8c:	4632      	mov	r2, r6
 800ba8e:	4641      	mov	r1, r8
 800ba90:	6820      	ldr	r0, [r4, #0]
 800ba92:	f000 f92d 	bl	800bcf0 <memmove>
 800ba96:	68a3      	ldr	r3, [r4, #8]
 800ba98:	2000      	movs	r0, #0
 800ba9a:	1b9b      	subs	r3, r3, r6
 800ba9c:	60a3      	str	r3, [r4, #8]
 800ba9e:	6823      	ldr	r3, [r4, #0]
 800baa0:	441e      	add	r6, r3
 800baa2:	6026      	str	r6, [r4, #0]
 800baa4:	e7dc      	b.n	800ba60 <__ssputs_r+0x58>
 800baa6:	462a      	mov	r2, r5
 800baa8:	f000 f93d 	bl	800bd26 <_realloc_r>
 800baac:	4606      	mov	r6, r0
 800baae:	2800      	cmp	r0, #0
 800bab0:	d1e2      	bne.n	800ba78 <__ssputs_r+0x70>
 800bab2:	6921      	ldr	r1, [r4, #16]
 800bab4:	4650      	mov	r0, sl
 800bab6:	f7ff ff01 	bl	800b8bc <_free_r>
 800baba:	e7c8      	b.n	800ba4e <__ssputs_r+0x46>

0800babc <_svfiprintf_r>:
 800babc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bac0:	461d      	mov	r5, r3
 800bac2:	898b      	ldrh	r3, [r1, #12]
 800bac4:	b09d      	sub	sp, #116	; 0x74
 800bac6:	061f      	lsls	r7, r3, #24
 800bac8:	4680      	mov	r8, r0
 800baca:	460c      	mov	r4, r1
 800bacc:	4616      	mov	r6, r2
 800bace:	d50f      	bpl.n	800baf0 <_svfiprintf_r+0x34>
 800bad0:	690b      	ldr	r3, [r1, #16]
 800bad2:	b96b      	cbnz	r3, 800baf0 <_svfiprintf_r+0x34>
 800bad4:	2140      	movs	r1, #64	; 0x40
 800bad6:	f7ff ff3d 	bl	800b954 <_malloc_r>
 800bada:	6020      	str	r0, [r4, #0]
 800badc:	6120      	str	r0, [r4, #16]
 800bade:	b928      	cbnz	r0, 800baec <_svfiprintf_r+0x30>
 800bae0:	230c      	movs	r3, #12
 800bae2:	f8c8 3000 	str.w	r3, [r8]
 800bae6:	f04f 30ff 	mov.w	r0, #4294967295
 800baea:	e0c8      	b.n	800bc7e <_svfiprintf_r+0x1c2>
 800baec:	2340      	movs	r3, #64	; 0x40
 800baee:	6163      	str	r3, [r4, #20]
 800baf0:	2300      	movs	r3, #0
 800baf2:	9309      	str	r3, [sp, #36]	; 0x24
 800baf4:	2320      	movs	r3, #32
 800baf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bafa:	2330      	movs	r3, #48	; 0x30
 800bafc:	f04f 0b01 	mov.w	fp, #1
 800bb00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb04:	9503      	str	r5, [sp, #12]
 800bb06:	4637      	mov	r7, r6
 800bb08:	463d      	mov	r5, r7
 800bb0a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bb0e:	b10b      	cbz	r3, 800bb14 <_svfiprintf_r+0x58>
 800bb10:	2b25      	cmp	r3, #37	; 0x25
 800bb12:	d13e      	bne.n	800bb92 <_svfiprintf_r+0xd6>
 800bb14:	ebb7 0a06 	subs.w	sl, r7, r6
 800bb18:	d00b      	beq.n	800bb32 <_svfiprintf_r+0x76>
 800bb1a:	4653      	mov	r3, sl
 800bb1c:	4632      	mov	r2, r6
 800bb1e:	4621      	mov	r1, r4
 800bb20:	4640      	mov	r0, r8
 800bb22:	f7ff ff71 	bl	800ba08 <__ssputs_r>
 800bb26:	3001      	adds	r0, #1
 800bb28:	f000 80a4 	beq.w	800bc74 <_svfiprintf_r+0x1b8>
 800bb2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb2e:	4453      	add	r3, sl
 800bb30:	9309      	str	r3, [sp, #36]	; 0x24
 800bb32:	783b      	ldrb	r3, [r7, #0]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	f000 809d 	beq.w	800bc74 <_svfiprintf_r+0x1b8>
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb44:	9304      	str	r3, [sp, #16]
 800bb46:	9307      	str	r3, [sp, #28]
 800bb48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb4c:	931a      	str	r3, [sp, #104]	; 0x68
 800bb4e:	462f      	mov	r7, r5
 800bb50:	2205      	movs	r2, #5
 800bb52:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bb56:	4850      	ldr	r0, [pc, #320]	; (800bc98 <_svfiprintf_r+0x1dc>)
 800bb58:	f7ff fbac 	bl	800b2b4 <memchr>
 800bb5c:	9b04      	ldr	r3, [sp, #16]
 800bb5e:	b9d0      	cbnz	r0, 800bb96 <_svfiprintf_r+0xda>
 800bb60:	06d9      	lsls	r1, r3, #27
 800bb62:	bf44      	itt	mi
 800bb64:	2220      	movmi	r2, #32
 800bb66:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bb6a:	071a      	lsls	r2, r3, #28
 800bb6c:	bf44      	itt	mi
 800bb6e:	222b      	movmi	r2, #43	; 0x2b
 800bb70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bb74:	782a      	ldrb	r2, [r5, #0]
 800bb76:	2a2a      	cmp	r2, #42	; 0x2a
 800bb78:	d015      	beq.n	800bba6 <_svfiprintf_r+0xea>
 800bb7a:	462f      	mov	r7, r5
 800bb7c:	2000      	movs	r0, #0
 800bb7e:	250a      	movs	r5, #10
 800bb80:	9a07      	ldr	r2, [sp, #28]
 800bb82:	4639      	mov	r1, r7
 800bb84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb88:	3b30      	subs	r3, #48	; 0x30
 800bb8a:	2b09      	cmp	r3, #9
 800bb8c:	d94d      	bls.n	800bc2a <_svfiprintf_r+0x16e>
 800bb8e:	b1b8      	cbz	r0, 800bbc0 <_svfiprintf_r+0x104>
 800bb90:	e00f      	b.n	800bbb2 <_svfiprintf_r+0xf6>
 800bb92:	462f      	mov	r7, r5
 800bb94:	e7b8      	b.n	800bb08 <_svfiprintf_r+0x4c>
 800bb96:	4a40      	ldr	r2, [pc, #256]	; (800bc98 <_svfiprintf_r+0x1dc>)
 800bb98:	463d      	mov	r5, r7
 800bb9a:	1a80      	subs	r0, r0, r2
 800bb9c:	fa0b f000 	lsl.w	r0, fp, r0
 800bba0:	4318      	orrs	r0, r3
 800bba2:	9004      	str	r0, [sp, #16]
 800bba4:	e7d3      	b.n	800bb4e <_svfiprintf_r+0x92>
 800bba6:	9a03      	ldr	r2, [sp, #12]
 800bba8:	1d11      	adds	r1, r2, #4
 800bbaa:	6812      	ldr	r2, [r2, #0]
 800bbac:	9103      	str	r1, [sp, #12]
 800bbae:	2a00      	cmp	r2, #0
 800bbb0:	db01      	blt.n	800bbb6 <_svfiprintf_r+0xfa>
 800bbb2:	9207      	str	r2, [sp, #28]
 800bbb4:	e004      	b.n	800bbc0 <_svfiprintf_r+0x104>
 800bbb6:	4252      	negs	r2, r2
 800bbb8:	f043 0302 	orr.w	r3, r3, #2
 800bbbc:	9207      	str	r2, [sp, #28]
 800bbbe:	9304      	str	r3, [sp, #16]
 800bbc0:	783b      	ldrb	r3, [r7, #0]
 800bbc2:	2b2e      	cmp	r3, #46	; 0x2e
 800bbc4:	d10c      	bne.n	800bbe0 <_svfiprintf_r+0x124>
 800bbc6:	787b      	ldrb	r3, [r7, #1]
 800bbc8:	2b2a      	cmp	r3, #42	; 0x2a
 800bbca:	d133      	bne.n	800bc34 <_svfiprintf_r+0x178>
 800bbcc:	9b03      	ldr	r3, [sp, #12]
 800bbce:	3702      	adds	r7, #2
 800bbd0:	1d1a      	adds	r2, r3, #4
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	9203      	str	r2, [sp, #12]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	bfb8      	it	lt
 800bbda:	f04f 33ff 	movlt.w	r3, #4294967295
 800bbde:	9305      	str	r3, [sp, #20]
 800bbe0:	4d2e      	ldr	r5, [pc, #184]	; (800bc9c <_svfiprintf_r+0x1e0>)
 800bbe2:	2203      	movs	r2, #3
 800bbe4:	7839      	ldrb	r1, [r7, #0]
 800bbe6:	4628      	mov	r0, r5
 800bbe8:	f7ff fb64 	bl	800b2b4 <memchr>
 800bbec:	b138      	cbz	r0, 800bbfe <_svfiprintf_r+0x142>
 800bbee:	2340      	movs	r3, #64	; 0x40
 800bbf0:	1b40      	subs	r0, r0, r5
 800bbf2:	fa03 f000 	lsl.w	r0, r3, r0
 800bbf6:	9b04      	ldr	r3, [sp, #16]
 800bbf8:	3701      	adds	r7, #1
 800bbfa:	4303      	orrs	r3, r0
 800bbfc:	9304      	str	r3, [sp, #16]
 800bbfe:	7839      	ldrb	r1, [r7, #0]
 800bc00:	2206      	movs	r2, #6
 800bc02:	4827      	ldr	r0, [pc, #156]	; (800bca0 <_svfiprintf_r+0x1e4>)
 800bc04:	1c7e      	adds	r6, r7, #1
 800bc06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc0a:	f7ff fb53 	bl	800b2b4 <memchr>
 800bc0e:	2800      	cmp	r0, #0
 800bc10:	d038      	beq.n	800bc84 <_svfiprintf_r+0x1c8>
 800bc12:	4b24      	ldr	r3, [pc, #144]	; (800bca4 <_svfiprintf_r+0x1e8>)
 800bc14:	bb13      	cbnz	r3, 800bc5c <_svfiprintf_r+0x1a0>
 800bc16:	9b03      	ldr	r3, [sp, #12]
 800bc18:	3307      	adds	r3, #7
 800bc1a:	f023 0307 	bic.w	r3, r3, #7
 800bc1e:	3308      	adds	r3, #8
 800bc20:	9303      	str	r3, [sp, #12]
 800bc22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc24:	444b      	add	r3, r9
 800bc26:	9309      	str	r3, [sp, #36]	; 0x24
 800bc28:	e76d      	b.n	800bb06 <_svfiprintf_r+0x4a>
 800bc2a:	fb05 3202 	mla	r2, r5, r2, r3
 800bc2e:	2001      	movs	r0, #1
 800bc30:	460f      	mov	r7, r1
 800bc32:	e7a6      	b.n	800bb82 <_svfiprintf_r+0xc6>
 800bc34:	2300      	movs	r3, #0
 800bc36:	250a      	movs	r5, #10
 800bc38:	4619      	mov	r1, r3
 800bc3a:	3701      	adds	r7, #1
 800bc3c:	9305      	str	r3, [sp, #20]
 800bc3e:	4638      	mov	r0, r7
 800bc40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc44:	3a30      	subs	r2, #48	; 0x30
 800bc46:	2a09      	cmp	r2, #9
 800bc48:	d903      	bls.n	800bc52 <_svfiprintf_r+0x196>
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d0c8      	beq.n	800bbe0 <_svfiprintf_r+0x124>
 800bc4e:	9105      	str	r1, [sp, #20]
 800bc50:	e7c6      	b.n	800bbe0 <_svfiprintf_r+0x124>
 800bc52:	fb05 2101 	mla	r1, r5, r1, r2
 800bc56:	2301      	movs	r3, #1
 800bc58:	4607      	mov	r7, r0
 800bc5a:	e7f0      	b.n	800bc3e <_svfiprintf_r+0x182>
 800bc5c:	ab03      	add	r3, sp, #12
 800bc5e:	9300      	str	r3, [sp, #0]
 800bc60:	4622      	mov	r2, r4
 800bc62:	4b11      	ldr	r3, [pc, #68]	; (800bca8 <_svfiprintf_r+0x1ec>)
 800bc64:	a904      	add	r1, sp, #16
 800bc66:	4640      	mov	r0, r8
 800bc68:	f7fe f8ee 	bl	8009e48 <_printf_float>
 800bc6c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bc70:	4681      	mov	r9, r0
 800bc72:	d1d6      	bne.n	800bc22 <_svfiprintf_r+0x166>
 800bc74:	89a3      	ldrh	r3, [r4, #12]
 800bc76:	065b      	lsls	r3, r3, #25
 800bc78:	f53f af35 	bmi.w	800bae6 <_svfiprintf_r+0x2a>
 800bc7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc7e:	b01d      	add	sp, #116	; 0x74
 800bc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc84:	ab03      	add	r3, sp, #12
 800bc86:	9300      	str	r3, [sp, #0]
 800bc88:	4622      	mov	r2, r4
 800bc8a:	4b07      	ldr	r3, [pc, #28]	; (800bca8 <_svfiprintf_r+0x1ec>)
 800bc8c:	a904      	add	r1, sp, #16
 800bc8e:	4640      	mov	r0, r8
 800bc90:	f7fe fb86 	bl	800a3a0 <_printf_i>
 800bc94:	e7ea      	b.n	800bc6c <_svfiprintf_r+0x1b0>
 800bc96:	bf00      	nop
 800bc98:	0800d70c 	.word	0x0800d70c
 800bc9c:	0800d712 	.word	0x0800d712
 800bca0:	0800d716 	.word	0x0800d716
 800bca4:	08009e49 	.word	0x08009e49
 800bca8:	0800ba09 	.word	0x0800ba09

0800bcac <_sbrk_r>:
 800bcac:	b538      	push	{r3, r4, r5, lr}
 800bcae:	2300      	movs	r3, #0
 800bcb0:	4c05      	ldr	r4, [pc, #20]	; (800bcc8 <_sbrk_r+0x1c>)
 800bcb2:	4605      	mov	r5, r0
 800bcb4:	4608      	mov	r0, r1
 800bcb6:	6023      	str	r3, [r4, #0]
 800bcb8:	f7fb feca 	bl	8007a50 <_sbrk>
 800bcbc:	1c43      	adds	r3, r0, #1
 800bcbe:	d102      	bne.n	800bcc6 <_sbrk_r+0x1a>
 800bcc0:	6823      	ldr	r3, [r4, #0]
 800bcc2:	b103      	cbz	r3, 800bcc6 <_sbrk_r+0x1a>
 800bcc4:	602b      	str	r3, [r5, #0]
 800bcc6:	bd38      	pop	{r3, r4, r5, pc}
 800bcc8:	20005b70 	.word	0x20005b70

0800bccc <__ascii_mbtowc>:
 800bccc:	b082      	sub	sp, #8
 800bcce:	b901      	cbnz	r1, 800bcd2 <__ascii_mbtowc+0x6>
 800bcd0:	a901      	add	r1, sp, #4
 800bcd2:	b142      	cbz	r2, 800bce6 <__ascii_mbtowc+0x1a>
 800bcd4:	b14b      	cbz	r3, 800bcea <__ascii_mbtowc+0x1e>
 800bcd6:	7813      	ldrb	r3, [r2, #0]
 800bcd8:	600b      	str	r3, [r1, #0]
 800bcda:	7812      	ldrb	r2, [r2, #0]
 800bcdc:	1c10      	adds	r0, r2, #0
 800bcde:	bf18      	it	ne
 800bce0:	2001      	movne	r0, #1
 800bce2:	b002      	add	sp, #8
 800bce4:	4770      	bx	lr
 800bce6:	4610      	mov	r0, r2
 800bce8:	e7fb      	b.n	800bce2 <__ascii_mbtowc+0x16>
 800bcea:	f06f 0001 	mvn.w	r0, #1
 800bcee:	e7f8      	b.n	800bce2 <__ascii_mbtowc+0x16>

0800bcf0 <memmove>:
 800bcf0:	4288      	cmp	r0, r1
 800bcf2:	b510      	push	{r4, lr}
 800bcf4:	eb01 0302 	add.w	r3, r1, r2
 800bcf8:	d807      	bhi.n	800bd0a <memmove+0x1a>
 800bcfa:	1e42      	subs	r2, r0, #1
 800bcfc:	4299      	cmp	r1, r3
 800bcfe:	d00a      	beq.n	800bd16 <memmove+0x26>
 800bd00:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd04:	f802 4f01 	strb.w	r4, [r2, #1]!
 800bd08:	e7f8      	b.n	800bcfc <memmove+0xc>
 800bd0a:	4283      	cmp	r3, r0
 800bd0c:	d9f5      	bls.n	800bcfa <memmove+0xa>
 800bd0e:	1881      	adds	r1, r0, r2
 800bd10:	1ad2      	subs	r2, r2, r3
 800bd12:	42d3      	cmn	r3, r2
 800bd14:	d100      	bne.n	800bd18 <memmove+0x28>
 800bd16:	bd10      	pop	{r4, pc}
 800bd18:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd1c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bd20:	e7f7      	b.n	800bd12 <memmove+0x22>

0800bd22 <__malloc_lock>:
 800bd22:	4770      	bx	lr

0800bd24 <__malloc_unlock>:
 800bd24:	4770      	bx	lr

0800bd26 <_realloc_r>:
 800bd26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd28:	4607      	mov	r7, r0
 800bd2a:	4614      	mov	r4, r2
 800bd2c:	460e      	mov	r6, r1
 800bd2e:	b921      	cbnz	r1, 800bd3a <_realloc_r+0x14>
 800bd30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bd34:	4611      	mov	r1, r2
 800bd36:	f7ff be0d 	b.w	800b954 <_malloc_r>
 800bd3a:	b922      	cbnz	r2, 800bd46 <_realloc_r+0x20>
 800bd3c:	f7ff fdbe 	bl	800b8bc <_free_r>
 800bd40:	4625      	mov	r5, r4
 800bd42:	4628      	mov	r0, r5
 800bd44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd46:	f000 f821 	bl	800bd8c <_malloc_usable_size_r>
 800bd4a:	42a0      	cmp	r0, r4
 800bd4c:	d20f      	bcs.n	800bd6e <_realloc_r+0x48>
 800bd4e:	4621      	mov	r1, r4
 800bd50:	4638      	mov	r0, r7
 800bd52:	f7ff fdff 	bl	800b954 <_malloc_r>
 800bd56:	4605      	mov	r5, r0
 800bd58:	2800      	cmp	r0, #0
 800bd5a:	d0f2      	beq.n	800bd42 <_realloc_r+0x1c>
 800bd5c:	4631      	mov	r1, r6
 800bd5e:	4622      	mov	r2, r4
 800bd60:	f7ff fab6 	bl	800b2d0 <memcpy>
 800bd64:	4631      	mov	r1, r6
 800bd66:	4638      	mov	r0, r7
 800bd68:	f7ff fda8 	bl	800b8bc <_free_r>
 800bd6c:	e7e9      	b.n	800bd42 <_realloc_r+0x1c>
 800bd6e:	4635      	mov	r5, r6
 800bd70:	e7e7      	b.n	800bd42 <_realloc_r+0x1c>

0800bd72 <__ascii_wctomb>:
 800bd72:	b149      	cbz	r1, 800bd88 <__ascii_wctomb+0x16>
 800bd74:	2aff      	cmp	r2, #255	; 0xff
 800bd76:	bf8b      	itete	hi
 800bd78:	238a      	movhi	r3, #138	; 0x8a
 800bd7a:	700a      	strbls	r2, [r1, #0]
 800bd7c:	6003      	strhi	r3, [r0, #0]
 800bd7e:	2001      	movls	r0, #1
 800bd80:	bf88      	it	hi
 800bd82:	f04f 30ff 	movhi.w	r0, #4294967295
 800bd86:	4770      	bx	lr
 800bd88:	4608      	mov	r0, r1
 800bd8a:	4770      	bx	lr

0800bd8c <_malloc_usable_size_r>:
 800bd8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd90:	1f18      	subs	r0, r3, #4
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	bfbc      	itt	lt
 800bd96:	580b      	ldrlt	r3, [r1, r0]
 800bd98:	18c0      	addlt	r0, r0, r3
 800bd9a:	4770      	bx	lr

0800bd9c <_init>:
 800bd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd9e:	bf00      	nop
 800bda0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bda2:	bc08      	pop	{r3}
 800bda4:	469e      	mov	lr, r3
 800bda6:	4770      	bx	lr

0800bda8 <_fini>:
 800bda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdaa:	bf00      	nop
 800bdac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdae:	bc08      	pop	{r3}
 800bdb0:	469e      	mov	lr, r3
 800bdb2:	4770      	bx	lr
